{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! Sepsis training materials This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system. Tutorials on Assembly and Annotation can be found under the Microbial Genomics tab in the top panel.","title":"Home"},{"location":"#welcome","text":"","title":"Welcome!"},{"location":"#sepsis-training-materials","text":"This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system. Tutorials on Assembly and Annotation can be found under the Microbial Genomics tab in the top panel.","title":"Sepsis training materials"},{"location":"genomics/","text":"Overview This section contains tutorials for basic microbial genomics analyses in Galaxy. These have been designed to be done sequentially. Use the Galaxy Platform : a web-based interface for bioinformatic analyses. Import tutorial data to Galaxy : a set of files to use in these introductory tutorials. Quality control of Illumina data : assess raw Illumina data for quality issues. Assemble a genome with Spades : assemble raw Illumina sequence reads into a draft bacterial genome sequence using the tool Spades . Annotate a genome with Prokka : describe the type and location of proteins and other features on the draft bacterial genome sequence using the tool Prokka . Find variants with Snippy : identify differences (such as nucleotide mutations) between genomes using the tool Snippy .","title":"Overview"},{"location":"genomics/#overview","text":"This section contains tutorials for basic microbial genomics analyses in Galaxy. These have been designed to be done sequentially. Use the Galaxy Platform : a web-based interface for bioinformatic analyses. Import tutorial data to Galaxy : a set of files to use in these introductory tutorials. Quality control of Illumina data : assess raw Illumina data for quality issues. Assemble a genome with Spades : assemble raw Illumina sequence reads into a draft bacterial genome sequence using the tool Spades . Annotate a genome with Prokka : describe the type and location of proteins and other features on the draft bacterial genome sequence using the tool Prokka . Find variants with Snippy : identify differences (such as nucleotide mutations) between genomes using the tool Snippy .","title":"Overview"},{"location":"index_gcc/","text":"Welcome! Galaxy Community Conference 2016 This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system. Tutorials on Assembly and Annotation can be found under the Microbial Genomics tab in the top panel.","title":"Welcome!"},{"location":"index_gcc/#welcome","text":"","title":"Welcome!"},{"location":"index_gcc/#galaxy-community-conference-2016","text":"This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system. Tutorials on Assembly and Annotation can be found under the Microbial Genomics tab in the top panel.","title":"Galaxy Community Conference 2016"},{"location":"index_mcgill/","text":"Welcome! This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system.","title":"Welcome!"},{"location":"index_mcgill/#welcome","text":"This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial omics data, either on the Unix command line or using the Galaxy system.","title":"Welcome!"},{"location":"template/","text":"Phylogenomics Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Phylogenomics"},{"location":"template/#phylogenomics","text":"","title":"Phylogenomics"},{"location":"template/#introduction","text":"FIXME","title":"Introduction"},{"location":"template/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"template/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"template/#what-next","text":"FIXME","title":"What next?"},{"location":"tools/","text":"Tools This section includes short training modules about the various tools in the microbial GVL, either within the Galaxy interface or via the commandline. Additional relevant tools and software are also included, particularly for visualization.","title":"Tools"},{"location":"tools/#tools","text":"This section includes short training modules about the various tools in the microbial GVL, either within the Galaxy interface or via the commandline. Additional relevant tools and software are also included, particularly for visualization.","title":"Tools"},{"location":"about/","text":"About SEPSIS-Omics is An RDS-funded flagship project to provide cloud-based data services and tools for Australian Life Science Researchers to combine, analyse and interpret genomic, transcriptomic, proteomic and metabolomic data. Authors Anna Syme Torsten Seemann Simon Gladman Dieter Bulach Support Research Data Services Bioplatforms Australia Nectar These training materials have been used for: McGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada Galaxy Community Conference 2016, Indiana, USA CLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016","title":"About"},{"location":"about/#about","text":"SEPSIS-Omics is An RDS-funded flagship project to provide cloud-based data services and tools for Australian Life Science Researchers to combine, analyse and interpret genomic, transcriptomic, proteomic and metabolomic data.","title":"About"},{"location":"about/#authors","text":"Anna Syme Torsten Seemann Simon Gladman Dieter Bulach","title":"Authors"},{"location":"about/#support","text":"Research Data Services Bioplatforms Australia Nectar These training materials have been used for: McGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada Galaxy Community Conference 2016, Indiana, USA CLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016","title":"Support"},{"location":"modules/artemis/","text":"Introduction to Artemis Background Artemis is a genome browser and annotation tool. Artemis is written in Java and can be used on Mac, Linux or Windows. While it can be used to view any genomic data, it is specifically designed for viewing bacterial or viral genomes. A variety of file types can be loaded and viewed using Artemis; these include FASTA, EMBL, GenBank and GFF3 format files. Learning objectives At the end of this tutorial, you should be able to: install Artemis on your laptop download a bacterial genome sequence, and open the genome sequence in Artemis and look at the sequence features. Install Artemis Artemis is available at no cost from the Sanger Institute Website. Instructions for downloading and installing Artemis can be found at: http://www.sanger.ac.uk/science/tools/artemis Download and run. Not working? The most common problem: Java is either not installed or too old. Artemis needs a recent version of Java v1.6 or higher. Go to http://java.com and update. Still not working? Seek help! Download a bacterial genome We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format. Go to http://www.ncbi.nlm.nih.gov Select the \u201cTaxonomy\u201d database from the list on the left hand side. Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search . Click on the species name: Click on the species name again (at the top of the list): Next to Genome , click on the far right number 1 . Click on Genome Assembly and Annotation report : Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003): Then, click Send choose Complete Record , Destination File , Format GenBank (full) click Create File . Note the download location (e.g. Downloads folder). Open the GenBank file in Artemis Open Artemis Menu File Open Select file from dialog box, and OPEN The Artemis interface There are three main panes: The overview The DNA view Text summary of features Overview: 6-frame annotation annotated genome features are highlighted black lines are stop codons DNA view: 6-frame translation DNA sequence in the middle amino acid translations above and below Text summary: text summary of features Navigation: Go to the overview pane click on one annotated feature (highlighted in blue) it will be summarized on the top line ( selected feature ) the corresponding sequence will be highlighted in the DNA view pane the corresponding feature will be higlighted in the text summary pane now double click on the same annotated feature all three panes will be centred for this feature to move left or right, use the horizontal scroll bars under each pane to zoom, use the vertical scroll bars on the right What next Links to more information: the Artemis manual. Assemble a bacterial genome using Spades.","title":"Introduction to Artemis"},{"location":"modules/artemis/#introduction-to-artemis","text":"","title":"Introduction to Artemis"},{"location":"modules/artemis/#background","text":"Artemis is a genome browser and annotation tool. Artemis is written in Java and can be used on Mac, Linux or Windows. While it can be used to view any genomic data, it is specifically designed for viewing bacterial or viral genomes. A variety of file types can be loaded and viewed using Artemis; these include FASTA, EMBL, GenBank and GFF3 format files.","title":"Background"},{"location":"modules/artemis/#learning-objectives","text":"At the end of this tutorial, you should be able to: install Artemis on your laptop download a bacterial genome sequence, and open the genome sequence in Artemis and look at the sequence features.","title":"Learning objectives"},{"location":"modules/artemis/#install-artemis","text":"Artemis is available at no cost from the Sanger Institute Website. Instructions for downloading and installing Artemis can be found at: http://www.sanger.ac.uk/science/tools/artemis Download and run. Not working? The most common problem: Java is either not installed or too old. Artemis needs a recent version of Java v1.6 or higher. Go to http://java.com and update. Still not working? Seek help!","title":"Install Artemis"},{"location":"modules/artemis/#download-a-bacterial-genome","text":"We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format. Go to http://www.ncbi.nlm.nih.gov Select the \u201cTaxonomy\u201d database from the list on the left hand side. Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search . Click on the species name: Click on the species name again (at the top of the list): Next to Genome , click on the far right number 1 . Click on Genome Assembly and Annotation report : Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003): Then, click Send choose Complete Record , Destination File , Format GenBank (full) click Create File . Note the download location (e.g. Downloads folder).","title":"Download a bacterial genome"},{"location":"modules/artemis/#open-the-genbank-file-in-artemis","text":"Open Artemis Menu File Open Select file from dialog box, and OPEN","title":"Open the GenBank file in Artemis"},{"location":"modules/artemis/#the-artemis-interface","text":"There are three main panes: The overview The DNA view Text summary of features Overview: 6-frame annotation annotated genome features are highlighted black lines are stop codons DNA view: 6-frame translation DNA sequence in the middle amino acid translations above and below Text summary: text summary of features Navigation: Go to the overview pane click on one annotated feature (highlighted in blue) it will be summarized on the top line ( selected feature ) the corresponding sequence will be highlighted in the DNA view pane the corresponding feature will be higlighted in the text summary pane now double click on the same annotated feature all three panes will be centred for this feature to move left or right, use the horizontal scroll bars under each pane to zoom, use the vertical scroll bars on the right","title":"The Artemis interface"},{"location":"modules/artemis/#what-next","text":"Links to more information: the Artemis manual. Assemble a bacterial genome using Spades.","title":"What next"},{"location":"modules/data-dna/","text":"Dataset This page contains data for the tutorials. Individual input files Wildtype reference wildtype.fna wildtype.gbk wildtype.gff Mutant Illumina sequence mutant_R1.fastq.gz mutant_R2.fastq.gz Assembled contigs SPAdes_contigs.fasta Upload to Galaxy Download required file(s) to your computer. From the Galaxy tool panel, click on Get Data Upload File Click the Choose local file button Find and select the file you downloaded and click Open Set the Type correctly. Click the Start button. Once the progress bar reaches 100%, click the Close button The file will now upload to your current history. Galaxy histories Galaxy history of input files Galaxy history: FastQC Galaxy history: Spades Galaxy history: Prokka Galaxy history: Snippy To get the saved tutorial history (a set of files) into Galaxy: Right-click on Galaxy history of input files above and copy link address. Go to your Galaxy instance. Make sure you are registered and logged in. Refresh the page. Click on the History cog Select Import from File In the box called Archived History URL , paste in the link address to the Galaxy history. Click Submit Wait a few seconds. Click on the view all histories button See if the Galaxy history has been imported: it will be called imported from archive: Data Above that pane, click on the Switch to button. Then click Done (in the top left corner). You should now have a list of five files in your current history.","title":"Training dataset"},{"location":"modules/data-dna/#dataset","text":"This page contains data for the tutorials.","title":"Dataset"},{"location":"modules/data-dna/#individual-input-files","text":"","title":"Individual input files"},{"location":"modules/data-dna/#wildtype-reference","text":"wildtype.fna wildtype.gbk wildtype.gff","title":"Wildtype reference"},{"location":"modules/data-dna/#mutant-illumina-sequence","text":"mutant_R1.fastq.gz mutant_R2.fastq.gz","title":"Mutant Illumina sequence"},{"location":"modules/data-dna/#assembled-contigs","text":"SPAdes_contigs.fasta","title":"Assembled contigs"},{"location":"modules/data-dna/#upload-to-galaxy","text":"Download required file(s) to your computer. From the Galaxy tool panel, click on Get Data Upload File Click the Choose local file button Find and select the file you downloaded and click Open Set the Type correctly. Click the Start button. Once the progress bar reaches 100%, click the Close button The file will now upload to your current history.","title":"Upload to Galaxy"},{"location":"modules/data-dna/#galaxy-histories","text":"Galaxy history of input files Galaxy history: FastQC Galaxy history: Spades Galaxy history: Prokka Galaxy history: Snippy To get the saved tutorial history (a set of files) into Galaxy: Right-click on Galaxy history of input files above and copy link address. Go to your Galaxy instance. Make sure you are registered and logged in. Refresh the page. Click on the History cog Select Import from File In the box called Archived History URL , paste in the link address to the Galaxy history. Click Submit Wait a few seconds. Click on the view all histories button See if the Galaxy history has been imported: it will be called imported from archive: Data Above that pane, click on the Switch to button. Then click Done (in the top left corner). You should now have a list of five files in your current history.","title":"Galaxy histories"},{"location":"modules/dge/","text":"Differential Gene Expression This tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web). Background Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions. Learning Objectives At the end of this tutorial you should be able to: Align RNA-Seq data to a reference genome Count transcripts for each sample Perform statistical analysis to obtain a list of differentially expressed genes Visualize and interpret the results Input data: reads and reference RNA-Seq reads A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples. Our RNA-seq reads are from 6 samples in FASTQ format. We have single-end reads; so one file per sample. Data could also be paired-end reads, and there would be two files per sample. These have been reduced to 1% of their original size for this tutorial. The experiment used the bacteria E. coli grown in two conditions. Files labelled LB are the wildtype Files labelled MG have been exposed to 0.5% MG - alpha methyglucoside (a sugar solution). Reference genome The reference genomes is in FASTA format and the gene annotations are in GTF format. The FASTA file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids. The GTF file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences. Upload files to Galaxy Log in to your Galaxy server. In the History pane, click on the cog icon, and select Import from File (at the bottom of the list). Under Archived History URL paste: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz In the History pane, click on the view icon and find the uploaded history. (This may take a minute. Refresh the page.) Click Switch to that history, then Done . The files should now be ready to use in your current History pane. Align reads to reference The RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome. In Galaxy: Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM Under Will you select a reference genome from your history or use a built-in index? : Use a genome from history and build index Use the following dataset as the reference sequence : Ecoli_k12.fasta Single or Paired-end reads : single Select fastq dataset : Click on the Multiple Datasets icon in centre Select all 6 FASTQ files (they turn blue; use side-scroll bar to check all have been selected) This will map each set of reads to the reference genome Your tool interface should look like this: Click Execute Click Refresh in the history pane to see if the analysis has finished. Output: 6 bam files of reads mapped to the reference genome. Re-name the output files: These are called Map with BWA-MEM on data x and data x . Click on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.). Click Save . Count reads per gene We now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file. In Galaxy: Go to Tools NGS Analysis NGS: RNA Analysis SAM/BAM to count matrix . Note: Don t select the tool called htseq-count . The SAM/BAM to count matrix also uses that tool but allows an input of multiple bam files, which is what we want. For Gene model (GFF) file to count reads over from your current history , select the GTF file. For Reads are stranded select Yes (box turns dark grey) For GTF feature type for counting reads select transcript . For bam/sam file from your history choose the 6 bam files. Your tool interface should look like this: Click Execute Click Refresh in the history pane to see if the analysis has finished. Output: There is one output file: bams to DGE count matrix . Click on the file name to expand the information in the History pane. Click on the file icon underneath to download it to your computer for use later on in this tutorial. Click on the eye icon to see this file. Each row is a gene (or feature) and each column is a sample, with counts against each gene. Have a look at how the counts vary between samples, per gene. We can t just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step. DGE in Degust Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression. (Degust can also display the results from DGE analyses performed elsewhere.) Upload counts file Go to the Degust web page . Click Get Started . Click on Choose File . Select the htseq output file. tabular (that you previously downloaded to your computer from Galaxy) and click Open . Click Upload . A Configuation page will appear. For Name type DGE in E coli For Info columns select Contig For Analyze server side leave box checked. For Min read count put 10 . Click Add condition Add a condition called Control and select the LB columns. Add a condition called Treament and select the MG columns. Your Configuration page should look like this: Save changes View - this brings up the Degust viewing window. Overview of Degust sections Top black panel with Configure settings at right. Left: Conditions: Control and Treatment. Left: Method selection for DGE. Top centre: Plots, with options at right. When either of the expression plots are selected, a heatmap appears below. A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column). Analyze gene expression Under Method , make sure that Voom/Limma is selected. Click Apply . This runs Voom/Limma on the uploaded counts. MDS plot First, look at the MDS plot. This is a multidimensional scaling plot which represents the variation between samples. Ideally: All the LB samples would be close to each other All the MG samples would be close to each other The LB and MG groups would be far apart The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis. Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct. Expression - MA plot Each dot shows the change in expression in one gene. The average expression (over both condition and treatment samples) is represented on the x-axis. Plot points should be symmetrical around the x-axis. We can see that many genes are expressed at a low level, and some are highly expressed. The fold change is represented on the y axis. If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR 0.05). At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant. Click on the dot to see the gene name. Expression - Parallel Coordinates and heatmap Each line shows the change in expression in one gene, between control and treatment. Go to Options at the right. For FDR cut-off set at 0.001. This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences. Look at the Parallel Coordinates plot. There are two axes: Left: Control : Gene expression in the control samples. All values are set at zero. Right: Treatment Gene expression in the treatment samples, relative to expression in the control. The blocks of blue and red underneath the plot are called a heatmap. Each block is a gene. Click on a block to see its line in the plot above. Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue. Note: for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series). Table of genes Contig : names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation). FDR : False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR. Control and Treatment : log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the Control column are zero. This can be changed in the Options panel at the top right. In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically. Table of genes and expression: DGE in Galaxy Differential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above: Count reads per gene ). Go to Tools NGS Analysis NGS: RNA Analysis Differential Count models This has options to use edgeR, DESeq, or Voom. Here we will use Voom. For Select an input matrix choose the count matrix file generated in the previous step. For Title for job outputs enter DGE using voom . For Select columns containing treatment tick boxes for the MG samples. For Select columns containing control tick boxes for the LB samples. Under Run this model using edgeR choose Do not run edgeR . Under Run the same model with DESeq2 and compare findings choose Do not run DESeq2 . Under Run the same model with Voom/limma and compare findings choose Run VOOM . Your tool interface should look like this: Click Execute . There are two output files. View the file called DGEusingvoom.html . Scroll down to VOOM log output and #VOOM top 50 . The Contig column has the gene names. Look at the adj.P.Val column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column. Look at the logFC column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples. View the file called DEGusingvoom_topTable_VOOM.xls . This is a list of all the genes that had transcripts mapped, and associated statistics. What next? To learn more about the differentially-expressed genes: Go to the NCBI website. Under All Databases , click on Gene Enter the gene name in the search bar; e.g. ptsG Click on the first result that matches the species (e.g. in this case, E. coli ). This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource). Some of the most (statistically) significant differentially-expressed genes in this experiment are: ptsG : a glucose-specific transporter. setA : a sugar efflux transporter; is induced by glucose-phosphate stress. sucD : the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production. sucB : a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle. deoC : 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport. Next steps: Investigate the biochemical pathways involving the genes of interest, using resources such as: KEGG pathways Gene Set Enrichment Analysis More information Link to Degust. Link to Voom paper.","title":"Differential gene expression"},{"location":"modules/dge/#differential-gene-expression","text":"This tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).","title":"Differential Gene Expression"},{"location":"modules/dge/#background","text":"Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.","title":"Background"},{"location":"modules/dge/#learning-objectives","text":"At the end of this tutorial you should be able to: Align RNA-Seq data to a reference genome Count transcripts for each sample Perform statistical analysis to obtain a list of differentially expressed genes Visualize and interpret the results","title":"Learning Objectives"},{"location":"modules/dge/#input-data-reads-and-reference","text":"RNA-Seq reads A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples. Our RNA-seq reads are from 6 samples in FASTQ format. We have single-end reads; so one file per sample. Data could also be paired-end reads, and there would be two files per sample. These have been reduced to 1% of their original size for this tutorial. The experiment used the bacteria E. coli grown in two conditions. Files labelled LB are the wildtype Files labelled MG have been exposed to 0.5% MG - alpha methyglucoside (a sugar solution). Reference genome The reference genomes is in FASTA format and the gene annotations are in GTF format. The FASTA file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids. The GTF file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences. Upload files to Galaxy Log in to your Galaxy server. In the History pane, click on the cog icon, and select Import from File (at the bottom of the list). Under Archived History URL paste: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz In the History pane, click on the view icon and find the uploaded history. (This may take a minute. Refresh the page.) Click Switch to that history, then Done . The files should now be ready to use in your current History pane.","title":"Input data: reads and reference"},{"location":"modules/dge/#align-reads-to-reference","text":"The RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome. In Galaxy: Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM Under Will you select a reference genome from your history or use a built-in index? : Use a genome from history and build index Use the following dataset as the reference sequence : Ecoli_k12.fasta Single or Paired-end reads : single Select fastq dataset : Click on the Multiple Datasets icon in centre Select all 6 FASTQ files (they turn blue; use side-scroll bar to check all have been selected) This will map each set of reads to the reference genome Your tool interface should look like this: Click Execute Click Refresh in the history pane to see if the analysis has finished. Output: 6 bam files of reads mapped to the reference genome. Re-name the output files: These are called Map with BWA-MEM on data x and data x . Click on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.). Click Save .","title":"Align reads to reference"},{"location":"modules/dge/#count-reads-per-gene","text":"We now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file. In Galaxy: Go to Tools NGS Analysis NGS: RNA Analysis SAM/BAM to count matrix . Note: Don t select the tool called htseq-count . The SAM/BAM to count matrix also uses that tool but allows an input of multiple bam files, which is what we want. For Gene model (GFF) file to count reads over from your current history , select the GTF file. For Reads are stranded select Yes (box turns dark grey) For GTF feature type for counting reads select transcript . For bam/sam file from your history choose the 6 bam files. Your tool interface should look like this: Click Execute Click Refresh in the history pane to see if the analysis has finished. Output: There is one output file: bams to DGE count matrix . Click on the file name to expand the information in the History pane. Click on the file icon underneath to download it to your computer for use later on in this tutorial. Click on the eye icon to see this file. Each row is a gene (or feature) and each column is a sample, with counts against each gene. Have a look at how the counts vary between samples, per gene. We can t just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.","title":"Count reads per gene"},{"location":"modules/dge/#dge-in-degust","text":"Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression. (Degust can also display the results from DGE analyses performed elsewhere.)","title":"DGE in Degust"},{"location":"modules/dge/#upload-counts-file","text":"Go to the Degust web page . Click Get Started . Click on Choose File . Select the htseq output file. tabular (that you previously downloaded to your computer from Galaxy) and click Open . Click Upload . A Configuation page will appear. For Name type DGE in E coli For Info columns select Contig For Analyze server side leave box checked. For Min read count put 10 . Click Add condition Add a condition called Control and select the LB columns. Add a condition called Treament and select the MG columns. Your Configuration page should look like this: Save changes View - this brings up the Degust viewing window.","title":"Upload counts file"},{"location":"modules/dge/#overview-of-degust-sections","text":"Top black panel with Configure settings at right. Left: Conditions: Control and Treatment. Left: Method selection for DGE. Top centre: Plots, with options at right. When either of the expression plots are selected, a heatmap appears below. A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).","title":"Overview of Degust sections"},{"location":"modules/dge/#analyze-gene-expression","text":"Under Method , make sure that Voom/Limma is selected. Click Apply . This runs Voom/Limma on the uploaded counts.","title":"Analyze gene expression"},{"location":"modules/dge/#mds-plot","text":"First, look at the MDS plot. This is a multidimensional scaling plot which represents the variation between samples. Ideally: All the LB samples would be close to each other All the MG samples would be close to each other The LB and MG groups would be far apart The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis. Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.","title":"MDS plot"},{"location":"modules/dge/#expression-ma-plot","text":"Each dot shows the change in expression in one gene. The average expression (over both condition and treatment samples) is represented on the x-axis. Plot points should be symmetrical around the x-axis. We can see that many genes are expressed at a low level, and some are highly expressed. The fold change is represented on the y axis. If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR 0.05). At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant. Click on the dot to see the gene name.","title":"Expression - MA plot"},{"location":"modules/dge/#expression-parallel-coordinates-and-heatmap","text":"Each line shows the change in expression in one gene, between control and treatment. Go to Options at the right. For FDR cut-off set at 0.001. This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences. Look at the Parallel Coordinates plot. There are two axes: Left: Control : Gene expression in the control samples. All values are set at zero. Right: Treatment Gene expression in the treatment samples, relative to expression in the control. The blocks of blue and red underneath the plot are called a heatmap. Each block is a gene. Click on a block to see its line in the plot above. Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue. Note: for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).","title":"Expression - Parallel Coordinates and heatmap"},{"location":"modules/dge/#table-of-genes","text":"Contig : names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation). FDR : False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR. Control and Treatment : log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the Control column are zero. This can be changed in the Options panel at the top right. In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically. Table of genes and expression:","title":"Table of genes"},{"location":"modules/dge/#dge-in-galaxy","text":"Differential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above: Count reads per gene ). Go to Tools NGS Analysis NGS: RNA Analysis Differential Count models This has options to use edgeR, DESeq, or Voom. Here we will use Voom. For Select an input matrix choose the count matrix file generated in the previous step. For Title for job outputs enter DGE using voom . For Select columns containing treatment tick boxes for the MG samples. For Select columns containing control tick boxes for the LB samples. Under Run this model using edgeR choose Do not run edgeR . Under Run the same model with DESeq2 and compare findings choose Do not run DESeq2 . Under Run the same model with Voom/limma and compare findings choose Run VOOM . Your tool interface should look like this: Click Execute . There are two output files. View the file called DGEusingvoom.html . Scroll down to VOOM log output and #VOOM top 50 . The Contig column has the gene names. Look at the adj.P.Val column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column. Look at the logFC column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples. View the file called DEGusingvoom_topTable_VOOM.xls . This is a list of all the genes that had transcripts mapped, and associated statistics.","title":"DGE in Galaxy"},{"location":"modules/dge/#what-next","text":"To learn more about the differentially-expressed genes: Go to the NCBI website. Under All Databases , click on Gene Enter the gene name in the search bar; e.g. ptsG Click on the first result that matches the species (e.g. in this case, E. coli ). This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource). Some of the most (statistically) significant differentially-expressed genes in this experiment are: ptsG : a glucose-specific transporter. setA : a sugar efflux transporter; is induced by glucose-phosphate stress. sucD : the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production. sucB : a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle. deoC : 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport. Next steps: Investigate the biochemical pathways involving the genes of interest, using resources such as: KEGG pathways Gene Set Enrichment Analysis","title":"What next?"},{"location":"modules/dge/#more-information","text":"Link to Degust. Link to Voom paper.","title":"More information"},{"location":"modules/fastqc/","text":"FastQC in Galaxy After sequencing, the reads should be checked for their quality. This tutorial demonstrates how to use the tool called FastQC to examine bacterial paired-end Illumina sequence reads. The FastQC website is here. Learning Objectives At the end of this tutorial you should be able to: run FastQC on input sequence reads, and examine the FastQC output. Input files We will use the paired-end read set from our Galaxy history. These are the files mutant_R1.fastq and mutant_R2.fastq . If you don t have these FASTQ files in your current Galaxy history see how to get them here . FASTQ is a file format for sequence reads that displays quality scores for each of the sequenced nucleotides. For more information about FASTQ format see this link . We will evaluate the mutant_R1.fastq reads using the FastQC tool. Run FastQC Go to Tools NGS Analysis NGS: QC and Manipulation FastQC for Short read data from your current history : mutant_R1.fastq Click Execute In the History pane, click on the refresh icon to see if the analysis has finished. Examine output files Once finished, examine the output called FastQC on data1:webpage (Hint: click the eye icon). It has a summary at the top of the page and a number of graphs. Look at: Basic Statistics Sequence length : will be important in setting maximum k-mer size value for assembly. Encoding : The quality encoding type is important for quality trimming software. % GC : high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution. Total sequences : Total number of reads: gives you an idea of coverage. Per base sequence quality : Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run. In this case, all the reads are of relatively high quality across their length (150 bp). Per base N content : Presence of large numbers of Ns in reads may point to a poor quality sequencing run. You would need to trim these reads to remove Ns. Kmer content : Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc. In this case, we have spikes in two types of kmers. We have warnings for two outputs (per base sequence content; Kmer content). This would warrant more investigation. General questions you might ask about your input reads include: How good is my read set? Do I need to ask for a new sequencing run? Is it suitable for the analysis I need to do? For a fuller discussion of FastQC outputs and warnings, see the FastQC website link , including the section on each of the output reports , and examples of good and bad Illumina data. What Next? Assemble the reads into a draft genome sequence .","title":"FastQC in Galaxy"},{"location":"modules/fastqc/#fastqc-in-galaxy","text":"After sequencing, the reads should be checked for their quality. This tutorial demonstrates how to use the tool called FastQC to examine bacterial paired-end Illumina sequence reads. The FastQC website is here.","title":"FastQC in Galaxy"},{"location":"modules/fastqc/#learning-objectives","text":"At the end of this tutorial you should be able to: run FastQC on input sequence reads, and examine the FastQC output.","title":"Learning Objectives"},{"location":"modules/fastqc/#input-files","text":"We will use the paired-end read set from our Galaxy history. These are the files mutant_R1.fastq and mutant_R2.fastq . If you don t have these FASTQ files in your current Galaxy history see how to get them here . FASTQ is a file format for sequence reads that displays quality scores for each of the sequenced nucleotides. For more information about FASTQ format see this link . We will evaluate the mutant_R1.fastq reads using the FastQC tool.","title":"Input files"},{"location":"modules/fastqc/#run-fastqc","text":"Go to Tools NGS Analysis NGS: QC and Manipulation FastQC for Short read data from your current history : mutant_R1.fastq Click Execute In the History pane, click on the refresh icon to see if the analysis has finished.","title":"Run FastQC"},{"location":"modules/fastqc/#examine-output-files","text":"Once finished, examine the output called FastQC on data1:webpage (Hint: click the eye icon). It has a summary at the top of the page and a number of graphs. Look at: Basic Statistics Sequence length : will be important in setting maximum k-mer size value for assembly. Encoding : The quality encoding type is important for quality trimming software. % GC : high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution. Total sequences : Total number of reads: gives you an idea of coverage. Per base sequence quality : Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run. In this case, all the reads are of relatively high quality across their length (150 bp). Per base N content : Presence of large numbers of Ns in reads may point to a poor quality sequencing run. You would need to trim these reads to remove Ns. Kmer content : Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc. In this case, we have spikes in two types of kmers. We have warnings for two outputs (per base sequence content; Kmer content). This would warrant more investigation. General questions you might ask about your input reads include: How good is my read set? Do I need to ask for a new sequencing run? Is it suitable for the analysis I need to do? For a fuller discussion of FastQC outputs and warnings, see the FastQC website link , including the section on each of the output reports , and examples of good and bad Illumina data.","title":"Examine output files"},{"location":"modules/fastqc/#what-next","text":"Assemble the reads into a draft genome sequence .","title":"What Next?"},{"location":"modules/freebayes/","text":"Comparative Genomics Background In this activity we will identify \u2018micro\u2019 differences between genome sequences using the BWA short read mapper and Freebayes variant caller. After investigating the \u2018micro\u2019 differences (SNPs/INDELS), we will attempt to detect larger \u2018macro\u2019 differences using Mauve. Learning objectives At the end of this tutorial you should be able to: map sequence reads to a reference genome view the mapped reads identify variants using Freebayes, and identify larger structural variants using Mauve. Input data The genome sequences being compared are those of the \u2018wildtype\u2019 and \u2018mutant\u2019 strains. The relevant files should already be available on Galaxy (from the previous Assembly with Spades tutorial). Just for a recap: We have a closed, annotated genome sequence for the wildtype strain. This file has two formats (one with the sequence, and one with the features). Files: wildtype.fna and wildtype.gff For the mutant strain we have whole genome shotgun short sequence reads from an Illumina DNA sequencing instrument. Files: mutant_R1.fastq and mutant_R2.fastq (fastq format) The reads are paired-end Each read is 150 bases The reads coverage depth is estimated at 19x. Map reads to reference Map the reads on to the reference sequence Several programs could be used for this but we will use BWA-MEM. Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM . Set the following parameters: Will you select a reference genome from your history or use a built-in index? : Use a genome from history and build index Use the following dataset as the reference sequence : wildtype.fna Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Click Execute . Examine the mapped reads To do this, we will look at the contents of the BAM file. Hint The BAM file is a Binary Compressed Datafile and cannot be viewed directly. If you attempt to view it using the view data button (the eye icon) it will be downloaded to your local computer. Instead, we must convert it to a non-compressed text format (SAM) first. Go to Tools NGS Common Toolsets NGS: SAM tools BAM-to-SAM . BAM File to Convert : your BAM file Execute . View the resultant SAM file by clicking on the eye icon. Have a look at the fields in the file (the column headings). The demonstrator will now point out what all the fields are. (FIXME: or add some info here?) View the BAM file using Artemis In this section we will use Artemis to view the BAM file we produced above. Download the BAM file to your local computer. Click on the name of the BAM file that you created in Section 1. Click on the download button ; you need to download both the BAM file and the bam_index. (FIXME: why?) Also, download the annotated reference sequence; wildtype.gff . Start Artemis and load the wildtype.gff From the Artemis menu, Click File Open Load wildtype.gff . You should now have the wildtype\u2019s annotated sequence loaded into the Artemis genome browser. Load the BAM file into Artemis Click File Read BAM/VCF Select : Galaxy \u2026 .bam Click Ok FIXME: but don t load index? bai file? You should see something like this: Can you find a SNP? Demonstration of the ways that the view of the BAM file can be enhanced! Imagine finding each SNP manually - luckily this can be automated using a tool available on Galaxy. Variant Calling We will now search through our alignment file (BAM) for statistically-valid SNPs using the Freebayes variant calling tool. Run Freebayes Go to Tools NGS Analysis NGS: Variant Analysis FreeBayes Set the following parameters: Load reference genome from : History Sample BAM file : Map with BWA-MEM on data \u2026 BAM format Use the following dataset as the reference sequence : wildtype.fna Click Execute Examine the Freebayes output Freebayes will create a VCF file. This stands for Variant Calling Format. Click on its View Data button (eye icon) and have a look at the file. There is a lot of header information; the variants appear lower down. Can you spot a SNP? What about an insertion? A deletion? Investigation of Variants What is the impact of the differences we have observed? In this section we will use some simple strategies to predict the impact of the variant on the function of the gene and perhaps even the strain itself. Artemis - the annotated draft genome sequence of the mutant strain - what is the impact the protein coding region? what is the predicted function? blastp - http://blast.ncbi.nlm.nih.gov/Blast.cgi the protein domain display - are any major protein domains truncated by the difference? LipoP/SignalP/TmHMM - http://www.cbs.dtu.dk/services/ membrane location prediction - has the change had an impact on the membrane location of the protein? Literature? Can you suggest a type of nucleotide sequence that might have no impact on the function of the encoded protein? In this section we will investigate a few variants together as a demonstration perhaps a few individually too?? Detection of \u2018macro\u2019 INDELS and rearrangement using Mauve We will now examine our earlier assembly and compare it with the reference on a genome wide basis using Mauve. Download and install Mauve. More information on Mauve and its use can be found here . You will then need to load both the reference wildtype.gff file and the mutant.gff file that you downloaded earlier. FIXME: add more","title":"Comparative Genomics"},{"location":"modules/freebayes/#comparative-genomics","text":"","title":"Comparative Genomics"},{"location":"modules/freebayes/#background","text":"In this activity we will identify \u2018micro\u2019 differences between genome sequences using the BWA short read mapper and Freebayes variant caller. After investigating the \u2018micro\u2019 differences (SNPs/INDELS), we will attempt to detect larger \u2018macro\u2019 differences using Mauve.","title":"Background"},{"location":"modules/freebayes/#learning-objectives","text":"At the end of this tutorial you should be able to: map sequence reads to a reference genome view the mapped reads identify variants using Freebayes, and identify larger structural variants using Mauve.","title":"Learning objectives"},{"location":"modules/freebayes/#input-data","text":"The genome sequences being compared are those of the \u2018wildtype\u2019 and \u2018mutant\u2019 strains. The relevant files should already be available on Galaxy (from the previous Assembly with Spades tutorial). Just for a recap: We have a closed, annotated genome sequence for the wildtype strain. This file has two formats (one with the sequence, and one with the features). Files: wildtype.fna and wildtype.gff For the mutant strain we have whole genome shotgun short sequence reads from an Illumina DNA sequencing instrument. Files: mutant_R1.fastq and mutant_R2.fastq (fastq format) The reads are paired-end Each read is 150 bases The reads coverage depth is estimated at 19x.","title":"Input data"},{"location":"modules/freebayes/#map-reads-to-reference","text":"","title":"Map reads to reference"},{"location":"modules/freebayes/#map-the-reads-on-to-the-reference-sequence","text":"Several programs could be used for this but we will use BWA-MEM. Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM . Set the following parameters: Will you select a reference genome from your history or use a built-in index? : Use a genome from history and build index Use the following dataset as the reference sequence : wildtype.fna Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Click Execute .","title":"Map the reads on to the reference sequence"},{"location":"modules/freebayes/#examine-the-mapped-reads","text":"To do this, we will look at the contents of the BAM file. Hint The BAM file is a Binary Compressed Datafile and cannot be viewed directly. If you attempt to view it using the view data button (the eye icon) it will be downloaded to your local computer. Instead, we must convert it to a non-compressed text format (SAM) first. Go to Tools NGS Common Toolsets NGS: SAM tools BAM-to-SAM . BAM File to Convert : your BAM file Execute . View the resultant SAM file by clicking on the eye icon. Have a look at the fields in the file (the column headings). The demonstrator will now point out what all the fields are. (FIXME: or add some info here?)","title":"Examine the mapped reads"},{"location":"modules/freebayes/#view-the-bam-file-using-artemis","text":"In this section we will use Artemis to view the BAM file we produced above.","title":"View the BAM file using Artemis"},{"location":"modules/freebayes/#download-the-bam-file-to-your-local-computer","text":"Click on the name of the BAM file that you created in Section 1. Click on the download button ; you need to download both the BAM file and the bam_index. (FIXME: why?) Also, download the annotated reference sequence; wildtype.gff .","title":"Download the BAM file to your local computer."},{"location":"modules/freebayes/#start-artemis-and-load-the-wildtypegff","text":"From the Artemis menu, Click File Open Load wildtype.gff . You should now have the wildtype\u2019s annotated sequence loaded into the Artemis genome browser.","title":"Start Artemis and load the wildtype.gff"},{"location":"modules/freebayes/#load-the-bam-file-into-artemis","text":"Click File Read BAM/VCF Select : Galaxy \u2026 .bam Click Ok FIXME: but don t load index? bai file? You should see something like this: Can you find a SNP? Demonstration of the ways that the view of the BAM file can be enhanced! Imagine finding each SNP manually - luckily this can be automated using a tool available on Galaxy.","title":"Load the BAM file into Artemis"},{"location":"modules/freebayes/#variant-calling","text":"We will now search through our alignment file (BAM) for statistically-valid SNPs using the Freebayes variant calling tool.","title":"Variant Calling"},{"location":"modules/freebayes/#run-freebayes","text":"Go to Tools NGS Analysis NGS: Variant Analysis FreeBayes Set the following parameters: Load reference genome from : History Sample BAM file : Map with BWA-MEM on data \u2026 BAM format Use the following dataset as the reference sequence : wildtype.fna Click Execute","title":"Run Freebayes"},{"location":"modules/freebayes/#examine-the-freebayes-output","text":"Freebayes will create a VCF file. This stands for Variant Calling Format. Click on its View Data button (eye icon) and have a look at the file. There is a lot of header information; the variants appear lower down. Can you spot a SNP? What about an insertion? A deletion?","title":"Examine the Freebayes output"},{"location":"modules/freebayes/#investigation-of-variants","text":"What is the impact of the differences we have observed? In this section we will use some simple strategies to predict the impact of the variant on the function of the gene and perhaps even the strain itself. Artemis - the annotated draft genome sequence of the mutant strain - what is the impact the protein coding region? what is the predicted function? blastp - http://blast.ncbi.nlm.nih.gov/Blast.cgi the protein domain display - are any major protein domains truncated by the difference? LipoP/SignalP/TmHMM - http://www.cbs.dtu.dk/services/ membrane location prediction - has the change had an impact on the membrane location of the protein? Literature? Can you suggest a type of nucleotide sequence that might have no impact on the function of the encoded protein? In this section we will investigate a few variants together as a demonstration perhaps a few individually too??","title":"Investigation of Variants"},{"location":"modules/freebayes/#detection-of-macro-indels-and-rearrangement-using-mauve","text":"We will now examine our earlier assembly and compare it with the reference on a genome wide basis using Mauve. Download and install Mauve. More information on Mauve and its use can be found here . You will then need to load both the reference wildtype.gff file and the mutant.gff file that you downloaded earlier. FIXME: add more","title":"Detection of \u2018macro\u2019 INDELS and rearrangement using Mauve"},{"location":"modules/galaxy/","text":"Get Data into Galaxy Galaxy Background Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right. Register in Galaxy Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server. (http://galaxy-mel.genome.edu.au) Click on User button on the right. Select: User Register Enter your email, choose a password, and choose a user name. Click Submit Import a history In the menu options across the top, go to Shared Data . Click on Histories . A list of published histories should appear. Click on the history that you want to use. Click on Import history . An option will appear to re-name the history. We don t need to rename it, so click Import . The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses. Other ways to import data into Galaxy Upload a file from your computer Copy a link to a Galaxy history For sample training data files to use, see the next section.","title":"Starting with Galaxy"},{"location":"modules/galaxy/#get-data-into-galaxy","text":"","title":"Get Data into Galaxy"},{"location":"modules/galaxy/#galaxy-background","text":"Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right.","title":"Galaxy Background"},{"location":"modules/galaxy/#register-in-galaxy","text":"Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server. (http://galaxy-mel.genome.edu.au) Click on User button on the right. Select: User Register Enter your email, choose a password, and choose a user name. Click Submit","title":"Register in Galaxy"},{"location":"modules/galaxy/#import-a-history","text":"In the menu options across the top, go to Shared Data . Click on Histories . A list of published histories should appear. Click on the history that you want to use. Click on Import history . An option will appear to re-name the history. We don t need to rename it, so click Import . The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses.","title":"Import a history"},{"location":"modules/galaxy/#other-ways-to-import-data-into-galaxy","text":"Upload a file from your computer Copy a link to a Galaxy history For sample training data files to use, see the next section.","title":"Other ways to import data into Galaxy"},{"location":"modules/galaxy-long/","text":"Using Galaxy Background Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Bioinformatics tools can be added from the Galaxy \u2018tool shed\u2019 or removed as necessary from your Galaxy instance. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right. We will be looking at all three parts in this tutorial. This activity will familiarise you with the Galaxy interface. It will cover the following operations: Logging in to the server Putting data onto Galaxy Using some common tools Learning Objectives At the end of this tutorial you should be able to: Register and login to a Galaxy server. Upload data to a Galaxy server from: A file on your local computer. A file on a remote datastore with an accessible URL. Use tools in Galaxy by: Accessing the tool via the tool menu. Using the tool interface to run the particular tool. Viewing/accessing the tool output. Login to Galaxy Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL. Click on User button on the right and either register or login. If you haven t yet registered yet: Select: User Register Enter your email, choose a password, and choose a user name. Click Submit If you have already registered: Select: User Login Enter your username password. Click Submit Put data onto Galaxy There are two main ways to put your data onto Galaxy; this section will run through both ways. First, we need to make a new history. Make a new history First, make a new folder to store the work we are about to perform. Click on the history options button at the top of the History panel. Select Create New Click on Unnamed history to rename. Type in a new name. Datatypes What sort of file is being uploaded? We need to tell Galaxy what sort of file is being uploaded. Some common datatypes (file formats) are: text, FASTA, FASTQ, VCF, GFF, GBK, and tabular. Upload a file from your own computer With this method you can get most of the files on your own computer into Galaxy. First, download the following file to your computer: Copy this URL and paste it into the address bar in your web browser: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/galaxy101/Contig_stats.txt.gz This is a file stored on the cloud. Press Enter , and the file will download. Note the download location. Next, upload that file to Galaxy From the Galaxy tool panel, click on Get Data Upload File Click the Choose local file button Find and select the Contig_stats.txt.gz file you downloaded and click Open Set the Type to tabular Click the Start button Once the progress bar reaches 100%, click the Close button The file will now upload to your current history. Upload a file from a URL If a file exists on a web resource somewhere and you know its URL (Unique Resource Location - a web address) you can directly load it into Galaxy. From the tool panel, click on Get Data Upload File Click on the Paste/Fetch Data button Copy and paste the following web address into the URL/Text box: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq.gz Set the Type to fastqsanger (CAREFUL: not fastqCsanger) Click Start Once the progress bar has reached 100%, click Close . Note that Galaxy is smart enough to recognize that this is a compressed file and so it will uncompress it as it loads it. Upload another file from a URL Now we are going to upload another file from the remote data source. Repeat the above for: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna Note: this file Type is FASTA . The DNA sequence of Staphylococcus aureus MRSA252 will be loaded into your history as a FASTA file. Your History should now look like this: The data A brief description of each of the three files uploaded to Galaxy: Contigs_stats.txt this file contains a table of summary data from a de novo genome assembly (the process of attempting to recover the full genome of an organism from the short read sequences produced by most DNA sequencing machines). The columns contain a lot of information but the ones we will be using indicate the amount of data (or coverage) that went into making up each piece of the final assembly. bacterial_std_err_1.fastq.gz This file contains sequence reads, in the format produced by Illumina sequencing machines. Read more about the FASTQ format at Wikipedia. MRSA0252.fna This file contains the genome sequence of Staphylococcus aureus MRSA252 . Read more about the FASTA format at Wikipedia. Galaxy tools The purpose of this section is to help you become familiar with the way tools are run on Galaxy. We will see how to: rename files summarize assembly statistics convert file formats, and find features in a DNA sequence. Rename files Two of the files in the History have very long and confusing names. File names can be changed by taking the following steps: Click on the edit icon next to the file in the History called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq In the Name text box, give it a new name. Rename it to: typical.fastq Click the Save button. Repeat the process with another file: Find the file called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna Rename it to MRSA252.fna Much better. There is other functionality hidden behind that edit icon You can change a file\u2019s datatype, convert its format and many other things. Feel free to play around with them at a later date. Summarize assembly statistics We are going to produce a histogram of contig read-coverage depths and calculate the summary statistics from the Contig_stats.txt file. To do this we need to make some changes to the Contig_stats.txt file: cut out a couple of columns from the file remove a line from the file produce a histogram Cut out and keep two columns Click on the eye icon of the Contig_stats.txt file to have a look at it. Note that there are 18 columns in this file. We want column 1 and column 6. Go to Tools Text Manipulation Cut and set the following: Set Cut Columns to: c1,c6 Delimited by : Tab From : Contig_stats.txt Click Execute Examine the new file by clicking on its eye icon . We now have 2 columns instead of the 18 in the original file. Remove the Header lines of the new file Go to Tools Text Manipulation Remove beginning and set the following: Remove First : 1 from : Cut on data1 click Execute Note the the new file is the same as the previous one without the header line. Make a histogram Go to Tools Graph/Display Data Histogram and set the following: Dataset : Remove beginning on Data 4 Numerical column for X axis Column: 2 Number of breaks : 25 Plot title : Histogram of Contig Coverage Label for X axis : Coverage depth Click Execute Click on the eye icon of the histogram to have a look at it. Note there are a few peaks. Maybe these correspond to single, double and triple copy number of these contigs. Calculate summary statistics for contig coverage depth Go to Tools Statistics and Visualisation Statistics Summary Statisitics and set the following: Summary statistics on : Remove beginning on Data 4 Column or expression : c2 Click Execute You\u2019ll note that the summary statistics tool failed (red background in the History ). There was an error! If you click on the filename, and then the bug symbol , it will tell you what went wrong. (There is a missing python library). At this point, you would normally contact your Galaxy server administrator. Convert file formats This shows how to convert a FASTQ file to a FASTA file. The tool creates a new file with the converted data. Go to Tools Basic Tools Convert Formats FASTQ to FASTA and set the following: FASTQ file to convert : typical.fastq Click Execute The output is a new Fasta file called FASTQ to FASTA on data 2 . Find features This example shows how to use a tool called \u201cbarrnap\u201d to search for rRNAs in a DNA sequence. Find all of the ribosomal RNAs in a sequence Go to Tools NGS Analysis NGS: Annotation barrnap and set the following: Fasta file : MRSA252.fna Click Execute The output is barrnap on data 3 It is a gff3 format file (general feature format version 3). Each line in the file describes a feature in the DNA sequence. Filter the annotations to get the 23S RNAs Make a file with only the 23S rRNA features Go to Tools Basic Tools Filter and Sort Select and set the following: Select lines from : (whatever you called the barrnap gff3 output) the pattern : 23S (this will look for all the lines in the file that contain \u201c23S\u201d) Click Execute Now you have a gff3 file with just the 23S annotations! What next? Remember how we started a new History at the beginning? If you want to see any of your old histories, click on the History options button at the top of the History panel and then select \u201cSaved Histories.\u201d This will give you a list of all the histories you have worked on in this Galaxy server. Upload a saved Galaxy history (a set of files) to use in these tutorials .","title":"Using Galaxy"},{"location":"modules/galaxy-long/#using-galaxy","text":"","title":"Using Galaxy"},{"location":"modules/galaxy-long/#background","text":"Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Bioinformatics tools can be added from the Galaxy \u2018tool shed\u2019 or removed as necessary from your Galaxy instance. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right. We will be looking at all three parts in this tutorial. This activity will familiarise you with the Galaxy interface. It will cover the following operations: Logging in to the server Putting data onto Galaxy Using some common tools","title":"Background"},{"location":"modules/galaxy-long/#learning-objectives","text":"At the end of this tutorial you should be able to: Register and login to a Galaxy server. Upload data to a Galaxy server from: A file on your local computer. A file on a remote datastore with an accessible URL. Use tools in Galaxy by: Accessing the tool via the tool menu. Using the tool interface to run the particular tool. Viewing/accessing the tool output.","title":"Learning Objectives"},{"location":"modules/galaxy-long/#login-to-galaxy","text":"Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL. Click on User button on the right and either register or login. If you haven t yet registered yet: Select: User Register Enter your email, choose a password, and choose a user name. Click Submit If you have already registered: Select: User Login Enter your username password. Click Submit","title":"Login to Galaxy"},{"location":"modules/galaxy-long/#put-data-onto-galaxy","text":"There are two main ways to put your data onto Galaxy; this section will run through both ways. First, we need to make a new history.","title":"Put data onto Galaxy"},{"location":"modules/galaxy-long/#make-a-new-history","text":"First, make a new folder to store the work we are about to perform. Click on the history options button at the top of the History panel. Select Create New Click on Unnamed history to rename. Type in a new name.","title":"Make a new history"},{"location":"modules/galaxy-long/#datatypes","text":"What sort of file is being uploaded? We need to tell Galaxy what sort of file is being uploaded. Some common datatypes (file formats) are: text, FASTA, FASTQ, VCF, GFF, GBK, and tabular.","title":"Datatypes"},{"location":"modules/galaxy-long/#upload-a-file-from-your-own-computer","text":"With this method you can get most of the files on your own computer into Galaxy.","title":"Upload a file from your own computer"},{"location":"modules/galaxy-long/#first-download-the-following-file-to-your-computer","text":"Copy this URL and paste it into the address bar in your web browser: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/galaxy101/Contig_stats.txt.gz This is a file stored on the cloud. Press Enter , and the file will download. Note the download location.","title":"First, download the following file to your computer:"},{"location":"modules/galaxy-long/#next-upload-that-file-to-galaxy","text":"From the Galaxy tool panel, click on Get Data Upload File Click the Choose local file button Find and select the Contig_stats.txt.gz file you downloaded and click Open Set the Type to tabular Click the Start button Once the progress bar reaches 100%, click the Close button The file will now upload to your current history.","title":"Next, upload that file to Galaxy"},{"location":"modules/galaxy-long/#upload-a-file-from-a-url","text":"If a file exists on a web resource somewhere and you know its URL (Unique Resource Location - a web address) you can directly load it into Galaxy. From the tool panel, click on Get Data Upload File Click on the Paste/Fetch Data button Copy and paste the following web address into the URL/Text box: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq.gz Set the Type to fastqsanger (CAREFUL: not fastqCsanger) Click Start Once the progress bar has reached 100%, click Close . Note that Galaxy is smart enough to recognize that this is a compressed file and so it will uncompress it as it loads it.","title":"Upload a file from a URL"},{"location":"modules/galaxy-long/#upload-another-file-from-a-url","text":"Now we are going to upload another file from the remote data source. Repeat the above for: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna Note: this file Type is FASTA . The DNA sequence of Staphylococcus aureus MRSA252 will be loaded into your history as a FASTA file. Your History should now look like this:","title":"Upload another file from a URL"},{"location":"modules/galaxy-long/#the-data","text":"A brief description of each of the three files uploaded to Galaxy: Contigs_stats.txt this file contains a table of summary data from a de novo genome assembly (the process of attempting to recover the full genome of an organism from the short read sequences produced by most DNA sequencing machines). The columns contain a lot of information but the ones we will be using indicate the amount of data (or coverage) that went into making up each piece of the final assembly. bacterial_std_err_1.fastq.gz This file contains sequence reads, in the format produced by Illumina sequencing machines. Read more about the FASTQ format at Wikipedia. MRSA0252.fna This file contains the genome sequence of Staphylococcus aureus MRSA252 . Read more about the FASTA format at Wikipedia.","title":"The data"},{"location":"modules/galaxy-long/#galaxy-tools","text":"The purpose of this section is to help you become familiar with the way tools are run on Galaxy. We will see how to: rename files summarize assembly statistics convert file formats, and find features in a DNA sequence.","title":"Galaxy tools"},{"location":"modules/galaxy-long/#rename-files","text":"Two of the files in the History have very long and confusing names. File names can be changed by taking the following steps: Click on the edit icon next to the file in the History called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq In the Name text box, give it a new name. Rename it to: typical.fastq Click the Save button. Repeat the process with another file: Find the file called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna Rename it to MRSA252.fna Much better. There is other functionality hidden behind that edit icon You can change a file\u2019s datatype, convert its format and many other things. Feel free to play around with them at a later date.","title":"Rename files"},{"location":"modules/galaxy-long/#summarize-assembly-statistics","text":"We are going to produce a histogram of contig read-coverage depths and calculate the summary statistics from the Contig_stats.txt file. To do this we need to make some changes to the Contig_stats.txt file: cut out a couple of columns from the file remove a line from the file produce a histogram","title":"Summarize assembly statistics"},{"location":"modules/galaxy-long/#cut-out-and-keep-two-columns","text":"Click on the eye icon of the Contig_stats.txt file to have a look at it. Note that there are 18 columns in this file. We want column 1 and column 6. Go to Tools Text Manipulation Cut and set the following: Set Cut Columns to: c1,c6 Delimited by : Tab From : Contig_stats.txt Click Execute Examine the new file by clicking on its eye icon . We now have 2 columns instead of the 18 in the original file.","title":"Cut out and keep two columns"},{"location":"modules/galaxy-long/#remove-the-header-lines-of-the-new-file","text":"Go to Tools Text Manipulation Remove beginning and set the following: Remove First : 1 from : Cut on data1 click Execute Note the the new file is the same as the previous one without the header line.","title":"Remove the Header lines of the new file"},{"location":"modules/galaxy-long/#make-a-histogram","text":"Go to Tools Graph/Display Data Histogram and set the following: Dataset : Remove beginning on Data 4 Numerical column for X axis Column: 2 Number of breaks : 25 Plot title : Histogram of Contig Coverage Label for X axis : Coverage depth Click Execute Click on the eye icon of the histogram to have a look at it. Note there are a few peaks. Maybe these correspond to single, double and triple copy number of these contigs.","title":"Make a histogram"},{"location":"modules/galaxy-long/#calculate-summary-statistics-for-contig-coverage-depth","text":"Go to Tools Statistics and Visualisation Statistics Summary Statisitics and set the following: Summary statistics on : Remove beginning on Data 4 Column or expression : c2 Click Execute You\u2019ll note that the summary statistics tool failed (red background in the History ). There was an error! If you click on the filename, and then the bug symbol , it will tell you what went wrong. (There is a missing python library). At this point, you would normally contact your Galaxy server administrator.","title":"Calculate summary statistics for contig coverage depth"},{"location":"modules/galaxy-long/#convert-file-formats","text":"This shows how to convert a FASTQ file to a FASTA file. The tool creates a new file with the converted data. Go to Tools Basic Tools Convert Formats FASTQ to FASTA and set the following: FASTQ file to convert : typical.fastq Click Execute The output is a new Fasta file called FASTQ to FASTA on data 2 .","title":"Convert file formats"},{"location":"modules/galaxy-long/#find-features","text":"This example shows how to use a tool called \u201cbarrnap\u201d to search for rRNAs in a DNA sequence.","title":"Find features"},{"location":"modules/galaxy-long/#find-all-of-the-ribosomal-rnas-in-a-sequence","text":"Go to Tools NGS Analysis NGS: Annotation barrnap and set the following: Fasta file : MRSA252.fna Click Execute The output is barrnap on data 3 It is a gff3 format file (general feature format version 3). Each line in the file describes a feature in the DNA sequence.","title":"Find all of the ribosomal RNAs in a sequence"},{"location":"modules/galaxy-long/#filter-the-annotations-to-get-the-23s-rnas","text":"Make a file with only the 23S rRNA features Go to Tools Basic Tools Filter and Sort Select and set the following: Select lines from : (whatever you called the barrnap gff3 output) the pattern : 23S (this will look for all the lines in the file that contain \u201c23S\u201d) Click Execute Now you have a gff3 file with just the 23S annotations!","title":"Filter the annotations to get the 23S RNAs"},{"location":"modules/galaxy-long/#what-next","text":"Remember how we started a new History at the beginning? If you want to see any of your old histories, click on the History options button at the top of the History panel and then select \u201cSaved Histories.\u201d This will give you a list of all the histories you have worked on in this Galaxy server. Upload a saved Galaxy history (a set of files) to use in these tutorials .","title":"What next?"},{"location":"modules/jbrowse/","text":"JBrowse Background JBrowse is a genome browser available through the Galaxy interface or as a stand-alone tool. http://jbrowse.org/ http://genome.cshlp.org/content/19/9/1630.full Today we will use JBrowse within Galaxy. A variety of file types can be viewed using JBrowse, including GFF3, BED, FASTA, BAM, VCF. structure: - top: a reference bar showing chromosome position - feature tracks based on genome annotations: - particular annotations: e.g. tRNA, non coding RNA ? - all annotations in a row? other things in jbrowse: - highlight with the highlight button - drop down arrow next to ref seq - can just show some aas, one strand etc - lots of options with bam drop down menu navigation: - dragging - use navigation buttons (left, right, zoom) - type in coordinates or feature name makefile: - transform datatypes go to Graph/Display Data JBrowse choose the ref sequence? only allows the fasta file? will track options then appear? chose wildtype.fna but: python: can t open file jbrowse.py : [Errno 2] No such file or directory Learning objectives At the end of this tutorial, you should be able to: download a bacterial genome sequence, and open the genome sequence in JBrowse and look at the sequence features. Download a bacterial genome We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format. Go to http://www.ncbi.nlm.nih.gov Select the \u201cTaxonomy\u201d database from the list on the left hand side. Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search . Click on the species name: Click on the species name again (at the top of the list): Next to Genome , click on the far right number 1 . Click on Genome Assembly and Annotation report : Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003): Then, click Send choose Complete Record , Destination File , Format GenBank (full) click Create File . Note the download location (e.g. Downloads folder). Open the GenBank file in JBrowse Overview: 6-frame annotation annotated genome features are highlighted black lines are stop codons DNA view: 6-frame translation DNA sequence in the middle amino acid translations above and below Text summary: text summary of features Navigation: Go to the overview pane click on one annotated feature (highlighted in blue) it will be summarized on the top line ( selected feature ) the corresponding sequence will be highlighted in the DNA view pane the corresponding feature will be higlighted in the text summary pane now double click on the same annotated feature all three panes will be centred for this feature to move left or right, use the horizontal scroll bars under each pane to zoom, use the vertical scroll bars on the right What next Assemble a bacterial genome using Spades.","title":"JBrowse"},{"location":"modules/jbrowse/#jbrowse","text":"","title":"JBrowse"},{"location":"modules/jbrowse/#background","text":"JBrowse is a genome browser available through the Galaxy interface or as a stand-alone tool. http://jbrowse.org/ http://genome.cshlp.org/content/19/9/1630.full Today we will use JBrowse within Galaxy. A variety of file types can be viewed using JBrowse, including GFF3, BED, FASTA, BAM, VCF. structure: - top: a reference bar showing chromosome position - feature tracks based on genome annotations: - particular annotations: e.g. tRNA, non coding RNA ? - all annotations in a row? other things in jbrowse: - highlight with the highlight button - drop down arrow next to ref seq - can just show some aas, one strand etc - lots of options with bam drop down menu navigation: - dragging - use navigation buttons (left, right, zoom) - type in coordinates or feature name makefile: - transform datatypes go to Graph/Display Data JBrowse choose the ref sequence? only allows the fasta file? will track options then appear? chose wildtype.fna but: python: can t open file jbrowse.py : [Errno 2] No such file or directory","title":"Background"},{"location":"modules/jbrowse/#learning-objectives","text":"At the end of this tutorial, you should be able to: download a bacterial genome sequence, and open the genome sequence in JBrowse and look at the sequence features.","title":"Learning objectives"},{"location":"modules/jbrowse/#download-a-bacterial-genome","text":"We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format. Go to http://www.ncbi.nlm.nih.gov Select the \u201cTaxonomy\u201d database from the list on the left hand side. Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search . Click on the species name: Click on the species name again (at the top of the list): Next to Genome , click on the far right number 1 . Click on Genome Assembly and Annotation report : Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003): Then, click Send choose Complete Record , Destination File , Format GenBank (full) click Create File . Note the download location (e.g. Downloads folder).","title":"Download a bacterial genome"},{"location":"modules/jbrowse/#open-the-genbank-file-in-jbrowse","text":"Overview: 6-frame annotation annotated genome features are highlighted black lines are stop codons DNA view: 6-frame translation DNA sequence in the middle amino acid translations above and below Text summary: text summary of features Navigation: Go to the overview pane click on one annotated feature (highlighted in blue) it will be summarized on the top line ( selected feature ) the corresponding sequence will be highlighted in the DNA view pane the corresponding feature will be higlighted in the text summary pane now double click on the same annotated feature all three panes will be centred for this feature to move left or right, use the horizontal scroll bars under each pane to zoom, use the vertical scroll bars on the right","title":"Open the GenBank file in JBrowse"},{"location":"modules/jbrowse/#what-next","text":"Assemble a bacterial genome using Spades.","title":"What next"},{"location":"modules/pacbio/","text":"Assembly with PacBio data and SMRT Portal This tutorial will show you how to assemble a bacterial genome de novo , using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process. Start Open your mGVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click Install . You should see SMRT Portal as one of the instance services on your GVL dashboard. Open up the SMRT portal web link (to the right) and register/log on. Input Locate your PacBio data. Load the PacBio data onto your GVL. In the SMRT Portal, go to Design Job , the top left tab. Go to Import and Manage . Click Import SMRT cells . Work out where you put the data on your GVL, and make sure the file path is showing. If not, click Add and enter the file path to the data. Click on the file path and then Scan to check for new data. Assembly Go back to the top left tab, Design Job . Go to Create New . An Analysis window should appear. Check the box next to De novo assembly , then Next . Under Job Name enter a name. Under Protocols choose RS_HGAP_Assembly.3 . There is an ellipsis underneath Protocols - click on the ellipsis. This brings up the settings. Click on Assembly . For Compute Minimum Seed Read Length : ensure box is ticked For Number of Seed Read Chunks : enter 12 Change the Genome Size to an approximately correct size for the species. For Target Coverage : enter 10 For Overlapper Error Rate : enter 0.04 Leave all other settings as they are. Click Apply Your protocol window should look like this: Click Ok . In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window. Click Save (bottom right hand side). Next to Save , click Start . The Monitor Jobs window should open. As each step proceeds, new items will appear under the Reports and Data tabs on the left. Output Click on the top right tab, View Data . Double click on the job name to open its reports. Click on different reports in the left hand panel. Look at Assembly: Polished Assembly . If there is only one contig, then this is the assembled genome. We will do further polishing in the next step. If there are two or more contigs, one could be a plasmid, or the sample may require different assembly parameters, or new sequencing. Polishing During polishing, raw reads are used to correct the assembly. From the previous step, Go to Data: Assembly: Polished Assembly: and download the FASTA file by clicking on it. Unzip the .gz file Go to Design Job, Import and Manage, (bottom right hand side button:) New, then select that FASTA assembly file to upload. creates a new reference. Design Job Create New choose reference-based Select protocol: RS_Resequencing.1 Leave all settings. Select SMRT cell (same cell as used in the first analysis) Select your reference from the drop down menu. Save. Start. When complete, see Reports. Variants: how many found? if less than 2, does not need any more polishing. If 2+ variants found, repeat the polishing step (including adding a new reference). Next Correct with Illumina reads Links to more information HGAP overview A full ist of reports and terminology is here","title":"Assembly with SMRT portal"},{"location":"modules/pacbio/#assembly-with-pacbio-data-and-smrt-portal","text":"This tutorial will show you how to assemble a bacterial genome de novo , using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.","title":"Assembly with PacBio data and SMRT Portal"},{"location":"modules/pacbio/#start","text":"Open your mGVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click Install . You should see SMRT Portal as one of the instance services on your GVL dashboard. Open up the SMRT portal web link (to the right) and register/log on.","title":"Start"},{"location":"modules/pacbio/#input","text":"Locate your PacBio data. Load the PacBio data onto your GVL. In the SMRT Portal, go to Design Job , the top left tab. Go to Import and Manage . Click Import SMRT cells . Work out where you put the data on your GVL, and make sure the file path is showing. If not, click Add and enter the file path to the data. Click on the file path and then Scan to check for new data.","title":"Input"},{"location":"modules/pacbio/#assembly","text":"Go back to the top left tab, Design Job . Go to Create New . An Analysis window should appear. Check the box next to De novo assembly , then Next . Under Job Name enter a name. Under Protocols choose RS_HGAP_Assembly.3 . There is an ellipsis underneath Protocols - click on the ellipsis. This brings up the settings. Click on Assembly . For Compute Minimum Seed Read Length : ensure box is ticked For Number of Seed Read Chunks : enter 12 Change the Genome Size to an approximately correct size for the species. For Target Coverage : enter 10 For Overlapper Error Rate : enter 0.04 Leave all other settings as they are. Click Apply Your protocol window should look like this: Click Ok . In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window. Click Save (bottom right hand side). Next to Save , click Start . The Monitor Jobs window should open. As each step proceeds, new items will appear under the Reports and Data tabs on the left.","title":"Assembly"},{"location":"modules/pacbio/#output","text":"Click on the top right tab, View Data . Double click on the job name to open its reports. Click on different reports in the left hand panel. Look at Assembly: Polished Assembly . If there is only one contig, then this is the assembled genome. We will do further polishing in the next step. If there are two or more contigs, one could be a plasmid, or the sample may require different assembly parameters, or new sequencing.","title":"Output"},{"location":"modules/pacbio/#polishing","text":"During polishing, raw reads are used to correct the assembly. From the previous step, Go to Data: Assembly: Polished Assembly: and download the FASTA file by clicking on it. Unzip the .gz file Go to Design Job, Import and Manage, (bottom right hand side button:) New, then select that FASTA assembly file to upload. creates a new reference. Design Job Create New choose reference-based Select protocol: RS_Resequencing.1 Leave all settings. Select SMRT cell (same cell as used in the first analysis) Select your reference from the drop down menu. Save. Start. When complete, see Reports. Variants: how many found? if less than 2, does not need any more polishing. If 2+ variants found, repeat the polishing step (including adding a new reference).","title":"Polishing"},{"location":"modules/pacbio/#next","text":"Correct with Illumina reads","title":"Next"},{"location":"modules/pacbio/#links-to-more-information","text":"HGAP overview A full ist of reports and terminology is here","title":"Links to more information"},{"location":"modules/prokka/","text":"Genome annotation using Prokka Background In this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous tutorial . Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d. Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using Prodigal ; second, the function of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found here . Learning objectives At the end of this tutorial you should be able to: load a genome assembly into Prokka annotate the assembly using Prokka examine the annotated genome using JBrowse Input data Prokka requires assembled contigs. If you are continuing on from the previous workshop ( Assembly with Spades ), this file will be in your current history: SPAdes_contigs.fasta . Alternatively, download the assembled contigs from the Training dataset page. Run Prokka In Galaxy, go to Tools NGS Analysis NGS: Annotation Prokka Set the following parameters (leave everything else unchanged): Contigs to annotate : SPAdes contigs (fasta) Locus tag prefix ( locustag) : P Force GenBank/ENA/DDJB compliance ( compliant) : No Sequencing Centre ID ( centre) : V Genus Name : Staphylococcus Species Name : aureus Use genus-specific BLAST database No Your tool interface should look like this: Click Execute Examine the output First, enable Scratchbook in Galaxy - this allows you to view several windows simultaneously. Click on the 3 3 squares icon on the menu bar: Once Prokka has finished, examine each of its output files. The GFF and GBK files contain all of the information about the features annotated (in different formats.) The .txt file contains a summary of the number of features annotated. The .faa file contains the protein sequences of the genes annotated. The .ffn file contains the nucleotide sequences of the genes annotated. View annotated features in JBrowse Now that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer. Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose Prokka on data XX:fna . This sequence will be the reference against which annotations are displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . Click Insert Track Group Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For GFF/GFF3/BED Track Data select Prokka on data XX:gff [Note: not wildtype.gff] Your tool interface should look like this: Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. Under Available Tracks on the left, tick the box for Prokka on data XX:gff . Select contig 6 in the drop down box. You can only see one contig displayed at a time. Use the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right). Zoomed out view: Zoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation. Zoomed in view: Click on a gene/feature annotation (the bars on the annotation track) to see more information. gene name product name you can download the FASTA sequence by clicking on the disk icon.","title":"Genome annotation"},{"location":"modules/prokka/#genome-annotation-using-prokka","text":"","title":"Genome annotation using Prokka"},{"location":"modules/prokka/#background","text":"In this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous tutorial . Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d. Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using Prodigal ; second, the function of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found here .","title":"Background"},{"location":"modules/prokka/#learning-objectives","text":"At the end of this tutorial you should be able to: load a genome assembly into Prokka annotate the assembly using Prokka examine the annotated genome using JBrowse","title":"Learning objectives"},{"location":"modules/prokka/#input-data","text":"Prokka requires assembled contigs. If you are continuing on from the previous workshop ( Assembly with Spades ), this file will be in your current history: SPAdes_contigs.fasta . Alternatively, download the assembled contigs from the Training dataset page.","title":"Input data"},{"location":"modules/prokka/#run-prokka","text":"In Galaxy, go to Tools NGS Analysis NGS: Annotation Prokka Set the following parameters (leave everything else unchanged): Contigs to annotate : SPAdes contigs (fasta) Locus tag prefix ( locustag) : P Force GenBank/ENA/DDJB compliance ( compliant) : No Sequencing Centre ID ( centre) : V Genus Name : Staphylococcus Species Name : aureus Use genus-specific BLAST database No Your tool interface should look like this: Click Execute","title":"Run Prokka"},{"location":"modules/prokka/#examine-the-output","text":"First, enable Scratchbook in Galaxy - this allows you to view several windows simultaneously. Click on the 3 3 squares icon on the menu bar: Once Prokka has finished, examine each of its output files. The GFF and GBK files contain all of the information about the features annotated (in different formats.) The .txt file contains a summary of the number of features annotated. The .faa file contains the protein sequences of the genes annotated. The .ffn file contains the nucleotide sequences of the genes annotated.","title":"Examine the output"},{"location":"modules/prokka/#view-annotated-features-in-jbrowse","text":"Now that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer. Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose Prokka on data XX:fna . This sequence will be the reference against which annotations are displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . Click Insert Track Group Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For GFF/GFF3/BED Track Data select Prokka on data XX:gff [Note: not wildtype.gff] Your tool interface should look like this: Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. Under Available Tracks on the left, tick the box for Prokka on data XX:gff . Select contig 6 in the drop down box. You can only see one contig displayed at a time. Use the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right). Zoomed out view: Zoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation. Zoomed in view: Click on a gene/feature annotation (the bars on the annotation track) to see more information. gene name product name you can download the FASTA sequence by clicking on the disk icon.","title":"View annotated features in JBrowse"},{"location":"modules/snippy/","text":"Variant calling with Snippy Background Variant calling is the process of identifying differences between two genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling . Learning Objectives Find variants between a reference genome and a set of reads Visualise the SNP in context of the reads aligned to the genome Determine the effect of those variants on genomic features Understand if the SNP is potentially affecting the phenotype Prepare reference For variant calling, we need a reference genome that is of the same strain as the input sequence reads. For this tutorial, our reference is the wildtype.gbk file and our reads are mutant_R1.fastq and mutant_R2.fastq . If these files are not presently in your Galaxy history, import them from the Training dataset page. Call variants with Snippy Go to Tools NGS Analysis NGS: Variant Analysis snippy For Reference type select Genbank . Then for Reference Genbank choose the wildtype.gbk file. For Single or Paired-end reads choose Paired . Then choose the first set of reads, mutant_R1.fastq and second set of reads, mutant_R2.fastq . For Cleanup the non-snp output files select No . Your tool interface should look like this: Click Execute . Examine Snippy output First, enable Scratchbook in Galaxy - this allows you to view several windows simultaneously. Click on the squares: From Snippy, there are 10 output files in various formats. Go to the file called snippy on data XX, data XX and data XX table and click on the eye icon. We can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion. Look at the third variant called. This is a T A mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation? View Snippy output in JBrowse Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose wildtype.fna . This sequence will be the reference against which annotations are displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . We will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff) Track 1 - sequence reads Click Insert Track Group For Track Cateogry name it sequence reads Click Insert Annotation Track For Track Type choose BAM Pileups For BAM Track Data select the snippy bam file For Autogenerate SNP Track select Yes Track 2 - variants Click Insert Track Group again For Track Category name it variants Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For SNP Track Data select the snippy snps gff file Track 3 - annotated reference Click Insert Track Group again For Track Category name it annotated reference Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For SNP Track Data select wildtype.gff Under JBrowse Styling Options JBrowse style. description type in product,note,description Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. On the left, tick boxes display the tracks Use the minus button to zoom out to see: sequence reads and their coverage (the grey graph) Use the plus button to zoom in to see: probable real variants (a whole column of snps) probable errors (single one here and there) In the coordinates box, type in 47299 and then Go to see the position of the SNP discussed above. the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations. the mutation of T A turns this triplet into TGA, a stop codon.","title":"Variant finding"},{"location":"modules/snippy/#variant-calling-with-snippy","text":"","title":"Variant calling with Snippy"},{"location":"modules/snippy/#background","text":"Variant calling is the process of identifying differences between two genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling .","title":"Background"},{"location":"modules/snippy/#learning-objectives","text":"Find variants between a reference genome and a set of reads Visualise the SNP in context of the reads aligned to the genome Determine the effect of those variants on genomic features Understand if the SNP is potentially affecting the phenotype","title":"Learning Objectives"},{"location":"modules/snippy/#prepare-reference","text":"For variant calling, we need a reference genome that is of the same strain as the input sequence reads. For this tutorial, our reference is the wildtype.gbk file and our reads are mutant_R1.fastq and mutant_R2.fastq . If these files are not presently in your Galaxy history, import them from the Training dataset page.","title":"Prepare reference"},{"location":"modules/snippy/#call-variants-with-snippy","text":"Go to Tools NGS Analysis NGS: Variant Analysis snippy For Reference type select Genbank . Then for Reference Genbank choose the wildtype.gbk file. For Single or Paired-end reads choose Paired . Then choose the first set of reads, mutant_R1.fastq and second set of reads, mutant_R2.fastq . For Cleanup the non-snp output files select No . Your tool interface should look like this: Click Execute .","title":"Call variants with Snippy"},{"location":"modules/snippy/#examine-snippy-output","text":"First, enable Scratchbook in Galaxy - this allows you to view several windows simultaneously. Click on the squares: From Snippy, there are 10 output files in various formats. Go to the file called snippy on data XX, data XX and data XX table and click on the eye icon. We can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion. Look at the third variant called. This is a T A mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation?","title":"Examine Snippy output"},{"location":"modules/snippy/#view-snippy-output-in-jbrowse","text":"Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose wildtype.fna . This sequence will be the reference against which annotations are displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . We will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff) Track 1 - sequence reads Click Insert Track Group For Track Cateogry name it sequence reads Click Insert Annotation Track For Track Type choose BAM Pileups For BAM Track Data select the snippy bam file For Autogenerate SNP Track select Yes Track 2 - variants Click Insert Track Group again For Track Category name it variants Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For SNP Track Data select the snippy snps gff file Track 3 - annotated reference Click Insert Track Group again For Track Category name it annotated reference Click Insert Annotation Track For Track Type choose GFF/GFF3/BED/GBK Features For SNP Track Data select wildtype.gff Under JBrowse Styling Options JBrowse style. description type in product,note,description Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. On the left, tick boxes display the tracks Use the minus button to zoom out to see: sequence reads and their coverage (the grey graph) Use the plus button to zoom in to see: probable real variants (a whole column of snps) probable errors (single one here and there) In the coordinates box, type in 47299 and then Go to see the position of the SNP discussed above. the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations. the mutation of T A turns this triplet into TGA, a stop codon.","title":"View Snippy output in JBrowse"},{"location":"modules/spades/","text":"Assembly using Spades Background Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link . In this activity, we will perform a de novo assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence. Learning objectives At the end of this tutorial you should be able to: assemble the reads using Spades, and examine the output assembly. Import and view data If you don t already have the files in your current galaxy history, see here for information on how to get them. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq . (We don t need the reference genome sequences for this tutorial). The reads are paired-end. Each read is 150 bases long. The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!). Click on the View Data button (the ) next to one of the FASTQ sequence files. Assemble reads with Spades We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.) Go to Tools NGS Analysis NGS: Assembly spades Set the following parameters (leave other settings as they are): Run only Assembly : Yes [the Yes button should be darker grey] Kmers to use separated by commas: 33,55,91 [note: no spaces] Coverage cutoff: auto Files Forward reads: mutant_R1.fastq Files Reverse reads: mutant_R2.fastq Your tool interface should look like this: Click Execute Examine the output Galaxy is now running Spades on the reads for you. When it is finished, you will have five new files in your history. two FASTA files of the resulting contigs and scaffolds two files for statistics about these the Spades logfile Click on the View Data button on each of the files. Note that the short reads have been assembled into much longer contigs. (However, in this case, the contigs have not been assembled into larger scaffolds.) The stats files will give you the length of each of the contigs.","title":"Genome assembly with Spades"},{"location":"modules/spades/#assembly-using-spades","text":"","title":"Assembly using Spades"},{"location":"modules/spades/#background","text":"Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link . In this activity, we will perform a de novo assembly of a short read set using the Spades assembler. The output from Spades that we are interested in is a multiFASTA file that contains the draft genome sequence.","title":"Background"},{"location":"modules/spades/#learning-objectives","text":"At the end of this tutorial you should be able to: assemble the reads using Spades, and examine the output assembly.","title":"Learning objectives"},{"location":"modules/spades/#import-and-view-data","text":"If you don t already have the files in your current galaxy history, see here for information on how to get them. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq . (We don t need the reference genome sequences for this tutorial). The reads are paired-end. Each read is 150 bases long. The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!). Click on the View Data button (the ) next to one of the FASTQ sequence files.","title":"Import and view data"},{"location":"modules/spades/#assemble-reads-with-spades","text":"We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.) Go to Tools NGS Analysis NGS: Assembly spades Set the following parameters (leave other settings as they are): Run only Assembly : Yes [the Yes button should be darker grey] Kmers to use separated by commas: 33,55,91 [note: no spaces] Coverage cutoff: auto Files Forward reads: mutant_R1.fastq Files Reverse reads: mutant_R2.fastq Your tool interface should look like this: Click Execute","title":"Assemble reads with Spades"},{"location":"modules/spades/#examine-the-output","text":"Galaxy is now running Spades on the reads for you. When it is finished, you will have five new files in your history. two FASTA files of the resulting contigs and scaffolds two files for statistics about these the Spades logfile Click on the View Data button on each of the files. Note that the short reads have been assembled into much longer contigs. (However, in this case, the contigs have not been assembled into larger scaffolds.) The stats files will give you the length of each of the contigs.","title":"Examine the output"},{"location":"modules/trimmomatic/","text":"Trimming reads Introduction After checking your input sequence reads for quality (e.g. using FastQC) it might be necessary to trim the reads. Here we will use the Trimmomatic tool. For more inforamtion, see the Trimmomatic webpage and the manual. Learning Objectives At the end of this tutorial you should be able to: input sequence reads to Trimmomatic trim using appropriate parameters, and examine the output trimmed reads. Start open your Galaxy instance find your quality-checked Illumina sequence reads e.g. mutant_R1.fastq and mutant_R2.fastq We want to trim the parts of the reads that are of low quality based on the FastQC results, we might want to trim the reads like this: trim Illumina adapters leading and trailing bases - trim if quality is below 15 sliding window - trim once average quality is below 20 Trimmomatic functions Adapter trimming This function trims adapters, barcodes and other contaminants from the reads. You need to supply a FASTA file of possible adapter sequences, barcodes etc to trim. See Trimmomatic website for detailed instructions. The default quality settings are sensible. This should always be the first trimming step if it is used. Sliding window trimming This function uses a sliding window to measure average quality and trims accordingly. The default quality parameters are sensible for this step. Trailing bases quality trimming This function trims bases from the end of a read if they drop below a quality threshold. e.g. If base 69 of 75 drops below the threshold, the read is cut to 68 bases. Use FastQC report to decide whether this step is warranted and what quality value to use. A quality threshold value of 10-15 is a good starting point. Leading bases quality trimming This function works in a similar fashion to trailing bases trimming except it performs it at the start of the reads. Use FastQC report to determine if this step is warranted. If the quality of bases is poor at the beginning of reads it might be necessary. Minimum read length Once all trimming steps are complete, this function makes sure that the reads are still longer than this value. If not, the read is removed from the file and its pair is put into the orphan file. The most appropriate value for this parameter will depend on the FastQC report, specifically the length of the high quality section of the Per Base Sequence Quality graph. Each read library should be trimmed separately with parameters dependent on their own FastQC reports. Run Trimmomatic Go to Tools NGS Analysis NGS: QC and manipulation Trimmomatic . Input FASTQ file (R1/first of pair) : mutant_R1.fastq Input FASTQ file (R2/second of pair) : mutant_R2.fastq Perform initial ILLUMINACLIP step : Yes ! Adapter sequences to use : FIXME How accurate the match between the two adapter ligated reads must be for PE palindrome read alignment : 40 How accurate the match between any adapter etc. sequence must be against a read : 15 leave the first Trimmomatic Operation as is click on + Insert Trimmomatic Operation Select Trimmomatic operation to perform : Cut bases off the start of a read, if below a threshold quality (LEADING) Minimum quality required to keep a base : 15 click on + Insert Trimmomatic Operation Select Trimmomatic operation to perform : Cut bases off the end of a read, if below a threshold quality (TRAILING) Minimum quality required to keep a base : 15 click Execute Examine output Trimmomatic should produce 2 pairs files (1 left and 1 right hand end) and 1 or 2 single \u201corphaned reads\u201d files. The output files are the ones you should use for assembly. There are four output files, still in FASTQ format: R1 reads that have a pair in the R2 file R2 reads that have a pair in the R1 file R1 reads with no pair (R2 match was low quality: deleted) R2 reads with no pair (R1 match was low quality: deleted) Examine each file with the eye icon. Look for: Number of reads orphaned by the trimming / cleanup process. Number of pairs lost totally. What next? Next: use the output FASTQ files for Assembly, e.g. with Spades","title":"Trimming reads"},{"location":"modules/trimmomatic/#trimming-reads","text":"","title":"Trimming reads"},{"location":"modules/trimmomatic/#introduction","text":"After checking your input sequence reads for quality (e.g. using FastQC) it might be necessary to trim the reads. Here we will use the Trimmomatic tool. For more inforamtion, see the Trimmomatic webpage and the manual.","title":"Introduction"},{"location":"modules/trimmomatic/#learning-objectives","text":"At the end of this tutorial you should be able to: input sequence reads to Trimmomatic trim using appropriate parameters, and examine the output trimmed reads.","title":"Learning Objectives"},{"location":"modules/trimmomatic/#start","text":"open your Galaxy instance find your quality-checked Illumina sequence reads e.g. mutant_R1.fastq and mutant_R2.fastq We want to trim the parts of the reads that are of low quality based on the FastQC results, we might want to trim the reads like this: trim Illumina adapters leading and trailing bases - trim if quality is below 15 sliding window - trim once average quality is below 20","title":"Start"},{"location":"modules/trimmomatic/#trimmomatic-functions","text":"Adapter trimming This function trims adapters, barcodes and other contaminants from the reads. You need to supply a FASTA file of possible adapter sequences, barcodes etc to trim. See Trimmomatic website for detailed instructions. The default quality settings are sensible. This should always be the first trimming step if it is used. Sliding window trimming This function uses a sliding window to measure average quality and trims accordingly. The default quality parameters are sensible for this step. Trailing bases quality trimming This function trims bases from the end of a read if they drop below a quality threshold. e.g. If base 69 of 75 drops below the threshold, the read is cut to 68 bases. Use FastQC report to decide whether this step is warranted and what quality value to use. A quality threshold value of 10-15 is a good starting point. Leading bases quality trimming This function works in a similar fashion to trailing bases trimming except it performs it at the start of the reads. Use FastQC report to determine if this step is warranted. If the quality of bases is poor at the beginning of reads it might be necessary. Minimum read length Once all trimming steps are complete, this function makes sure that the reads are still longer than this value. If not, the read is removed from the file and its pair is put into the orphan file. The most appropriate value for this parameter will depend on the FastQC report, specifically the length of the high quality section of the Per Base Sequence Quality graph. Each read library should be trimmed separately with parameters dependent on their own FastQC reports.","title":"Trimmomatic functions"},{"location":"modules/trimmomatic/#run-trimmomatic","text":"Go to Tools NGS Analysis NGS: QC and manipulation Trimmomatic . Input FASTQ file (R1/first of pair) : mutant_R1.fastq Input FASTQ file (R2/second of pair) : mutant_R2.fastq Perform initial ILLUMINACLIP step : Yes ! Adapter sequences to use : FIXME How accurate the match between the two adapter ligated reads must be for PE palindrome read alignment : 40 How accurate the match between any adapter etc. sequence must be against a read : 15 leave the first Trimmomatic Operation as is click on + Insert Trimmomatic Operation Select Trimmomatic operation to perform : Cut bases off the start of a read, if below a threshold quality (LEADING) Minimum quality required to keep a base : 15 click on + Insert Trimmomatic Operation Select Trimmomatic operation to perform : Cut bases off the end of a read, if below a threshold quality (TRAILING) Minimum quality required to keep a base : 15 click Execute","title":"Run Trimmomatic"},{"location":"modules/trimmomatic/#examine-output","text":"Trimmomatic should produce 2 pairs files (1 left and 1 right hand end) and 1 or 2 single \u201corphaned reads\u201d files. The output files are the ones you should use for assembly. There are four output files, still in FASTQ format: R1 reads that have a pair in the R2 file R2 reads that have a pair in the R1 file R1 reads with no pair (R2 match was low quality: deleted) R2 reads with no pair (R1 match was low quality: deleted) Examine each file with the eye icon. Look for: Number of reads orphaned by the trimming / cleanup process. Number of pairs lost totally.","title":"Examine output"},{"location":"modules/trimmomatic/#what-next","text":"Next: use the output FASTQ files for Assembly, e.g. with Spades","title":"What next?"},{"location":"modules/variants/","text":"Basic Variant Finding Background Variant calling is the process of identifying differences between two genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling . Learning Objectives How to map sequence reads versus a reference Visualise the resultant BAM file of alignments Search the BAM file for variants using a SNP caller Filter the SNPS Prepare reference For variant calling, we need a reference genome that is of the same strain as the input sequence reads. For this tutorial, our reference is the wildtype.fna file and our reads are mutant_R1.fastq and mutant_R2.fastq . If these files are not presently in your Galaxy history, import them from the Training dataset page. Section 1 - Read Mapping Map reads with BWA mem Go to Tools NGS Analysis NGS: Mapping Map with BWA mem For Will you select a reference genome from your history or use a built-in index? select Use a genome from history . Then for Reference Sequence choose the wildtype.fna file. For Single or Paired-end reads choose Paired . Then choose the first set of reads, mutant_R1.fastq and second set of reads, mutant_R2.fastq . Leave everything else as default. Click Execute . Convert the BAM File to a SAM file. Now we want to look at the results. BWA mem will produce a BAM file. This is a compressed non-human readable format. So to see what it looks like, we need to convert the BAM file to a SAM file. Go to Tools NGS: Sam tools BAM-to-SAM Select the BAM file we just produced above and click Execute Now look at the contents of the resultant SAM file. View BAM file in JBrowse Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose wildtype.fna . This sequence will be the reference against which BAM file is displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . We will now set up a new track We will choose to display the sequence reads (the .bam file) Track 1 - sequence reads Click Insert Track Group For Track Cateogry name it sequence reads Click Insert Annotation Track For Track Type choose BAM Pileups For BAM Track Data select the bam file For Autogenerate SNP Track select Yes Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. On the left, tick the boxes to display the tracks Use the minus button to zoom out to see: sequence reads and their coverage (the grey graph) Use the plus button to zoom in to see: probable real variants (a whole column of snps) probable errors (single one here and there) In the coordinates box, type in 47299 and then Go to see the position of the SNP discussed above. the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations. the mutation of T A turns this triplet into TGA, a stop codon. End of part 1 of this exercise! More Slides! Section 2 - Variant calling Call variants in our BAM file with FreeBayes Go to Tools rarr NGS: Variant Analysis rarr FreeBayes For Load reference genome from select History For BAM file select our BAM file. x: Map with BWA-MEM on data xx, data xx, and data xx (mapped reads in BAM format) For Use the following dataset as the reference sequence select x: Wildtype.fna Leave everything else as default Click Execute FreeBayes will now search through each position of our BAM file and look for statistically valid variants. It uses Bayesian inference to do this. See here for details if you re interested. (Warning! It s complex probability theory ) Once it s complete you ll see a new file in your history called x: FreeBayes on data x and data x (variants) This is a VCF file that we discussed in the slides. Click on the eye icon to view the file. You ll notice that there is a lot of header information followed by some found variants. Can you find the one we looked at earlier in our visualisation?","title":"Basic Variant finding"},{"location":"modules/variants/#basic-variant-finding","text":"","title":"Basic Variant Finding"},{"location":"modules/variants/#background","text":"Variant calling is the process of identifying differences between two genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling .","title":"Background"},{"location":"modules/variants/#learning-objectives","text":"How to map sequence reads versus a reference Visualise the resultant BAM file of alignments Search the BAM file for variants using a SNP caller Filter the SNPS","title":"Learning Objectives"},{"location":"modules/variants/#prepare-reference","text":"For variant calling, we need a reference genome that is of the same strain as the input sequence reads. For this tutorial, our reference is the wildtype.fna file and our reads are mutant_R1.fastq and mutant_R2.fastq . If these files are not presently in your Galaxy history, import them from the Training dataset page.","title":"Prepare reference"},{"location":"modules/variants/#section-1-read-mapping","text":"","title":"Section 1 - Read Mapping"},{"location":"modules/variants/#map-reads-with-bwa-mem","text":"Go to Tools NGS Analysis NGS: Mapping Map with BWA mem For Will you select a reference genome from your history or use a built-in index? select Use a genome from history . Then for Reference Sequence choose the wildtype.fna file. For Single or Paired-end reads choose Paired . Then choose the first set of reads, mutant_R1.fastq and second set of reads, mutant_R2.fastq . Leave everything else as default. Click Execute .","title":"Map reads with BWA mem"},{"location":"modules/variants/#convert-the-bam-file-to-a-sam-file","text":"Now we want to look at the results. BWA mem will produce a BAM file. This is a compressed non-human readable format. So to see what it looks like, we need to convert the BAM file to a SAM file. Go to Tools NGS: Sam tools BAM-to-SAM Select the BAM file we just produced above and click Execute Now look at the contents of the resultant SAM file.","title":"Convert the BAM File to a SAM file."},{"location":"modules/variants/#view-bam-file-in-jbrowse","text":"Go to Statistics and Visualisation Graph/Display Data JBrowse Under Fasta Sequence(s) choose wildtype.fna . This sequence will be the reference against which BAM file is displayed. For Produce a Standalone Instance select Yes . For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code . We will now set up a new track We will choose to display the sequence reads (the .bam file) Track 1 - sequence reads Click Insert Track Group For Track Cateogry name it sequence reads Click Insert Annotation Track For Track Type choose BAM Pileups For BAM Track Data select the bam file For Autogenerate SNP Track select Yes Click Execute A new file will be created, called JBrowse on data XX and data XX - Complete . Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel. On the left, tick the boxes to display the tracks Use the minus button to zoom out to see: sequence reads and their coverage (the grey graph) Use the plus button to zoom in to see: probable real variants (a whole column of snps) probable errors (single one here and there) In the coordinates box, type in 47299 and then Go to see the position of the SNP discussed above. the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations. the mutation of T A turns this triplet into TGA, a stop codon.","title":"View BAM file in JBrowse"},{"location":"modules/variants/#end-of-part-1-of-this-exercise-more-slides","text":"","title":"End of part 1 of this exercise! More Slides!"},{"location":"modules/variants/#section-2-variant-calling","text":"","title":"Section 2 - Variant calling"},{"location":"modules/variants/#call-variants-in-our-bam-file-with-freebayes","text":"Go to Tools rarr NGS: Variant Analysis rarr FreeBayes For Load reference genome from select History For BAM file select our BAM file. x: Map with BWA-MEM on data xx, data xx, and data xx (mapped reads in BAM format) For Use the following dataset as the reference sequence select x: Wildtype.fna Leave everything else as default Click Execute FreeBayes will now search through each position of our BAM file and look for statistically valid variants. It uses Bayesian inference to do this. See here for details if you re interested. (Warning! It s complex probability theory ) Once it s complete you ll see a new file in your history called x: FreeBayes on data x and data x (variants) This is a VCF file that we discussed in the slides. Click on the eye icon to view the file. You ll notice that there is a lot of header information followed by some found variants. Can you find the one we looked at earlier in our visualisation?","title":"Call variants in our BAM file with FreeBayes"},{"location":"modules/velvet/","text":"Assembly using Velvet Background Velvet is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this link . In this activity, we will perform a de novo assembly of a short read set using the Velvet assembler. Learning objectives At the end of this tutorial you should be able to: assemble the reads using VelvetOptimiser, and examine the output assembly. Galaxy Background Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right. Register in Galaxy Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server, e.g. Galaxy Australia . Click on User button on the right. If you have never registered on this Galaxy server before: Select: User Register Enter your email, choose a password, and choose a user name. Click Submit If you have, just login: Select: User Login Enter your email and password. Click Submit Return to the home screen. Import a history In the menu options across the top, go to Shared Data . Click on Histories . A list of published histories should appear. Click on the history called Microbial Genomics Workshop - BINF90002 Click on Import history . An option will appear to re-name the history. We don t need to rename it, so click Import . The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq . The reads are paired-end. Each read is 150 bases long. The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!). Click on the View Data button (the ) next to one of the FASTQ sequence files. Assemble reads with Velvet Everyone will be assigned a value of k (k-mer length) to use in their assembly with Velvet. We will then populate a spreadsheet with result metrics from all of the different assemblies. The spreadsheet can be found here . Please put your name in a blank space in the Name column of the spreadsheet and note the value for k next to it. We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.) Velvet requires the user to input a value of k for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity. Go to Tools NGS Analysis NGS: Assembly velvet Set the following parameters (leave other settings as they are): K-mer : Enter the value for k that you have been assigned in the spreadsheet. Input file type : Fastq Single or paired end reads : Paired Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Your tool interface should look something like this (you will most likely have a different value for k): Click Execute Examine the output Galaxy is now running velvet on the reads for you. Press the refresh button in the history pane to see if it has finished. When it is finished, you will have four new files in your history. a Contigs file a Contigs stats file a LastGraph file the velvet log file Click on the View Data button on each of the files. The Contigs file will show each contig with the k-mer length and k-mer coverage listed as part of the header (however, these are just called length and coverage ). K-mer length : For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length. K-mer coverage : For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly). The Contigs stats file will show a list of these k-mer lengths and k-mer coverages. We will summarise the information in the log file. Collect some statistics on the contigs. Go to NGS Common Toolsets FASTA manipulation Fasta statistics For the required input file, choose the velvet Contigs file. Click Execute . A new file will appear called Fasta summary stats Click the eye icon to look at this file. (It will look something like - but not exactly like - this.) Look at: num_seq : the number of contigs in the FASTA file. num_bp : the number of assembled bases. Roughly proportional to genome size. len_max : the biggest contig. len_N50 : N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger. Now copy the relevant data back into the k-mer spreadsheet on your line. Along with the demonstrator, have a look at the effect of the k-mer size on the output metrics of the assembly. Note that there are local maxima and minima in the charts. What do you think is happening here? Why is the value of k (the k-mer size) having an effect? Assembly with Velvet Optimiser Now that we have seen the effect of k-mer size on the assembly, we will run the Velvet Optimiser to automatically choose the best k-mer size for us. It will use the n50 to determine the best k-mer value to use. It then performs the further graph cleaning steps and automatically chooses a bunch of other parameters for velvet. We should get a much better assembly result than we did with our attempts with Velvet alone.. Go to Tools NGS Analysis NGS: Assembly Velvet Optimiser Set the following parameters (leave other settings as they are): Start k-mer size : 45 End k-mer size : 73 Input file type : Fastq Single or paired end reads : Paired Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Click Execute Look at the fasta statistics for the Velvet Optimiser contigs Use the Fasta Statistics tool you used earlier to summarise the Velvet Optimiser output. Examine the resulting table. What are the main differences? Have a look at the Velvet Optimiser log file, it s hidden. Click on the hidden link at the top of the History pane. You ll then need to examine its STDERR output by clicking on the name of the file , then the i icon, then stderr . Can you find which k value VelvetOptimiser used for its final assembly? You should also notice that it set another couple of parameters, the expected coverage and the coverage cutoff. Any ideas what these are? See the Velvet paper or the Velvet manual for details on these parameters.","title":"Genome assembly with Velvet"},{"location":"modules/velvet/#assembly-using-velvet","text":"","title":"Assembly using Velvet"},{"location":"modules/velvet/#background","text":"Velvet is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this link . In this activity, we will perform a de novo assembly of a short read set using the Velvet assembler.","title":"Background"},{"location":"modules/velvet/#learning-objectives","text":"At the end of this tutorial you should be able to: assemble the reads using VelvetOptimiser, and examine the output assembly.","title":"Learning objectives"},{"location":"modules/velvet/#galaxy-background","text":"Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets. Galaxy is an open, web-based platform. Details about the project can be found here . The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right.","title":"Galaxy Background"},{"location":"modules/velvet/#register-in-galaxy","text":"Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari. In the address bar, type in the address of your galaxy server, e.g. Galaxy Australia . Click on User button on the right. If you have never registered on this Galaxy server before: Select: User Register Enter your email, choose a password, and choose a user name. Click Submit If you have, just login: Select: User Login Enter your email and password. Click Submit Return to the home screen.","title":"Register in Galaxy"},{"location":"modules/velvet/#import-a-history","text":"In the menu options across the top, go to Shared Data . Click on Histories . A list of published histories should appear. Click on the history called Microbial Genomics Workshop - BINF90002 Click on Import history . An option will appear to re-name the history. We don t need to rename it, so click Import . The history will now appear in your Current History pane, and the files are ready to use in Galaxy analyses. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq . The reads are paired-end. Each read is 150 bases long. The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!). Click on the View Data button (the ) next to one of the FASTQ sequence files.","title":"Import a history"},{"location":"modules/velvet/#assemble-reads-with-velvet","text":"Everyone will be assigned a value of k (k-mer length) to use in their assembly with Velvet. We will then populate a spreadsheet with result metrics from all of the different assemblies. The spreadsheet can be found here . Please put your name in a blank space in the Name column of the spreadsheet and note the value for k next to it. We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.) Velvet requires the user to input a value of k for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity. Go to Tools NGS Analysis NGS: Assembly velvet Set the following parameters (leave other settings as they are): K-mer : Enter the value for k that you have been assigned in the spreadsheet. Input file type : Fastq Single or paired end reads : Paired Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Your tool interface should look something like this (you will most likely have a different value for k): Click Execute","title":"Assemble reads with Velvet"},{"location":"modules/velvet/#examine-the-output","text":"Galaxy is now running velvet on the reads for you. Press the refresh button in the history pane to see if it has finished. When it is finished, you will have four new files in your history. a Contigs file a Contigs stats file a LastGraph file the velvet log file Click on the View Data button on each of the files. The Contigs file will show each contig with the k-mer length and k-mer coverage listed as part of the header (however, these are just called length and coverage ). K-mer length : For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length. K-mer coverage : For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly). The Contigs stats file will show a list of these k-mer lengths and k-mer coverages. We will summarise the information in the log file.","title":"Examine the output"},{"location":"modules/velvet/#collect-some-statistics-on-the-contigs","text":"Go to NGS Common Toolsets FASTA manipulation Fasta statistics For the required input file, choose the velvet Contigs file. Click Execute . A new file will appear called Fasta summary stats Click the eye icon to look at this file. (It will look something like - but not exactly like - this.) Look at: num_seq : the number of contigs in the FASTA file. num_bp : the number of assembled bases. Roughly proportional to genome size. len_max : the biggest contig. len_N50 : N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger. Now copy the relevant data back into the k-mer spreadsheet on your line. Along with the demonstrator, have a look at the effect of the k-mer size on the output metrics of the assembly. Note that there are local maxima and minima in the charts. What do you think is happening here? Why is the value of k (the k-mer size) having an effect?","title":"Collect some statistics on the contigs."},{"location":"modules/velvet/#assembly-with-velvet-optimiser","text":"Now that we have seen the effect of k-mer size on the assembly, we will run the Velvet Optimiser to automatically choose the best k-mer size for us. It will use the n50 to determine the best k-mer value to use. It then performs the further graph cleaning steps and automatically chooses a bunch of other parameters for velvet. We should get a much better assembly result than we did with our attempts with Velvet alone.. Go to Tools NGS Analysis NGS: Assembly Velvet Optimiser Set the following parameters (leave other settings as they are): Start k-mer size : 45 End k-mer size : 73 Input file type : Fastq Single or paired end reads : Paired Select first set of reads : mutant_R1.fastq Select second set of reads : mutant_R2.fastq Click Execute","title":"Assembly with Velvet Optimiser"},{"location":"modules/velvet/#look-at-the-fasta-statistics-for-the-velvet-optimiser-contigs","text":"Use the Fasta Statistics tool you used earlier to summarise the Velvet Optimiser output. Examine the resulting table. What are the main differences? Have a look at the Velvet Optimiser log file, it s hidden. Click on the hidden link at the top of the History pane. You ll then need to examine its STDERR output by clicking on the name of the file , then the i icon, then stderr . Can you find which k value VelvetOptimiser used for its final assembly? You should also notice that it set another couple of parameters, the expected coverage and the coverage cutoff. Any ideas what these are? See the Velvet paper or the Velvet manual for details on these parameters.","title":"Look at the fasta statistics for the Velvet Optimiser contigs"},{"location":"scrapbook/data/data_access/","text":"Data: access, using, moving how to get data from x to y Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Data: access, using, moving"},{"location":"scrapbook/data/data_access/#data-access-using-moving","text":"how to get data from x to y","title":"Data: access, using, moving"},{"location":"scrapbook/data/data_access/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/data/data_access/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/data/data_access/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/data/data_access/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/data/formats/bam/","text":"BAM File [from LSCC docs] SAM is a text format which is not space efficient. Binary Sequence Alignment is a compressed version of SAM. Data in a BAM file is binary and therefore can t be visualised as text. If you try and visualise in Galaxy, it will default to downloading the file. FIXME link","title":"BAM File"},{"location":"scrapbook/data/formats/bam/#bam-file","text":"[from LSCC docs] SAM is a text format which is not space efficient. Binary Sequence Alignment is a compressed version of SAM. Data in a BAM file is binary and therefore can t be visualised as text. If you try and visualise in Galaxy, it will default to downloading the file. FIXME link","title":"BAM File"},{"location":"scrapbook/data/formats/file_formats/","text":"File formats FIXME: link to images? File format File extensions Description FASTA SequenceID sequence More information. .fasta .fas .fa generic FASTA file .fna nucleotides .ffn nucleotides for coding regions only? .faa amino acids .frn nucleotides? for non-coding RNA regions FASTQ .fastq @SequenceID sequence + nucleotide quality scores SAM .sam tab-delimited text file of reads aligned to a reference. e.g. mapped position, sequence, quality scores. More [FIXME: can t link] BAM .bam Compressed version of SAM file. More [FIXME: can t link] GBK .gbk Genbank format. Sequence information, features, protein translations, DNA sequence. GFF .gff General Feature Format. Tab-delimited. Each line is a feature. also known as GTF? mention gff3? e.g. it needs to be version 3? More information. VCF .vcf Variant Call Format. Tab-delimited. Header, then one line per identified variant. pileup Each line is a nucleotide in the sequence, with information on how all the reads are mapped to that position. More [FIXME: can t link] there are some nice images etc in here https://docs.google.com/document/pub?id=1fouC29Lq0CXxQQCpuojrR5RXbdzMdxRf8ZID01XYNqI#h.18e90b8fc68f","title":"File formats"},{"location":"scrapbook/data/formats/file_formats/#file-formats","text":"FIXME: link to images? File format File extensions Description FASTA SequenceID sequence More information. .fasta .fas .fa generic FASTA file .fna nucleotides .ffn nucleotides for coding regions only? .faa amino acids .frn nucleotides? for non-coding RNA regions FASTQ .fastq @SequenceID sequence + nucleotide quality scores SAM .sam tab-delimited text file of reads aligned to a reference. e.g. mapped position, sequence, quality scores. More [FIXME: can t link] BAM .bam Compressed version of SAM file. More [FIXME: can t link] GBK .gbk Genbank format. Sequence information, features, protein translations, DNA sequence. GFF .gff General Feature Format. Tab-delimited. Each line is a feature. also known as GTF? mention gff3? e.g. it needs to be version 3? More information. VCF .vcf Variant Call Format. Tab-delimited. Header, then one line per identified variant. pileup Each line is a nucleotide in the sequence, with information on how all the reads are mapped to that position. More [FIXME: can t link] there are some nice images etc in here https://docs.google.com/document/pub?id=1fouC29Lq0CXxQQCpuojrR5RXbdzMdxRf8ZID01XYNqI#h.18e90b8fc68f","title":"File formats"},{"location":"scrapbook/data/formats/pileup/","text":"Pileup format [from LSCC docs] Pileup Format A pileup file has as many lines as there are bases in the reference sequence that are aligned with reads in the SAM/BAM file. Each line contains information about every base found in the sequence reads that corresponds to the reference base on that line. The format of a pileup record is: ReferenceSeq [string] - name of the reference sequence Coordinate [integer] - position in the reference sequence ReferenceBase [A/C/G/T/N] - reference base at that position Num. Reads [integer] - number of reads aligning to that base ReadBases [variable length string, see below] BaseQualities [variable length string, Phred encoded] ReadBases: Each separate read that covers the base is represented here. The more reads that cover this base, the longer this string . = match on forward strand for that base , = match on reverse strand ACGTN = mismatch on forward acgtn = mismatch on reverse +[0-9]+[ACGTNacgtn]+ = insertion between this reference position and the next [0-9]+[ACGTNacgtn]+ = deletion between this reference position and the next ^ = start of read $ = end of read BaseQualities = one character per base in ReadBases, ASCII encoded Phred scores Example: chr1 272 T 24 ,.$.....,,.,., ,,,.,..^+. +; = ; ;7 chr1 273 T 23 ,.....,,.,., ,,,.,..A ; 3 = ; + chr1 274 T 23 ,.$....,,.,., ,,,., 7 7; ; = ; ; 6 chr1 275 A 23 ,$....,,.,., ,,,., ^l. +;9* = :; chr1 276 G 22 T,,.,., ,,,.,.... 33;+ 7=7 7 1; 6 In this example there are 5 chromosomal positions represented, with between 22 and 24 reads aligning to each of the positions. There are two mismatches: an A in position 273 and a T in position 276. That is, only a single read contained that mismatch in either case. More information on pileup format here: http://samtools.sourceforge.net/pileup.shtml Pileup file in Galaxy","title":"Pileup format"},{"location":"scrapbook/data/formats/pileup/#pileup-format","text":"[from LSCC docs]","title":"Pileup format"},{"location":"scrapbook/data/formats/pileup/#pileup-format_1","text":"A pileup file has as many lines as there are bases in the reference sequence that are aligned with reads in the SAM/BAM file. Each line contains information about every base found in the sequence reads that corresponds to the reference base on that line. The format of a pileup record is: ReferenceSeq [string] - name of the reference sequence Coordinate [integer] - position in the reference sequence ReferenceBase [A/C/G/T/N] - reference base at that position Num. Reads [integer] - number of reads aligning to that base ReadBases [variable length string, see below] BaseQualities [variable length string, Phred encoded] ReadBases: Each separate read that covers the base is represented here. The more reads that cover this base, the longer this string . = match on forward strand for that base , = match on reverse strand ACGTN = mismatch on forward acgtn = mismatch on reverse +[0-9]+[ACGTNacgtn]+ = insertion between this reference position and the next [0-9]+[ACGTNacgtn]+ = deletion between this reference position and the next ^ = start of read $ = end of read BaseQualities = one character per base in ReadBases, ASCII encoded Phred scores Example: chr1 272 T 24 ,.$.....,,.,., ,,,.,..^+. +; = ; ;7 chr1 273 T 23 ,.....,,.,., ,,,.,..A ; 3 = ; + chr1 274 T 23 ,.$....,,.,., ,,,., 7 7; ; = ; ; 6 chr1 275 A 23 ,$....,,.,., ,,,., ^l. +;9* = :; chr1 276 G 22 T,,.,., ,,,.,.... 33;+ 7=7 7 1; 6 In this example there are 5 chromosomal positions represented, with between 22 and 24 reads aligning to each of the positions. There are two mismatches: an A in position 273 and a T in position 276. That is, only a single read contained that mismatch in either case. More information on pileup format here: http://samtools.sourceforge.net/pileup.shtml","title":"Pileup Format"},{"location":"scrapbook/data/formats/pileup/#pileup-file-in-galaxy","text":"","title":"Pileup file in Galaxy"},{"location":"scrapbook/data/formats/sam/","text":"SAM File [from LSCC docs] Sequence Alignment/Map (SAM) format records all information relevant to how a set of reads aligns to a reference genome. A SAM file has an optional set of header lines describing the context of the alignment, then one line per read, with the following format: 11 mandatory fields (+ variable number of optional fields) 1 QNAME: Query name of the read 2 FLAG 3 RNAME: Reference sequence name 4 POS: Position of alignment in reference sequence 5 MAPQ: Mapping quality (Phred-scaled) 6 CIGAR: String that describes the specifics of the alignment against the reference 7 MRNM 8 MPOS 9 ISIZE 10 SEQQuery: Sequence on the same strand as the reference 11 QUAL: Query quality (ASCII-33=Phred base quality) SAM example SRR017937.312 16 chr20 43108717 37 76M * 0 0 TGAGCCTCCGGGCTATGTGTGCTCACTGACAGAAGACCTGGTCACCAAAGCCCGGGAAGAGCTGCAGGAAAAGCCG ?,@A=A @ABBB@@9BB@:@5 BBB2 BBB@BBB?;;BABBBBBBB@ For this example: QNAME = SRR017937.312 - this is the name of this read FLAG = 16 - see the format description below RNAME = chr20 - this read aligns to chromosome 20 POS = 43108717 - this read aligns the sequence on chr20 at position 43108717 MAPQ = 37 - this is quite a high quality score for the alignment (b/w 0 and 90) CIGAR = 76M - this read aligns to the reference segment across all bases (76 Matches means no deletions or insertions. Note that aligns can mean aligns with mismatches - mismatches that don t affect the alignment are not recorded in this field) MRNM = * - see the format description below MPOS = 0 as there is no mate for this read - the sequenced DNA library was single ended, not mate paired*. ISIZE = 0 as there is no mate for this read SEQQuery = the 76bp sequence of the reference segment QUAL = per-base quality scores for each position on the alignment. This is just a copy of what is in the FASTQ file NOTE: reads are shown mapped to the sense strand of the reference, and bases are listed in 5 - 3 order. This is important because an actual read might be from the other strand of DNA. The alignment tool will try to map the read as it is, and also the reverse compliment. If it was on the other strand then the reverse compliment is shown in the SAM file, rather than the original read itself More information. [FIXME link]","title":"SAM File"},{"location":"scrapbook/data/formats/sam/#sam-file","text":"[from LSCC docs] Sequence Alignment/Map (SAM) format records all information relevant to how a set of reads aligns to a reference genome. A SAM file has an optional set of header lines describing the context of the alignment, then one line per read, with the following format: 11 mandatory fields (+ variable number of optional fields) 1 QNAME: Query name of the read 2 FLAG 3 RNAME: Reference sequence name 4 POS: Position of alignment in reference sequence 5 MAPQ: Mapping quality (Phred-scaled) 6 CIGAR: String that describes the specifics of the alignment against the reference 7 MRNM 8 MPOS 9 ISIZE 10 SEQQuery: Sequence on the same strand as the reference 11 QUAL: Query quality (ASCII-33=Phred base quality)","title":"SAM File"},{"location":"scrapbook/data/formats/sam/#sam-example","text":"SRR017937.312 16 chr20 43108717 37 76M * 0 0 TGAGCCTCCGGGCTATGTGTGCTCACTGACAGAAGACCTGGTCACCAAAGCCCGGGAAGAGCTGCAGGAAAAGCCG ?,@A=A @ABBB@@9BB@:@5 BBB2 BBB@BBB?;;BABBBBBBB@ For this example: QNAME = SRR017937.312 - this is the name of this read FLAG = 16 - see the format description below RNAME = chr20 - this read aligns to chromosome 20 POS = 43108717 - this read aligns the sequence on chr20 at position 43108717 MAPQ = 37 - this is quite a high quality score for the alignment (b/w 0 and 90) CIGAR = 76M - this read aligns to the reference segment across all bases (76 Matches means no deletions or insertions. Note that aligns can mean aligns with mismatches - mismatches that don t affect the alignment are not recorded in this field) MRNM = * - see the format description below MPOS = 0 as there is no mate for this read - the sequenced DNA library was single ended, not mate paired*. ISIZE = 0 as there is no mate for this read SEQQuery = the 76bp sequence of the reference segment QUAL = per-base quality scores for each position on the alignment. This is just a copy of what is in the FASTQ file NOTE: reads are shown mapped to the sense strand of the reference, and bases are listed in 5 - 3 order. This is important because an actual read might be from the other strand of DNA. The alignment tool will try to map the read as it is, and also the reverse compliment. If it was on the other strand then the reverse compliment is shown in the SAM file, rather than the original read itself More information. [FIXME link]","title":"SAM example"},{"location":"scrapbook/dge/","text":"Differential Gene Expression Background Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions. Learning Objectives At the end of this tutorial you should be able to: Align RNA-Seq data to a reference genome Count transcripts for each sample Perform statistical analysis to obtain a list of differentially expressed genes Interpret the DGE list Visualize the results in Degust Input data A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples. Each sample will be RNA-Seq data , either as one file per sample (single-end reads / SE) or two files (paired-end reads / PE). Condition 1 Condition 2 Replicate 1 1 4 Replicate 2 2 5 Replicate 3 3 6 FIXME: load reads Prepare reference FIXME: tricky need it in correct format for htseq-count GFF2 ? Align reads FIXME: use BWA MEM with defaults? for each sample, should be able to use the 6 at once feature of Galaxy? Count reads FIXME: htseq-count, use the CDS and RNA features to align to, get count table DGE Analysis Within Galaxy FIXME: Need to use Voom/Limma here Within Degust FIXME: need to combine each of the results in count-reads section into a single table (using galaxy table tools?) but need to munge in the annotation as well, so i or simon will need to add new tools to toolshed to do this What next? FIXME","title":"Differential Gene Expression"},{"location":"scrapbook/dge/#differential-gene-expression","text":"","title":"Differential Gene Expression"},{"location":"scrapbook/dge/#background","text":"Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.","title":"Background"},{"location":"scrapbook/dge/#learning-objectives","text":"At the end of this tutorial you should be able to: Align RNA-Seq data to a reference genome Count transcripts for each sample Perform statistical analysis to obtain a list of differentially expressed genes Interpret the DGE list Visualize the results in Degust","title":"Learning Objectives"},{"location":"scrapbook/dge/#input-data","text":"A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples. Each sample will be RNA-Seq data , either as one file per sample (single-end reads / SE) or two files (paired-end reads / PE). Condition 1 Condition 2 Replicate 1 1 4 Replicate 2 2 5 Replicate 3 3 6 FIXME: load reads","title":"Input data"},{"location":"scrapbook/dge/#prepare-reference","text":"FIXME: tricky need it in correct format for htseq-count GFF2 ?","title":"Prepare reference"},{"location":"scrapbook/dge/#align-reads","text":"FIXME: use BWA MEM with defaults? for each sample, should be able to use the 6 at once feature of Galaxy?","title":"Align reads"},{"location":"scrapbook/dge/#count-reads","text":"FIXME: htseq-count, use the CDS and RNA features to align to, get count table","title":"Count reads"},{"location":"scrapbook/dge/#dge-analysis","text":"","title":"DGE Analysis"},{"location":"scrapbook/dge/#within-galaxy","text":"FIXME: Need to use Voom/Limma here","title":"Within Galaxy"},{"location":"scrapbook/dge/#within-degust","text":"FIXME: need to combine each of the results in count-reads section into a single table (using galaxy table tools?) but need to munge in the annotation as well, so i or simon will need to add new tools to toolshed to do this","title":"Within Degust"},{"location":"scrapbook/dge/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/dna/anno/","text":"Genome Annotation Genome annotation is the process of labelling genomic features onto a genomic sequence, such as the location of coding genes and RNAs. Command Line Prokka Galaxy Prokka Web RAST GENIX","title":"Genome Annotation"},{"location":"scrapbook/dna/anno/#genome-annotation","text":"Genome annotation is the process of labelling genomic features onto a genomic sequence, such as the location of coding genes and RNAs.","title":"Genome Annotation"},{"location":"scrapbook/dna/anno/#command-line","text":"Prokka","title":"Command Line"},{"location":"scrapbook/dna/anno/#galaxy","text":"Prokka","title":"Galaxy"},{"location":"scrapbook/dna/anno/#web","text":"RAST GENIX","title":"Web"},{"location":"scrapbook/dna/data/","text":"Genomics Data DNA-Seq FASTQ","title":"Genomics Data"},{"location":"scrapbook/dna/data/#genomics-data","text":"DNA-Seq FASTQ","title":"Genomics Data"},{"location":"scrapbook/dna/denovo/","text":"De novo genome assembly Illumina data Command line Velvet Spades MegaHIT Galaxy Spades Pacbio data Command line CANU SMRT Suite HGAP","title":"*De novo* genome assembly"},{"location":"scrapbook/dna/denovo/#de-novo-genome-assembly","text":"","title":"De novo genome assembly"},{"location":"scrapbook/dna/denovo/#illumina-data","text":"","title":"Illumina data"},{"location":"scrapbook/dna/denovo/#command-line","text":"Velvet Spades MegaHIT","title":"Command line"},{"location":"scrapbook/dna/denovo/#galaxy","text":"Spades","title":"Galaxy"},{"location":"scrapbook/dna/denovo/#pacbio-data","text":"","title":"Pacbio data"},{"location":"scrapbook/dna/denovo/#command-line_1","text":"CANU","title":"Command line"},{"location":"scrapbook/dna/denovo/#smrt-suite","text":"HGAP","title":"SMRT Suite"},{"location":"scrapbook/dna/snps/","text":"Variant Finding Variant finding the the process of identifying small differences between two genomes. Typically this refers to the small scale, such as SNPs and small insertions and deletions, as opposed to larger structural variation. Command Line Snippy Galaxy Varscan","title":"Variant Finding"},{"location":"scrapbook/dna/snps/#variant-finding","text":"Variant finding the the process of identifying small differences between two genomes. Typically this refers to the small scale, such as SNPs and small insertions and deletions, as opposed to larger structural variation.","title":"Variant Finding"},{"location":"scrapbook/dna/snps/#command-line","text":"Snippy","title":"Command Line"},{"location":"scrapbook/dna/snps/#galaxy","text":"Varscan","title":"Galaxy"},{"location":"scrapbook/dna/anno/eugene/","text":"EuGene-PP link: http://bioinformatics.oxfordjournals.org/content/30/18/2659.full can annotate using oriented RNA-seq data, so that the resulting annotation may include non-coding regions, including antisense ones. Pre-requisites mGVL Start Input data assembled genome oriented RNA-seq How it works -","title":"EuGene-PP"},{"location":"scrapbook/dna/anno/eugene/#eugene-pp","text":"link: http://bioinformatics.oxfordjournals.org/content/30/18/2659.full can annotate using oriented RNA-seq data, so that the resulting annotation may include non-coding regions, including antisense ones.","title":"EuGene-PP"},{"location":"scrapbook/dna/anno/eugene/#pre-requisites","text":"mGVL","title":"Pre-requisites"},{"location":"scrapbook/dna/anno/eugene/#start","text":"","title":"Start"},{"location":"scrapbook/dna/anno/eugene/#input-data","text":"assembled genome oriented RNA-seq","title":"Input data"},{"location":"scrapbook/dna/anno/eugene/#how-it-works","text":"-","title":"How it works"},{"location":"scrapbook/dna/anno/genix/","text":"GENIX this is a new website not galaxy","title":"GENIX"},{"location":"scrapbook/dna/anno/genix/#genix","text":"this is a new website not galaxy","title":"GENIX"},{"location":"scrapbook/dna/anno/megannotator/","text":"MEGAnnotator http://femsle.oxfordjournals.org/content/363/7/fnw049","title":"Megannotator"},{"location":"scrapbook/dna/anno/megannotator/#megannotator","text":"http://femsle.oxfordjournals.org/content/363/7/fnw049","title":"MEGAnnotator"},{"location":"scrapbook/dna/anno/prokka/","text":"Prokka on Galaxy Background Genome annotation involves finding and describing particular features, such as genes, tRNAs and rRNAs. This tutorial will demonstrate how to annotate an assembled bacterial genome using the tool Prokka. Link to Prokka on github ; link to Prokka citation . Learning objectives At the end of this tutorial you should be able to : input files into Prokka change settings run Prokka, and examine the output: annotated genome. Pre-requisites a mGVL and galaxy instance Start open your galaxy instance in your mGVL Input data assembled contigs, e.g. SPAdes_contigs.fasta How it works Prokka compares the input contigs with various databases to identify coding sequences, rRNA genes, tRNA genes, non-coding RNA, and signal leader peptides. These databases are maintained by different organisations, and include information about known genomic features and their locations. Prokka includes a local copy. Run Prokka In Galaxy, go to Tools NGS Analysis NGS: Annotation Prokka Set the following parameters (leave everything else unchanged): Contigs to annotate : SPAdes contigs (fasta) Locus tag prefix ( locustag) : P FIXME: actually we want to have a different locus tag for each sample for later use in Roary. Is there some problem here with the length of the locus tag that can be used? Force GenBank/ENA/DDJB compliance ( compliant) : Yes Sequencing Centre ID ( centre) : V Genus Name : Staphylococcus Species Name : aureus Use genus-specific BLAST database No Click Execute . This may take x minutes. Examine the output Once Prokka has finished, examine each of its output files. The gff and gbk files contains all of the information about all of the features annotated (in different formats.) summary.gff : a list of all the features found, listed in order of their location (starting at the start of contig number 1). Each row is a genomic feature and its location. Column 2 is the source - the database used to find the feature. Column 3 is the feature - e.g. CDS, tRNA. summary.gbk : the contigs listed in order. For each contig, the features are listed (e.g. CDS name and translation), followed by the sequence of the whole contig. The txt file contains a summary of the number of features annotated. The faa file contains the protein sequences of the genes annotated. The ffn file contains the nucleotide sequences of the genes annotated. Download the gff file to your local computer: click on the file name with the .gff extension, and then click on the disk icon . Annotated features Now that we have annotated the draft genome sequence, we would like to view the sequence in the Artemis genome viewer. Open Artemis and load the downloaded .gff file. The top panel shows an overview - here we can see annotated genes and other features. The middle panel shows the DNA sequence and amino acid translations in 6 frames. The bottom panel shows a text summary of the features. Scroll left and right with the horizontal bars under each panel. Zoom with the vertical bars to the right. What Next? Determine core and pan genomes using Roary .","title":"Prokka on Galaxy"},{"location":"scrapbook/dna/anno/prokka/#prokka-on-galaxy","text":"","title":"Prokka on Galaxy"},{"location":"scrapbook/dna/anno/prokka/#background","text":"Genome annotation involves finding and describing particular features, such as genes, tRNAs and rRNAs. This tutorial will demonstrate how to annotate an assembled bacterial genome using the tool Prokka. Link to Prokka on github ; link to Prokka citation .","title":"Background"},{"location":"scrapbook/dna/anno/prokka/#learning-objectives","text":"At the end of this tutorial you should be able to : input files into Prokka change settings run Prokka, and examine the output: annotated genome.","title":"Learning objectives"},{"location":"scrapbook/dna/anno/prokka/#pre-requisites","text":"a mGVL and galaxy instance","title":"Pre-requisites"},{"location":"scrapbook/dna/anno/prokka/#start","text":"open your galaxy instance in your mGVL","title":"Start"},{"location":"scrapbook/dna/anno/prokka/#input-data","text":"assembled contigs, e.g. SPAdes_contigs.fasta","title":"Input data"},{"location":"scrapbook/dna/anno/prokka/#how-it-works","text":"Prokka compares the input contigs with various databases to identify coding sequences, rRNA genes, tRNA genes, non-coding RNA, and signal leader peptides. These databases are maintained by different organisations, and include information about known genomic features and their locations. Prokka includes a local copy.","title":"How it works"},{"location":"scrapbook/dna/anno/prokka/#run-prokka","text":"In Galaxy, go to Tools NGS Analysis NGS: Annotation Prokka Set the following parameters (leave everything else unchanged): Contigs to annotate : SPAdes contigs (fasta) Locus tag prefix ( locustag) : P FIXME: actually we want to have a different locus tag for each sample for later use in Roary. Is there some problem here with the length of the locus tag that can be used? Force GenBank/ENA/DDJB compliance ( compliant) : Yes Sequencing Centre ID ( centre) : V Genus Name : Staphylococcus Species Name : aureus Use genus-specific BLAST database No Click Execute . This may take x minutes.","title":"Run Prokka"},{"location":"scrapbook/dna/anno/prokka/#examine-the-output","text":"Once Prokka has finished, examine each of its output files. The gff and gbk files contains all of the information about all of the features annotated (in different formats.) summary.gff : a list of all the features found, listed in order of their location (starting at the start of contig number 1). Each row is a genomic feature and its location. Column 2 is the source - the database used to find the feature. Column 3 is the feature - e.g. CDS, tRNA. summary.gbk : the contigs listed in order. For each contig, the features are listed (e.g. CDS name and translation), followed by the sequence of the whole contig. The txt file contains a summary of the number of features annotated. The faa file contains the protein sequences of the genes annotated. The ffn file contains the nucleotide sequences of the genes annotated. Download the gff file to your local computer: click on the file name with the .gff extension, and then click on the disk icon .","title":"Examine the output"},{"location":"scrapbook/dna/anno/prokka/#annotated-features","text":"Now that we have annotated the draft genome sequence, we would like to view the sequence in the Artemis genome viewer. Open Artemis and load the downloaded .gff file. The top panel shows an overview - here we can see annotated genes and other features. The middle panel shows the DNA sequence and amino acid translations in 6 frames. The bottom panel shows a text summary of the features. Scroll left and right with the horizontal bars under each panel. Zoom with the vertical bars to the right.","title":"Annotated features"},{"location":"scrapbook/dna/anno/prokka/#what-next","text":"Determine core and pan genomes using Roary .","title":"What Next?"},{"location":"scrapbook/dna/anno/prokka_cmdline/","text":"Prokka on commandline ssh to your mGVL wget data - scaffolds of .fna for several species (alternatively - have already put data on your mGVL) type in: prokka --outdir [name of output folder for 1 sample] --locustag [tag eg sample number] [fna filename] make a new directory for the gff files e.g. gff_files mv -v / .gff gff_files/ (means move any .gff files into that folder) FIXME: prokka options see manual","title":"Prokka on commandline"},{"location":"scrapbook/dna/anno/prokka_cmdline/#prokka-on-commandline","text":"ssh to your mGVL wget data - scaffolds of .fna for several species (alternatively - have already put data on your mGVL) type in: prokka --outdir [name of output folder for 1 sample] --locustag [tag eg sample number] [fna filename] make a new directory for the gff files e.g. gff_files mv -v / .gff gff_files/ (means move any .gff files into that folder) FIXME: prokka options see manual","title":"Prokka on commandline"},{"location":"scrapbook/dna/anno/rast/","text":"RAST website","title":"RAST"},{"location":"scrapbook/dna/anno/rast/#rast","text":"website","title":"RAST"},{"location":"scrapbook/dna/denovo/canu/","text":"CANU pacbio cmdline","title":"CANU"},{"location":"scrapbook/dna/denovo/canu/#canu","text":"pacbio cmdline","title":"CANU"},{"location":"scrapbook/dna/denovo/galaxy-spades/","text":"Assembly with Spades in Galaxy FIXME: This tutorial includes the Workshop 2a Assembly with Spades but also some extra info: section: Pre-requisites section: How does Spades work more detail on output files section: Filter output section: questions Background Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link . A protocol for assembling with Velvet (another de novo assembler) is available here . In this activity, we will perform a de novo assembly of a short read set (from an Illumina sequencer) using the Spades assembler. The output from Spades that we are interested in is a multifasta file that contains the draft genome sequence. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. We have a closed, annotated genome sequence for a closely related wildtype strain. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The reads are paired-end Each read is 150 bases (before trimming) The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!). Learning objectives At the end of this tutorial you should be able to: import data into Galaxy view the files evaluate the read quality assemble the reads using Spades, and examine the output assembly. Pre-requisites Galaxy de novo assembly QC Trimming Login to Galaxy Go to this Galaxy address: http://43.240.98.1/galaxy (FIXME: or alternative) Remind me how to logon. FIXME: note this contains the same galaxy address as above - change? Import data Click on the Analyze Data menu at the top of the page. Click on the History options button the on the top right of the history pane. Click Import from File (at the bottom of the list). A new page will appear with a text box for the URL of the history to import. Copy the following URL into the text box: http://43.240.98.1/public/dieter/Galaxy-History-Colombiaworkshopstart.tar.gz Click Submit . Galaxy will download the data files from the internet and will be available as an additional history (takes about one minute). To view this new history, click the View all histories button (top right of the history pane). If the history has finished downloading it will appear as imported from archive: Colombia_workshop_start Click on the button above the imported from archive:Colombia_workshop_start then the button. You should now have four files in the history pane as follows: View files All the files are text files. mutant_R1.fastq and mutant_R2.fastq : a paired-end read set wildtype.fna : a file that contains the genome sequence of the wildtype strain in fasta format (a header line, then the nucleotide sequence of the genome) wildtype.gff : a file that contains the genome sequence of the wildtype strain in general feature format. (a list of features - one feature per line, then the nucleotide sequence of the genome) Look at the contents of these files Click on the View Data button (the ) next to each of the files in turn. Brief Discussion about the GFF format (FIXME: add?) Evaluate the input reads Questions you might ask about your input reads include: How good is my read set? Do I need to ask for a new sequencing run? Is it suitable for the analysis I need to do? We will evaluate the input reads using the FastQC tool. This runs a standard series of tests on your read set and returns a relatively easy to interpret report. We will use the FASTQC tool in Galaxy to evaluate the quality of one of our fastq files. Go to Tools NGS:Analysis NGS: QC and Manipulation FastQC Select mutant_R1.fastq Execute Once finished, examine the output called FastQC on data1:webpage (Hint: ). It has a summary at the top of the page and a number of graphs. Some of the important outputs of FastQC for our purposes are: Basic Statistics: Sequence length : will be important in setting maximum k-mer size value for assembly Basic Statistics: Encoding : Quality encoding type: important for quality trimming software Basic Statistics: % GC : high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution. Basic Statistics: Total sequences : Total number of reads: gives you an idea of coverage. Per base sequence quality : Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run. Per base N content : Presence of large numbers of Ns in reads: may point to poor quality sequencing run. You would need to trim these reads to remove Ns. Kmer content : Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc. Although we have warnings for two outputs (per base sequence content; Kmer content), we can ignore these for now. For a fuller discussion of FastQC outputs and warnings, see the FastQC website link , including the section on each of the output reports , and examples of good and bad Illumina data. We won\u2019t be doing anything to these data to clean it up as there isn\u2019t much need. Therefore we will get on with the assembly! How does Spades work? As with several other de novo assembly programs (e.g. Velvet) Spades uses an algorithm based on de Bruijn graphs. Such graphs use sub-lengths of sequence reads to build an overall genome assembly. The span of the sub-length is called a k-mer, where k is the number of nucleotides (e.g. k=21). The user chooses three values of k and Spades makes three assemblies based on these. For the first value of k, each read is broken into as many fragments as possible. For example, if the input read is 22 nucleotides long, and the chosen value of k is 21, then there are two possible fragments (positions 1-21 and 2-22). One randomly-chosen fragment becomes the first node on the de Bruijn graph. A second fragment is connected to this node if it overlaps. Repeat until all fragments are connected. Output de Bruijn graph. Find a connected pathway through this graph. Output a pathway (sequence) known as a contig. Because of poor or incorrect sequencing, not all the fragments can be joined together. There will be several de Bruijn graphs and so several contigs, usually of different sizes. Repeat these steps for a further two values of k (e.g. k = 33, k = 55). Output Three (sets of) contigs. Merge the three (sets of) contigs to get one. Output one set of contigs. For paired-end reads (as in this tutorial), the two reads are sequenced from each end of a longer DNA fragment. The middle part of the fragment is not sequenced, but information about the distance between the reads can be used by Spades to join contigs into larger sequences, called scaffolds. Output one set of scaffolds. To fix any errors map the original sequence reads onto the scaffolds with the program BWA. Output assembled genome. Assemble reads with Spades We will perform a de novo assembly of the mutant fastq reads into long contiguous sequences (in fasta format.) Spades produces both contigs and scaffolds. Ask your demonstrator if you would like to know the difference between contigs and scaffolds. Go to Tools NGS Analysis NGS: Assembly spades Set the following parameters: Run only Assembly : Yes Kmers to use separated by commas: 33,55,91 no spaces Coverage cutoff: auto Files Forward reads: mutant_R1.fastq Files Reverse reads: mutant_R2.fastq Your tool interface should look like this: Click Execute Examine the output Galaxy is now running Spades on the reads for you. When it is finished, you will have five new files in your history. contig stats : There are x contigs. Look at the variation in length and coverage. A short contig with high coverage could be a result of contamination, a collapsed repeat, or a plasmid. contigs : Each contig is listed, followed by its sequence in fasta format. scaffold stats : There are x scaffolds. scaffolds : Each scaffold is listed, followed by its sequence in fasta format. log : The specific actions performed in the analysis. Click on the View Data button on each of the files. Note that the short reads have been assembled into much longer contigs. (However, in this case, the contigs have not been assembled into larger scaffolds.) The stats files will give you the length of each of the contigs. Filter output Go to Tools NGS Analysis NGS: Assembly Filter SPAdes output . This is a quick way to discard contigs that are too short (e.g., they might be contamination) or contigs that do not have enough coverage (e.g., they might be too unreliable). Under Sequences , choose the contigs fasta file. Under Contig stats choose the contigs stats file. Change the cut-off values for length and coverage or leave them as they are. For Save filtered-out sequences? click Yes . Click Execute . A new fasta file with only the filtered sequences will be saved in the right-side history pane. Questions How does SPAdes differ from other genome assembly programs? It uses multiple values of k in de Bruijn graphs. Larger fragment sizes will more accurately position sections of duplicated DNA (repeats), but these larger fragments will only overlap well in densely-sequenced (high-coverage) areas of the genome. Because bacterial genomes may have low-coverage regions, using smaller fragments can increase the potential for overlaps (joins) in these low-coverage regions. Using a range of fragment sizes will therefore get the benefit from both approaches. More information [here](http://thegenomefactory.blogspot.com.au/2013/08/how-spades-differs-from-velvet.html>). How do I choose values of k? The k values need to be odd numbers, and shorter than the read lengths. A good strategy could be to choose some that are small, medium and large. e.g. if the read is 150 nucleotides, k values could be 33, 55, 91. There is no absolute rule; rather, the aim is to get a good spread of k values across the read length. What can I do with my assembled genome? This tutorial used a subset of a real dataset, so is not a complete genome (is it?). You could re-try it with short reads from a whole genome, at NCBI SRA. You can [annotate] (describe) the genomic features such as genes or [compare] it to other genomes to see variation in structure. What Next? Annotate the genome, e.g. with Prokka .","title":"Assembly with Spades in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-spades/#assembly-with-spades-in-galaxy","text":"FIXME: This tutorial includes the Workshop 2a Assembly with Spades but also some extra info: section: Pre-requisites section: How does Spades work more detail on output files section: Filter output section: questions","title":"Assembly with Spades in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-spades/#background","text":"Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link . A protocol for assembling with Velvet (another de novo assembler) is available here . In this activity, we will perform a de novo assembly of a short read set (from an Illumina sequencer) using the Spades assembler. The output from Spades that we are interested in is a multifasta file that contains the draft genome sequence. The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. We have a closed, annotated genome sequence for a closely related wildtype strain. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument. The reads are paired-end Each read is 150 bases (before trimming) The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).","title":"Background"},{"location":"scrapbook/dna/denovo/galaxy-spades/#learning-objectives","text":"At the end of this tutorial you should be able to: import data into Galaxy view the files evaluate the read quality assemble the reads using Spades, and examine the output assembly.","title":"Learning objectives"},{"location":"scrapbook/dna/denovo/galaxy-spades/#pre-requisites","text":"Galaxy de novo assembly QC Trimming","title":"Pre-requisites"},{"location":"scrapbook/dna/denovo/galaxy-spades/#login-to-galaxy","text":"Go to this Galaxy address: http://43.240.98.1/galaxy (FIXME: or alternative) Remind me how to logon. FIXME: note this contains the same galaxy address as above - change?","title":"Login to Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-spades/#import-data","text":"Click on the Analyze Data menu at the top of the page. Click on the History options button the on the top right of the history pane. Click Import from File (at the bottom of the list). A new page will appear with a text box for the URL of the history to import. Copy the following URL into the text box: http://43.240.98.1/public/dieter/Galaxy-History-Colombiaworkshopstart.tar.gz Click Submit . Galaxy will download the data files from the internet and will be available as an additional history (takes about one minute). To view this new history, click the View all histories button (top right of the history pane). If the history has finished downloading it will appear as imported from archive: Colombia_workshop_start Click on the button above the imported from archive:Colombia_workshop_start then the button. You should now have four files in the history pane as follows:","title":"Import data"},{"location":"scrapbook/dna/denovo/galaxy-spades/#view-files","text":"All the files are text files. mutant_R1.fastq and mutant_R2.fastq : a paired-end read set wildtype.fna : a file that contains the genome sequence of the wildtype strain in fasta format (a header line, then the nucleotide sequence of the genome) wildtype.gff : a file that contains the genome sequence of the wildtype strain in general feature format. (a list of features - one feature per line, then the nucleotide sequence of the genome) Look at the contents of these files Click on the View Data button (the ) next to each of the files in turn. Brief Discussion about the GFF format (FIXME: add?)","title":"View files"},{"location":"scrapbook/dna/denovo/galaxy-spades/#evaluate-the-input-reads","text":"Questions you might ask about your input reads include: How good is my read set? Do I need to ask for a new sequencing run? Is it suitable for the analysis I need to do? We will evaluate the input reads using the FastQC tool. This runs a standard series of tests on your read set and returns a relatively easy to interpret report. We will use the FASTQC tool in Galaxy to evaluate the quality of one of our fastq files. Go to Tools NGS:Analysis NGS: QC and Manipulation FastQC Select mutant_R1.fastq Execute Once finished, examine the output called FastQC on data1:webpage (Hint: ). It has a summary at the top of the page and a number of graphs. Some of the important outputs of FastQC for our purposes are: Basic Statistics: Sequence length : will be important in setting maximum k-mer size value for assembly Basic Statistics: Encoding : Quality encoding type: important for quality trimming software Basic Statistics: % GC : high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution. Basic Statistics: Total sequences : Total number of reads: gives you an idea of coverage. Per base sequence quality : Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run. Per base N content : Presence of large numbers of Ns in reads: may point to poor quality sequencing run. You would need to trim these reads to remove Ns. Kmer content : Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc. Although we have warnings for two outputs (per base sequence content; Kmer content), we can ignore these for now. For a fuller discussion of FastQC outputs and warnings, see the FastQC website link , including the section on each of the output reports , and examples of good and bad Illumina data. We won\u2019t be doing anything to these data to clean it up as there isn\u2019t much need. Therefore we will get on with the assembly!","title":"Evaluate the input reads"},{"location":"scrapbook/dna/denovo/galaxy-spades/#how-does-spades-work","text":"As with several other de novo assembly programs (e.g. Velvet) Spades uses an algorithm based on de Bruijn graphs. Such graphs use sub-lengths of sequence reads to build an overall genome assembly. The span of the sub-length is called a k-mer, where k is the number of nucleotides (e.g. k=21). The user chooses three values of k and Spades makes three assemblies based on these. For the first value of k, each read is broken into as many fragments as possible. For example, if the input read is 22 nucleotides long, and the chosen value of k is 21, then there are two possible fragments (positions 1-21 and 2-22). One randomly-chosen fragment becomes the first node on the de Bruijn graph. A second fragment is connected to this node if it overlaps. Repeat until all fragments are connected. Output de Bruijn graph. Find a connected pathway through this graph. Output a pathway (sequence) known as a contig. Because of poor or incorrect sequencing, not all the fragments can be joined together. There will be several de Bruijn graphs and so several contigs, usually of different sizes. Repeat these steps for a further two values of k (e.g. k = 33, k = 55). Output Three (sets of) contigs. Merge the three (sets of) contigs to get one. Output one set of contigs. For paired-end reads (as in this tutorial), the two reads are sequenced from each end of a longer DNA fragment. The middle part of the fragment is not sequenced, but information about the distance between the reads can be used by Spades to join contigs into larger sequences, called scaffolds. Output one set of scaffolds. To fix any errors map the original sequence reads onto the scaffolds with the program BWA. Output assembled genome.","title":"How does Spades work?"},{"location":"scrapbook/dna/denovo/galaxy-spades/#assemble-reads-with-spades","text":"We will perform a de novo assembly of the mutant fastq reads into long contiguous sequences (in fasta format.) Spades produces both contigs and scaffolds. Ask your demonstrator if you would like to know the difference between contigs and scaffolds. Go to Tools NGS Analysis NGS: Assembly spades Set the following parameters: Run only Assembly : Yes Kmers to use separated by commas: 33,55,91 no spaces Coverage cutoff: auto Files Forward reads: mutant_R1.fastq Files Reverse reads: mutant_R2.fastq Your tool interface should look like this: Click Execute","title":"Assemble reads with Spades"},{"location":"scrapbook/dna/denovo/galaxy-spades/#examine-the-output","text":"Galaxy is now running Spades on the reads for you. When it is finished, you will have five new files in your history. contig stats : There are x contigs. Look at the variation in length and coverage. A short contig with high coverage could be a result of contamination, a collapsed repeat, or a plasmid. contigs : Each contig is listed, followed by its sequence in fasta format. scaffold stats : There are x scaffolds. scaffolds : Each scaffold is listed, followed by its sequence in fasta format. log : The specific actions performed in the analysis. Click on the View Data button on each of the files. Note that the short reads have been assembled into much longer contigs. (However, in this case, the contigs have not been assembled into larger scaffolds.) The stats files will give you the length of each of the contigs.","title":"Examine the output"},{"location":"scrapbook/dna/denovo/galaxy-spades/#filter-output","text":"Go to Tools NGS Analysis NGS: Assembly Filter SPAdes output . This is a quick way to discard contigs that are too short (e.g., they might be contamination) or contigs that do not have enough coverage (e.g., they might be too unreliable). Under Sequences , choose the contigs fasta file. Under Contig stats choose the contigs stats file. Change the cut-off values for length and coverage or leave them as they are. For Save filtered-out sequences? click Yes . Click Execute . A new fasta file with only the filtered sequences will be saved in the right-side history pane.","title":"Filter output"},{"location":"scrapbook/dna/denovo/galaxy-spades/#questions","text":"How does SPAdes differ from other genome assembly programs? It uses multiple values of k in de Bruijn graphs. Larger fragment sizes will more accurately position sections of duplicated DNA (repeats), but these larger fragments will only overlap well in densely-sequenced (high-coverage) areas of the genome. Because bacterial genomes may have low-coverage regions, using smaller fragments can increase the potential for overlaps (joins) in these low-coverage regions. Using a range of fragment sizes will therefore get the benefit from both approaches. More information [here](http://thegenomefactory.blogspot.com.au/2013/08/how-spades-differs-from-velvet.html>). How do I choose values of k? The k values need to be odd numbers, and shorter than the read lengths. A good strategy could be to choose some that are small, medium and large. e.g. if the read is 150 nucleotides, k values could be 33, 55, 91. There is no absolute rule; rather, the aim is to get a good spread of k values across the read length. What can I do with my assembled genome? This tutorial used a subset of a real dataset, so is not a complete genome (is it?). You could re-try it with short reads from a whole genome, at NCBI SRA. You can [annotate] (describe) the genomic features such as genes or [compare] it to other genomes to see variation in structure.","title":"Questions"},{"location":"scrapbook/dna/denovo/galaxy-spades/#what-next","text":"Annotate the genome, e.g. with Prokka .","title":"What Next?"},{"location":"scrapbook/dna/denovo/hgap/","text":"HGAP this means SMRT Suite Assembly with PacBio data PacBio is a company that uses a technology called single molecule real time (SMRT) sequencing. This produces very long sequencing reads (up to xx?). These raw sequencing reads can be assembled into genomes by using the software from PacBio, called the SMRT Portal. link: http://www.pacb.com/smrt-science/ link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/ info: https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Large-Genome-Assembly-with-PacBio-Long-Reads Background: assembly galaxy cmdline? Start Open your GVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on Install . (Note: you will need 16 cores in your GVL). open up the link and log on (create a username and password I think) FIXME Sepsis Data e.g. https://downloads-qcif.bioplatforms.com/bpa/sepsis/pacbio/ e.g. one sample it will be split into three files ? for each sample: need the bas file? and the xml but not the subreads bas.h5 Reference Guide (PDF): Describes the main output files produced by the primary analysis pipeline: bas.h5,.1.bax.h5, .2.bax.h5, and .3.bax.h5. The bax.h5 files contain base call information from the sequencing run. The bas.h5 file is essentially a pointer to the three bax.h5 files. Metadata Output Guide (PDF): Describes the file metadata.xml, which contains top-level information about the data, including what sequencing enzyme and chemistry were used, sample name, and other metadata. which files to put over into sepsis gvl Input data from here [link] Import and Manage Import SMRT cells: SMRT Cells shows file paths that are searched add (so should have made folder, put smrt cells data in there, and then tell it this path using add ) How it works The PacBio SMRT analysis software: de novo assembly. link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/analysis-applications/de-novo-assembly/ Several options, but for example HGAP + BridgeMapper: RS_HGAP Assembly.3 pre-assembly de novo assembly with AssembleUnitig finalise assembly with Quiver RS_Bridgemapper assesses assembly quality by comparing to a reference genome. Run give job name and comments choose a protocol click on the data you want (how to get in) and then arrow to transfer it to right pane run click on the monitor tab as it runs, new items will appear on the left hand side under reports, e.g. starting with filtering graphs will appear for some items, e.g. mapped subread length, what does it mean new data sets will appear under on the left hand side under data eg polished assembly fastq. click on top right corner - log (to check for anything?) Output when finished, go to view data tab; click on job name, open (what is SMRT view? another option) shows all reports and data files e.g. assembled genome download any or leave in here? main assembly parameters /reports - what to check how do you know assembly is good https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Finishing-Bacterial-Genomes good detail in here Next Links to more information","title":"HGAP"},{"location":"scrapbook/dna/denovo/hgap/#hgap","text":"this means SMRT Suite Assembly with PacBio data PacBio is a company that uses a technology called single molecule real time (SMRT) sequencing. This produces very long sequencing reads (up to xx?). These raw sequencing reads can be assembled into genomes by using the software from PacBio, called the SMRT Portal. link: http://www.pacb.com/smrt-science/ link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/ info: https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Large-Genome-Assembly-with-PacBio-Long-Reads Background: assembly galaxy cmdline? Start Open your GVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on Install . (Note: you will need 16 cores in your GVL). open up the link and log on (create a username and password I think) FIXME Sepsis Data e.g. https://downloads-qcif.bioplatforms.com/bpa/sepsis/pacbio/ e.g. one sample it will be split into three files ? for each sample: need the bas file? and the xml but not the subreads bas.h5 Reference Guide (PDF): Describes the main output files produced by the primary analysis pipeline: bas.h5,.1.bax.h5, .2.bax.h5, and .3.bax.h5. The bax.h5 files contain base call information from the sequencing run. The bas.h5 file is essentially a pointer to the three bax.h5 files. Metadata Output Guide (PDF): Describes the file metadata.xml, which contains top-level information about the data, including what sequencing enzyme and chemistry were used, sample name, and other metadata. which files to put over into sepsis gvl Input data from here [link] Import and Manage Import SMRT cells: SMRT Cells shows file paths that are searched add (so should have made folder, put smrt cells data in there, and then tell it this path using add ) How it works The PacBio SMRT analysis software: de novo assembly. link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/analysis-applications/de-novo-assembly/ Several options, but for example HGAP + BridgeMapper: RS_HGAP Assembly.3 pre-assembly de novo assembly with AssembleUnitig finalise assembly with Quiver RS_Bridgemapper assesses assembly quality by comparing to a reference genome. Run give job name and comments choose a protocol click on the data you want (how to get in) and then arrow to transfer it to right pane run click on the monitor tab as it runs, new items will appear on the left hand side under reports, e.g. starting with filtering graphs will appear for some items, e.g. mapped subread length, what does it mean new data sets will appear under on the left hand side under data eg polished assembly fastq. click on top right corner - log (to check for anything?) Output when finished, go to view data tab; click on job name, open (what is SMRT view? another option) shows all reports and data files e.g. assembled genome download any or leave in here? main assembly parameters /reports - what to check how do you know assembly is good https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Finishing-Bacterial-Genomes good detail in here Next Links to more information","title":"HGAP"},{"location":"scrapbook/dna/denovo/megahit/","text":"Megahit cmdline This tutorial demonstrates how to assemble genomic reads from bacteria found in environmental samples. [FIXME: is that correct?] Megahit on Github Pre-requisites mGVL instance knowledge: cmdline knowledge: metagenomics Start open your mGVL in terminal make a folder for the Megahit analsyses: mkdir Megahit move into this folder: cd Megahit Input data We will use Illumina paired-end reads from several species [FIXME?] Run Megahit megahit [options] R1reads.fastq R2reads.fastq Output Next More information","title":"Megahit"},{"location":"scrapbook/dna/denovo/megahit/#megahit","text":"cmdline This tutorial demonstrates how to assemble genomic reads from bacteria found in environmental samples. [FIXME: is that correct?] Megahit on Github","title":"Megahit"},{"location":"scrapbook/dna/denovo/megahit/#pre-requisites","text":"mGVL instance knowledge: cmdline knowledge: metagenomics","title":"Pre-requisites"},{"location":"scrapbook/dna/denovo/megahit/#start","text":"open your mGVL in terminal make a folder for the Megahit analsyses: mkdir Megahit move into this folder: cd Megahit","title":"Start"},{"location":"scrapbook/dna/denovo/megahit/#input-data","text":"We will use Illumina paired-end reads from several species [FIXME?]","title":"Input data"},{"location":"scrapbook/dna/denovo/megahit/#run-megahit","text":"megahit [options] R1reads.fastq R2reads.fastq","title":"Run Megahit"},{"location":"scrapbook/dna/denovo/megahit/#output","text":"","title":"Output"},{"location":"scrapbook/dna/denovo/megahit/#next","text":"","title":"Next"},{"location":"scrapbook/dna/denovo/megahit/#more-information","text":"","title":"More information"},{"location":"scrapbook/dna/denovo/pacbio/","text":"PacBio SMRT Portal This tutorial will show you how to assemble a bacterial genome de novo, using the PacBio SMRT Portal. Link to PacBio analysis software Pre-requisites mGVL instance with 16 cores (FIXME: will people have this - if not, note how they can request it) knowledge: de novo assembly Start Open your mGVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on Install . You should see SMRT Portal as one of the instance services on your GVL dashboard. Open up the SMRT portal web link (to the right) and register/log on. How it works RS_HGAP_Assembly.3 Protocol Filters short and poor-quality reads. Large insert (fragment) sizes = single pass long reads (but these have lower quality) and/or small insert (fragment) sizes = cut adapters and assemble subreads = Circular Consensus Sequence (CSS) reads (higher quality) Pre-assembly e.g. with Canu Polishes assembly e.g. with Quiver (joins contigs/scaffolds?) Corrections Input Choose your data. (FIXME: e.g. on GenomeSpace?) Get the data you want to use onto your mGVL. (FIXME: explain how?) In the SMRT Portal, go to Design Job , the top left tab. Go to Import and Manage: Import SMRT cells: SMRT Cells . Work out where you put the data on your GVL, and make sure the file path is showing. If not, click Add and list the file path to the data. Click on the file path and then Scan to check for new data. Run Go back to the top tab Design Job . Go to Create New . An Analysis window should appear. Check the box next to De novo assembly , then Next . Under Job Name enter a name. Under Protocols choose RS_HGAP_Assembly.3 . There is an ellipsis underneath Protocols - click on the ellipsis. This brings up the settings. Leave everything as is, except for: Click on Assembly . Change the Genome Size to an approximately correct size for the sample. Click Ok . In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window. Click Save . Next to Save , click Start . The Monitor Jobs window should open. As each step proceeds, new items will appear under the Reports and Data tabs on the left. Click on each of these items to see the details and graphs available, which will appear in the main pane. The default display in the main pane is Overview . FIXME: how long will it take for this example data. Output The current running jobs will be under the Monitor Jobs tab. Click on the job to see the reports and data. The finished jobs will be under the View Data tab. A full ist of reports and terminology is here Reports: General: Filtering : look at the table showing the pre-filter and post-filter information. FIXME: what are other graphs showing / why are there mapping/coverage graphs if a ref genome wasn t supplied? FIXME: what are the files under Data for - further analyses later? where would these be saved if we want to use later. BAM and BAI files: view reads aligned to assembly (IGV) Next Check assembly quality: for example, align to the same species in Mauve. Links to more information: Finishing bacterial genomes","title":"PacBio SMRT Portal"},{"location":"scrapbook/dna/denovo/pacbio/#pacbio-smrt-portal","text":"This tutorial will show you how to assemble a bacterial genome de novo, using the PacBio SMRT Portal. Link to PacBio analysis software","title":"PacBio SMRT Portal"},{"location":"scrapbook/dna/denovo/pacbio/#pre-requisites","text":"mGVL instance with 16 cores (FIXME: will people have this - if not, note how they can request it) knowledge: de novo assembly","title":"Pre-requisites"},{"location":"scrapbook/dna/denovo/pacbio/#start","text":"Open your mGVL dashboard. Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on Install . You should see SMRT Portal as one of the instance services on your GVL dashboard. Open up the SMRT portal web link (to the right) and register/log on.","title":"Start"},{"location":"scrapbook/dna/denovo/pacbio/#how-it-works","text":"RS_HGAP_Assembly.3 Protocol Filters short and poor-quality reads. Large insert (fragment) sizes = single pass long reads (but these have lower quality) and/or small insert (fragment) sizes = cut adapters and assemble subreads = Circular Consensus Sequence (CSS) reads (higher quality) Pre-assembly e.g. with Canu Polishes assembly e.g. with Quiver (joins contigs/scaffolds?) Corrections","title":"How it works"},{"location":"scrapbook/dna/denovo/pacbio/#input","text":"Choose your data. (FIXME: e.g. on GenomeSpace?) Get the data you want to use onto your mGVL. (FIXME: explain how?) In the SMRT Portal, go to Design Job , the top left tab. Go to Import and Manage: Import SMRT cells: SMRT Cells . Work out where you put the data on your GVL, and make sure the file path is showing. If not, click Add and list the file path to the data. Click on the file path and then Scan to check for new data.","title":"Input"},{"location":"scrapbook/dna/denovo/pacbio/#run","text":"Go back to the top tab Design Job . Go to Create New . An Analysis window should appear. Check the box next to De novo assembly , then Next . Under Job Name enter a name. Under Protocols choose RS_HGAP_Assembly.3 . There is an ellipsis underneath Protocols - click on the ellipsis. This brings up the settings. Leave everything as is, except for: Click on Assembly . Change the Genome Size to an approximately correct size for the sample. Click Ok . In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window. Click Save . Next to Save , click Start . The Monitor Jobs window should open. As each step proceeds, new items will appear under the Reports and Data tabs on the left. Click on each of these items to see the details and graphs available, which will appear in the main pane. The default display in the main pane is Overview . FIXME: how long will it take for this example data.","title":"Run"},{"location":"scrapbook/dna/denovo/pacbio/#output","text":"The current running jobs will be under the Monitor Jobs tab. Click on the job to see the reports and data. The finished jobs will be under the View Data tab. A full ist of reports and terminology is here Reports: General: Filtering : look at the table showing the pre-filter and post-filter information. FIXME: what are other graphs showing / why are there mapping/coverage graphs if a ref genome wasn t supplied? FIXME: what are the files under Data for - further analyses later? where would these be saved if we want to use later. BAM and BAI files: view reads aligned to assembly (IGV)","title":"Output"},{"location":"scrapbook/dna/denovo/pacbio/#next","text":"Check assembly quality: for example, align to the same species in Mauve.","title":"Next"},{"location":"scrapbook/dna/denovo/pacbio/#links-to-more-information","text":"Finishing bacterial genomes","title":"Links to more information:"},{"location":"scrapbook/dna/denovo/spades/","text":"Spades - command line FIXME: add general info about spades (copy from galaxy-spades) Start open your mGVL (e.g. via ssh in terminal) check spades is installed: which spades the path to spades should appear FIXME: it s already loaded? seems to work make a new directory for these analyses: mkdir spades copy the read files into your mGVL e.g. R1.fastq and R2.fastq (e.g. download from the galaxy workshops) in terminal, navigate to the folder containing these files scp file names user@mGVL:/path to put data Run spades spades.py -1 R1.fastq -2 R2.fastq -k 33,55,77 -o output Output Go to the folder called output contigs.fasta scaffolds.fasta assembly_graph.fastg subfolder: corrected reads [FIXME explain] What next? view assembly_graph.fasta in Bandage generate summary statistics with Quast","title":"Spades - command line"},{"location":"scrapbook/dna/denovo/spades/#spades-command-line","text":"FIXME: add general info about spades (copy from galaxy-spades)","title":"Spades - command line"},{"location":"scrapbook/dna/denovo/spades/#start","text":"open your mGVL (e.g. via ssh in terminal) check spades is installed: which spades the path to spades should appear FIXME: it s already loaded? seems to work make a new directory for these analyses: mkdir spades copy the read files into your mGVL e.g. R1.fastq and R2.fastq (e.g. download from the galaxy workshops) in terminal, navigate to the folder containing these files scp file names user@mGVL:/path to put data","title":"Start"},{"location":"scrapbook/dna/denovo/spades/#run-spades","text":"spades.py -1 R1.fastq -2 R2.fastq -k 33,55,77 -o output","title":"Run spades"},{"location":"scrapbook/dna/denovo/spades/#output","text":"Go to the folder called output contigs.fasta scaffolds.fasta assembly_graph.fastg subfolder: corrected reads [FIXME explain]","title":"Output"},{"location":"scrapbook/dna/denovo/spades/#what-next","text":"view assembly_graph.fasta in Bandage generate summary statistics with Quast","title":"What next?"},{"location":"scrapbook/dna/denovo/velvet/","text":"Velvet cmdline","title":"Velvet"},{"location":"scrapbook/dna/denovo/velvet/#velvet","text":"cmdline","title":"Velvet"},{"location":"scrapbook/dna/denovo/vopt/","text":"Velvet cmdline","title":"Velvet"},{"location":"scrapbook/dna/denovo/vopt/#velvet","text":"cmdline","title":"Velvet"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/","text":"Galaxy - Velvet Modified from LSCC tutorial by Simon Gladman - VLSCI Tutorial Overview In this tutorial we cover the concepts of Microbial de novo assembly using a very small synthetic dataset from a well studied organism. Background Where is the data in this tutorial from? The data for this tutorial is from a whole genome sequencing experiment of a multi-drug resistant strain of the bacterium Staphylococcus aureus . The DNA was sequenced using an Illumina GAII sequencing machine. The data we are going to use consists of about 4 million x 75 base-pair, paired end reads (two FASTQ read files, one for each end of a DNA fragment.) The data was downloaded from the NCBI Short Read Archive (SRA) (http://www.ncbi.nlm.nih.gov/sra/). The specific sample is a public dataset published in April 2012 with SRA accession number ERR048396. We will also use a FASTA file containing the sequences of the Illumina adapters used in the sequencing process. It is desirable to remove these as they are artificial sequences and not part of the bacterium that was sequenced. We will use software called Velvet (Zerbino et al 2008) for the main de novo assembly, as well as some other peripheral software for pre- and post-processing of the data. Details of these can be found in the background document linked above. The protocol: We are performing a de novo assembly of the read data into contigs and then into scaffolds (appropriately positioned contigs loosely linked together). We firstly need to check the quality of the input data as this will help us choose the most appropriate range of input parameters for the assembly and will guide us on an appropriate quality trimming/cleanup strategy. We will then use an iterative method to assemble the reads using the Velvet Optimiser (a program that performs lots of Velvet assemblies searching for an optimum outcome.) Once this is complete we will obtain summary statistics on the final results (contigs) of the assembly. More information about this protocol at the end of this tutorial. The protocol in a nutshell: Input: Raw reads from sequencer run on microbial DNA sample. Output: File of assembled scaffolds/contigs and associated information. Input data On the Galaxy tools panel, click on Get data - Upload File . Click on the Paste/Fetch Data button. Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_1.fastq.gz into the text box. Change the type to fastqsanger (Not fastqcsanger ). Click on the Paste/Fetch Data button again. Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_2.fastq.gz into the text box and change it s type to fastqsanger as well. Repeat the process for the last URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/illumina_adapters.fna , but make it s type fasta Click on the Start button. Once all of the uploads are at 100%, click on the Close button. When the files have finished uploading, rename them to \u2018ERR048396_1.fastq\u2019, \u2018ERR048396_2.fastq\u2019 and \u2018illumina_adapters.fna\u2019 respectively by clicking on the icon to the top right of the file name in the right hand Galaxy panel (the history panel) You should now have the following files in your Galaxy history: ERR048396_1.fastq - forward reads in fastq format ERR048396_2.fastq - reverse reads in fastq format illumina_adapters.fa - Illumina adapter sequences in fasta format Click on the icon to the top right of each fastq file to view the first part of the file Section 1: Quality control The basic process here is to collect statistics about the quality of the reads in the sample FASTQ readsets. We will then evaluate their quality and choose an appropriate regime for quality filtering using Trimmomatic (a FASTQ read quality trimmer.) Run FastQC on both input read files From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation FastQC: Comprehensive QC (down the bottom of this category) and run with these parameters: FASTQ reads : ERR048396_1.fastq Use default for other fields Click Execute Now repeat the above process on the second read file: ERR048396_2.fastq It is important to do both read files as the quality can be very different between them. Figure 1: Screenshot of FastQC interface in Galaxy Examine the FastQC output You should have two output objects from the first step: FastQC_ERR048396_1.fastqc.html FastQC_ERR048396_2.fastqc.html These are a html outputs which show the results of all of the tests FastQC performed on the read files. Click on the icon of each of these objects in turn to see the FastQC output. The main parts of the output to evaluate are: Basic statistics. This section tells us that the ASCII quality encoding format used was Sanger/Illumina 1.9 and the reads are length 75 and the percent GC content of the entire file is 35%. Per base sequence quality. In the plot you should see that most of the early bases are up around the 32 mark and then increase to 38-40, which is very high quality; The spread of quality values for the last few bases increases and some of the outliers have quality scores of less than 30. This is a very good quality dataset. 20 is often used as a cutoff for reliable quality. Figure 2: Screenshot of FastQC output in Galaxy Quality trim the reads using Trimmomatic. From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation Trimmomatic and run with these parameters (only the non-default selections are listed here): Input FASTQ file (R1/first of pair) : ERR048396_1.fastq Input FASTQ file (R2/second of pair) : ERR048396_2.fastq Perform initial ILLUMINACLIP step? : Yes Adapter sequences to use : TruSeq3 (additional seqs) (paired end, for MiSeq and HiSeq) How accurate read alignment : 40 How accurate against a read : 15 We will use the default settings for the SLIDING_WINDOW operation but we need to add a few more Trimmomatic operations. Click Insert Trimmomatic Operation Add Cut bases (LEADING) Minimum quality required to keep a base : 15 Repeat the Insert Trimmomatic Operation for: Trim trailing bases, minimum quality: 15 Minimum length read: 35 Click Execute Figure 3: Screenshot of Trimmomatic inputs in Galaxy Examine the Trimmomatic output FastQ files. You should have 4 new objects in your history from the output of Trimmomatic: Trimmomatic on data 2 and data 1 (R1 Paired) Trimmomatic on data 2 and data 1 (R1 Unpaired) Trimmomatic on data 2 and data 1 (R2 Paired) Trimmomatic on data 2 and data 1 (R2 Unpaired) Click on the on one of the objects to look at its contents. You\u2019ll notice that not all of the reads are the same length now, as they have had the illumina adapters cut out of them and they\u2019ve been quality trimmed. Section 2: Assemble reads into contigs with Velvet and the Velvet Optimiser The aim here is to assemble the trimmed reads into contigs/scaffolds using Velvet and the Velvet Optimiser. We will use a single tool, Velvet Optimiser, which takes the trimmed reads from Trimmomatic and performs numerous Velvet assemblies to find the best one. We need to add the reads in two separate libraries. One for the still paired reads and the other for the singleton reads orphaned from their pairs by the trimming process. Click here for a more detailed explanation of Velvet assemblies and the Velvet Optimiser De novo assembly of the reads into contigs From the tools menu in the left hand panel of Galaxy, select NGS: Assembly - Velvet Optimiser and run with these parameters (only the non-default selections are listed here): Start k-mer value : 55 End k-mer value : 69 In the input files section: Select first set of reads : Trimmomatic on data 2 and data 1 (R1 paired) Select second set of reads : Trimmomatic on data 2 and data 1 (R2 paired) Click the Insert Input Files button and add the following: Single or paired end reads : Single Select the reads : Trimmomatic on data 2 and data 1 (R1 unpaired) Repeat the above process to add the other unpaired read set Trimmomatic on data 2 and data 1 (R2 unpaired) as well. Click Execute . Figure 4: Screenshot of Velvet Optimiser inputs in Galaxy Examine assembly output Once step 1 is complete, you should now have 2 new objects in your history: VelvetOptimiser on data 9, data 7, and others: Contigs VelvetOptimiser on data 9, data 7, and others: Contig Stats Click on the icon of the various objects. Contigs: You\u2019ll see the first MB of the file. Note that the contigs are named NODE_XX_length_XXXX_cov_XXX.XXX. This information tells you how long (in k-mer length) each contig is and what it\u2019s average k-mer coverage is. (See detailed explanation of Velvet and Velvet Optimiser for explanation of k-mer coverage and k-mer length.) Contig stats: This shows a table of the contigs and their k-mer coverages and which read library contributed to the coverage. It is interesting to note that some of them have much higher coverage than the average. These are most likely to be repeated contigs. (Things like ribosomal RNA and IS elements.) Figure 5: Screenshot of assembled contigs (a) and contig stats (b) a b Calculate some statistics on the assembled contigs From the tools menu in the left hand panel of Galaxy, select FASTA Manipulation - Fasta Statistics and run with these parameters: Fasta or multifasta file : Velvet Optimiser Contigs Click Execute Examine the Fasta Stats output You should now have one more object in your history: Fasta Statistics on data 10: Fasta summary stats Click on the icon next to this object and have a look at the output. You\u2019ll see a statistical summary of the contigs including various length stats, the % GC content, the n50 as well as the number of contigs and the number of N bases contained in them. Section 3: Extension. Examine the contig coverage depth and blast a high coverage contig against a protein database. Examine the contig coverage depth. Look at the Contig Stats data (Velvet Optimiser vlsci on data 8, data 9, and data 7: Contig stats) by clicking on the icon. Note that column 2 contig length (lgth), shows a number of very short contigs (some are length 1). We can easily filter out these short contigs from this information list by using the Filter and Sort - Filter tool. Set the following: Filter : Velvet Optimiser on data 8, data 7 and others: Contig stats With the following condition : c2 100 Click Execute The new data object in the history is called: Filter on data 11 . Click on its icon to view it. Look through the list taking note of the coverages. Note that the average of the coverages (column 6) seems to be somewhere between 16 and 32. There are a lot of contigs with coverage 16. We could say that these contigs only appear once in the genome of the bacteria. Therefore, contigs with double this coverage would appear twice. Note that some of the coverages are 400! These contigs will appear in the genome more than 20 times! Lets have a look at one of these contigs and see if we can find out what it is. Extract a single sequence from the contigs file. Note the contig number (column 1 in the Contig stats file) of a contig with a coverage of over 300. There should be a few of them. We need to extract the fasta sequence of this contig from the contigs multifasta so we can see it more easily. To do this we will use the tool: Fasta manipulation - Fasta Extract Sequence Set the following: Fasta or multifasta file : Velvet Optimiser : Contigs Sequence ID (or partial): NODE_1_ (for example) Click Execute The new data object in the history is called: Fasta Extract Sequence on data 10: Fasta . Click on its icon to view it. It is a single sequence in fasta format. Blast sequence to determine what it contains. We want to find out what this contig is or what kind of coding sequence (if any) it contains. So we will blast the sequence using the NCBI blast website. (External to Galaxy). To do this: Bring up the sequence of the contig into the main window of the browser by clicking on the icon if it isn\u2019t already. Select the entire sequence by clicking and dragging with the mouse or by pressing ctrl-a in the browser. Copy the selected sequence to the clipboard. Open a new tab of your browser and point it to: http://blast.ncbi.nlm.nih.gov/Blast.cgi Under the BASIC BLAST section, click \u201cblastx\u201d. Paste the sequence into the large text box labelled: Enter Accession number(s), gi(s) or FASTA sequence(s). Change the Genetic code to: Bacteria and Archaea (11) Click the button labelled: BLAST After a while the website will present a report of the blast run. Note that the sequence we blasted (if you chose NODE_1) is identical to part of a transposase gene (IS256) from a similar Staphylococcus aureus bacteria. These transposases occur frequently as repeats in bacterial genomes and so we shouldn\u2019t be surprised at its very high coverage. Figure 6: Screenshot of the output from the NCBI Blast website De novo assembly with Velvet and the Velvet Optimiser. Velvet Velvet is software to perform dna assembly from short reads by manipulating de Bruijn graphs. It is capable of forming long contigs (n50 of in excess of 150kb) from paired end short reads. It has several input parameters for controlling the structure of the de Bruijn graph and these must be set optimally to get the best assembly possible. Velvet can read Fasta, FastQ, sam or bam files. However, it ignores any quality scores and simply relies on sequencing depth to resolve errors. The Velvet Optimiser software performs many Velvet assemblies with various parameter sets and searches for the optimal assembly automatically. de Bruijn graphs A de Bruijn graph is a directed graph which represents overlaps between sequences of symbols. The size of the sequence contained in the nodes of the graph is called the word-length or k-mer size. In Figure 2, the word length is 3. The two symbols are 1 and 0. Each node in the graph has the last two symbols of the previous node and 1 new symbol. Sequences of symbols can be produced by traversing the graph and adding the \u201cnew\u201d symbol to the growing sequence. Figure 2: A de Bruijn graph of word length 3 for the symbols 1 and 0. From: https://cameroncounts.wordpress.com/2015/02/28/1247/ Velvet constructs a de Bruijn graph of the reads. It has 4 symbols (A, C, G and T - N\u2019s are converted to A\u2019s) The word length (or k-mer size) is one of Velvet\u2019s prime parameters. Velvet is not the only assembly software that works in this manner. Euler, Edena and SOAP de novo are examples of others. The Velvet algorithm Step 1: Hashing the reads. Velvet breaks up each read into k-mers of length k. A k-mer is a k length subsequence of the read. A 36 base pair long read would have 6 different 31-mers. The k-mers and their reverse complements are added to a hash table to categorize them. Each k-mer is stored once but the number of times it appears is also recorded. This step is performed by \u201cvelveth\u201d - one of the programs in the Velvet suite. Step 2: Constructing the de Bruijn graph. Velvet adds the k-mers one-by-one to the graph. Adjacent k-mers overlap by k-1 nucleotides. A k-mer which has no k-1 overlaps with any k-mer already on the graph starts a new node. Each node stores the average number of times its k-mers appear in the hash table. Figure 3 shows a section of a de Bruijn graph constructed by Velvet for k=5. Different sequences can be read off the graph by following a different path through it. (Figure 3) Figure 3: Section of a simple de Bruijn graph of reads with k-mer size 5. Coloured sequences are constructed by following the appropriately coloured line through the graph. (Base figure Zerbino et al 2008.) Step 3: Simplification of the graph. Chain merging: When there are two connected nodes in the graph without a divergence, merge the two nodes. Tip clipping: Tips are short (typically) chains of nodes that are disconnected on one end. They will be clipped if their length is 2 x k or their average k-mer depth is much less than the continuing path. Bubble removal: Bubbles are redundant paths that start and end at the same nodes (Figure 4.) They are created by sequencing errors, biological variants or slightly varying repeat sequences. Velvet compares the paths using dynamic programming. If they are highly similar, the paths are merged. Error removal: Erroneous connections are removed by using a \u201ccoverage cutoff\u201d. Genuine short nodes which cannot be simplified should have a high coverage. An attempt is made to resolve repeats using the \u201cexpected coverage\u201d of the graph nodes. Paired end read information: Velvet uses algorithms called \u201cPebble\u201d and \u201cRock Band\u201d (Zerbino et al 2009) to order the nodes with respect to one another in order to scaffold them into longer contigs. Figure 4: Representation of \u201cbubbles\u201d in a Velvet de Bruijn graph. (Base figure Zerbino et al 2008.) Step 4: Read off the contigs. Follow the chains of nodes through the graph and \u201cread off\u201d the bases to create the contigs. Where there is an ambiguous divergence/convergence, stop the current contig and start a new one. K-mer size and coverage cutoff values The size of the k-mers that construct the graph is very important and has a large effect on the outcome of the assembly. Generally, small k-mers create a graph with increased connectivity, more ambiguity (more divergences) and less clear \u201cpaths\u201d through the graph. Large k-mers produce graphs with less connectivity but higher specificity. The paths through the graph are clearer but they are less connected and prone to breaking down. The coverage cutoff c used during the error correction step of Velvet also has a significant effect on the output of the assembly process. If c is too low, the assembly will contain nodes of the graph that are the product of sequencing errors and misconnections. If c is too high, it can create mis-assemblies in the contigs and destroys lots of useful data. Each dataset has its own optimum values for the k-mer size and the coverage cutoff used in the error removal step. Choosing them appropriately is one of the challenges faced by new users of the Velvet software. Velvet Optimiser The Velvet Optimiser chooses the optimal values for k and c automatically by performing many runs of Velvet (partially in parallel) and interrogating the subsequent assemblies. It uses different optimisation functions for k and c and these can be user controlled. It requires the user to input a range of k values to search (to cut down on running time). References http://en.wikipedia.org/wiki/Sequence_assembly Zerbino DR, Birney E, Velvet: algorithms for de novo short read assembly using de Bruijn graphs, Genome Research, 2008, 18:821-829 Zerbino DR, McEwen GK, Margulies EH, Birney E, Pebble and rock band: heuristic resolution of repeats and scaffolding in the velvet short-read de novo assembler. PLoS One. 2009; 4(12):e8407. Gladman SL, Seemann T, Velvet Optimiser, http://www.vicbioinformatics.com/software.shtml 2009.","title":"Galaxy - Velvet"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#galaxy-velvet","text":"Modified from LSCC tutorial by Simon Gladman - VLSCI","title":"Galaxy - Velvet"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#tutorial-overview","text":"In this tutorial we cover the concepts of Microbial de novo assembly using a very small synthetic dataset from a well studied organism.","title":"Tutorial Overview"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#background","text":"Where is the data in this tutorial from? The data for this tutorial is from a whole genome sequencing experiment of a multi-drug resistant strain of the bacterium Staphylococcus aureus . The DNA was sequenced using an Illumina GAII sequencing machine. The data we are going to use consists of about 4 million x 75 base-pair, paired end reads (two FASTQ read files, one for each end of a DNA fragment.) The data was downloaded from the NCBI Short Read Archive (SRA) (http://www.ncbi.nlm.nih.gov/sra/). The specific sample is a public dataset published in April 2012 with SRA accession number ERR048396. We will also use a FASTA file containing the sequences of the Illumina adapters used in the sequencing process. It is desirable to remove these as they are artificial sequences and not part of the bacterium that was sequenced. We will use software called Velvet (Zerbino et al 2008) for the main de novo assembly, as well as some other peripheral software for pre- and post-processing of the data. Details of these can be found in the background document linked above. The protocol: We are performing a de novo assembly of the read data into contigs and then into scaffolds (appropriately positioned contigs loosely linked together). We firstly need to check the quality of the input data as this will help us choose the most appropriate range of input parameters for the assembly and will guide us on an appropriate quality trimming/cleanup strategy. We will then use an iterative method to assemble the reads using the Velvet Optimiser (a program that performs lots of Velvet assemblies searching for an optimum outcome.) Once this is complete we will obtain summary statistics on the final results (contigs) of the assembly. More information about this protocol at the end of this tutorial. The protocol in a nutshell: Input: Raw reads from sequencer run on microbial DNA sample. Output: File of assembled scaffolds/contigs and associated information.","title":"Background"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#input-data","text":"On the Galaxy tools panel, click on Get data - Upload File . Click on the Paste/Fetch Data button. Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_1.fastq.gz into the text box. Change the type to fastqsanger (Not fastqcsanger ). Click on the Paste/Fetch Data button again. Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_2.fastq.gz into the text box and change it s type to fastqsanger as well. Repeat the process for the last URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/illumina_adapters.fna , but make it s type fasta Click on the Start button. Once all of the uploads are at 100%, click on the Close button. When the files have finished uploading, rename them to \u2018ERR048396_1.fastq\u2019, \u2018ERR048396_2.fastq\u2019 and \u2018illumina_adapters.fna\u2019 respectively by clicking on the icon to the top right of the file name in the right hand Galaxy panel (the history panel) You should now have the following files in your Galaxy history: ERR048396_1.fastq - forward reads in fastq format ERR048396_2.fastq - reverse reads in fastq format illumina_adapters.fa - Illumina adapter sequences in fasta format Click on the icon to the top right of each fastq file to view the first part of the file","title":"Input data"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-1-quality-control","text":"The basic process here is to collect statistics about the quality of the reads in the sample FASTQ readsets. We will then evaluate their quality and choose an appropriate regime for quality filtering using Trimmomatic (a FASTQ read quality trimmer.)","title":"Section 1: Quality control"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#run-fastqc-on-both-input-read-files","text":"From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation FastQC: Comprehensive QC (down the bottom of this category) and run with these parameters: FASTQ reads : ERR048396_1.fastq Use default for other fields Click Execute Now repeat the above process on the second read file: ERR048396_2.fastq It is important to do both read files as the quality can be very different between them.","title":"Run FastQC on both input read files"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-1-screenshot-of-fastqc-interface-in-galaxy","text":"","title":"Figure 1: Screenshot of FastQC interface in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-fastqc-output","text":"You should have two output objects from the first step: FastQC_ERR048396_1.fastqc.html FastQC_ERR048396_2.fastqc.html These are a html outputs which show the results of all of the tests FastQC performed on the read files. Click on the icon of each of these objects in turn to see the FastQC output. The main parts of the output to evaluate are: Basic statistics. This section tells us that the ASCII quality encoding format used was Sanger/Illumina 1.9 and the reads are length 75 and the percent GC content of the entire file is 35%. Per base sequence quality. In the plot you should see that most of the early bases are up around the 32 mark and then increase to 38-40, which is very high quality; The spread of quality values for the last few bases increases and some of the outliers have quality scores of less than 30. This is a very good quality dataset. 20 is often used as a cutoff for reliable quality.","title":"Examine the FastQC output"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-2-screenshot-of-fastqc-output-in-galaxy","text":"","title":"Figure 2: Screenshot of FastQC output in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#quality-trim-the-reads-using-trimmomatic","text":"From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation Trimmomatic and run with these parameters (only the non-default selections are listed here): Input FASTQ file (R1/first of pair) : ERR048396_1.fastq Input FASTQ file (R2/second of pair) : ERR048396_2.fastq Perform initial ILLUMINACLIP step? : Yes Adapter sequences to use : TruSeq3 (additional seqs) (paired end, for MiSeq and HiSeq) How accurate read alignment : 40 How accurate against a read : 15 We will use the default settings for the SLIDING_WINDOW operation but we need to add a few more Trimmomatic operations. Click Insert Trimmomatic Operation Add Cut bases (LEADING) Minimum quality required to keep a base : 15 Repeat the Insert Trimmomatic Operation for: Trim trailing bases, minimum quality: 15 Minimum length read: 35 Click Execute","title":"Quality trim the reads using Trimmomatic."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-3-screenshot-of-trimmomatic-inputs-in-galaxy","text":"","title":"Figure 3: Screenshot of Trimmomatic inputs in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-trimmomatic-output-fastq-files","text":"You should have 4 new objects in your history from the output of Trimmomatic: Trimmomatic on data 2 and data 1 (R1 Paired) Trimmomatic on data 2 and data 1 (R1 Unpaired) Trimmomatic on data 2 and data 1 (R2 Paired) Trimmomatic on data 2 and data 1 (R2 Unpaired) Click on the on one of the objects to look at its contents. You\u2019ll notice that not all of the reads are the same length now, as they have had the illumina adapters cut out of them and they\u2019ve been quality trimmed.","title":"Examine the Trimmomatic output FastQ files."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-2-assemble-reads-into-contigs-with-velvet-and-the-velvet-optimiser","text":"The aim here is to assemble the trimmed reads into contigs/scaffolds using Velvet and the Velvet Optimiser. We will use a single tool, Velvet Optimiser, which takes the trimmed reads from Trimmomatic and performs numerous Velvet assemblies to find the best one. We need to add the reads in two separate libraries. One for the still paired reads and the other for the singleton reads orphaned from their pairs by the trimming process. Click here for a more detailed explanation of Velvet assemblies and the Velvet Optimiser","title":"Section 2: Assemble reads into contigs with Velvet and the Velvet Optimiser"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-novo-assembly-of-the-reads-into-contigs","text":"From the tools menu in the left hand panel of Galaxy, select NGS: Assembly - Velvet Optimiser and run with these parameters (only the non-default selections are listed here): Start k-mer value : 55 End k-mer value : 69 In the input files section: Select first set of reads : Trimmomatic on data 2 and data 1 (R1 paired) Select second set of reads : Trimmomatic on data 2 and data 1 (R2 paired) Click the Insert Input Files button and add the following: Single or paired end reads : Single Select the reads : Trimmomatic on data 2 and data 1 (R1 unpaired) Repeat the above process to add the other unpaired read set Trimmomatic on data 2 and data 1 (R2 unpaired) as well. Click Execute .","title":"De novo assembly of the reads into contigs"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-4-screenshot-of-velvet-optimiser-inputs-in-galaxy","text":"","title":"Figure 4: Screenshot of Velvet Optimiser inputs in Galaxy"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-assembly-output","text":"Once step 1 is complete, you should now have 2 new objects in your history: VelvetOptimiser on data 9, data 7, and others: Contigs VelvetOptimiser on data 9, data 7, and others: Contig Stats Click on the icon of the various objects. Contigs: You\u2019ll see the first MB of the file. Note that the contigs are named NODE_XX_length_XXXX_cov_XXX.XXX. This information tells you how long (in k-mer length) each contig is and what it\u2019s average k-mer coverage is. (See detailed explanation of Velvet and Velvet Optimiser for explanation of k-mer coverage and k-mer length.) Contig stats: This shows a table of the contigs and their k-mer coverages and which read library contributed to the coverage. It is interesting to note that some of them have much higher coverage than the average. These are most likely to be repeated contigs. (Things like ribosomal RNA and IS elements.)","title":"Examine assembly output"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-5-screenshot-of-assembled-contigs-a-and-contig-stats-b","text":"","title":"Figure 5: Screenshot of assembled contigs (a) and contig stats (b)"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#a","text":"","title":"a"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#b","text":"","title":"b"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#calculate-some-statistics-on-the-assembled-contigs","text":"From the tools menu in the left hand panel of Galaxy, select FASTA Manipulation - Fasta Statistics and run with these parameters: Fasta or multifasta file : Velvet Optimiser Contigs Click Execute Examine the Fasta Stats output You should now have one more object in your history: Fasta Statistics on data 10: Fasta summary stats Click on the icon next to this object and have a look at the output. You\u2019ll see a statistical summary of the contigs including various length stats, the % GC content, the n50 as well as the number of contigs and the number of N bases contained in them.","title":"Calculate some statistics on the assembled contigs"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-3-extension","text":"Examine the contig coverage depth and blast a high coverage contig against a protein database.","title":"Section 3: Extension."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-contig-coverage-depth","text":"Look at the Contig Stats data (Velvet Optimiser vlsci on data 8, data 9, and data 7: Contig stats) by clicking on the icon. Note that column 2 contig length (lgth), shows a number of very short contigs (some are length 1). We can easily filter out these short contigs from this information list by using the Filter and Sort - Filter tool. Set the following: Filter : Velvet Optimiser on data 8, data 7 and others: Contig stats With the following condition : c2 100 Click Execute The new data object in the history is called: Filter on data 11 . Click on its icon to view it. Look through the list taking note of the coverages. Note that the average of the coverages (column 6) seems to be somewhere between 16 and 32. There are a lot of contigs with coverage 16. We could say that these contigs only appear once in the genome of the bacteria. Therefore, contigs with double this coverage would appear twice. Note that some of the coverages are 400! These contigs will appear in the genome more than 20 times! Lets have a look at one of these contigs and see if we can find out what it is.","title":"Examine the contig coverage depth."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#extract-a-single-sequence-from-the-contigs-file","text":"Note the contig number (column 1 in the Contig stats file) of a contig with a coverage of over 300. There should be a few of them. We need to extract the fasta sequence of this contig from the contigs multifasta so we can see it more easily. To do this we will use the tool: Fasta manipulation - Fasta Extract Sequence Set the following: Fasta or multifasta file : Velvet Optimiser : Contigs Sequence ID (or partial): NODE_1_ (for example) Click Execute The new data object in the history is called: Fasta Extract Sequence on data 10: Fasta . Click on its icon to view it. It is a single sequence in fasta format.","title":"Extract a single sequence from the contigs file."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#blast-sequence-to-determine-what-it-contains","text":"We want to find out what this contig is or what kind of coding sequence (if any) it contains. So we will blast the sequence using the NCBI blast website. (External to Galaxy). To do this: Bring up the sequence of the contig into the main window of the browser by clicking on the icon if it isn\u2019t already. Select the entire sequence by clicking and dragging with the mouse or by pressing ctrl-a in the browser. Copy the selected sequence to the clipboard. Open a new tab of your browser and point it to: http://blast.ncbi.nlm.nih.gov/Blast.cgi Under the BASIC BLAST section, click \u201cblastx\u201d. Paste the sequence into the large text box labelled: Enter Accession number(s), gi(s) or FASTA sequence(s). Change the Genetic code to: Bacteria and Archaea (11) Click the button labelled: BLAST After a while the website will present a report of the blast run. Note that the sequence we blasted (if you chose NODE_1) is identical to part of a transposase gene (IS256) from a similar Staphylococcus aureus bacteria. These transposases occur frequently as repeats in bacterial genomes and so we shouldn\u2019t be surprised at its very high coverage.","title":"Blast sequence to determine what it contains."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-6-screenshot-of-the-output-from-the-ncbi-blast-website","text":"","title":"Figure 6: Screenshot of the output from the NCBI Blast website"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-novo-assembly-with-velvet-and-the-velvet-optimiser","text":"","title":"De novo assembly with Velvet and the Velvet Optimiser."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#velvet","text":"Velvet is software to perform dna assembly from short reads by manipulating de Bruijn graphs. It is capable of forming long contigs (n50 of in excess of 150kb) from paired end short reads. It has several input parameters for controlling the structure of the de Bruijn graph and these must be set optimally to get the best assembly possible. Velvet can read Fasta, FastQ, sam or bam files. However, it ignores any quality scores and simply relies on sequencing depth to resolve errors. The Velvet Optimiser software performs many Velvet assemblies with various parameter sets and searches for the optimal assembly automatically.","title":"Velvet"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-bruijn-graphs","text":"A de Bruijn graph is a directed graph which represents overlaps between sequences of symbols. The size of the sequence contained in the nodes of the graph is called the word-length or k-mer size. In Figure 2, the word length is 3. The two symbols are 1 and 0. Each node in the graph has the last two symbols of the previous node and 1 new symbol. Sequences of symbols can be produced by traversing the graph and adding the \u201cnew\u201d symbol to the growing sequence. Figure 2: A de Bruijn graph of word length 3 for the symbols 1 and 0. From: https://cameroncounts.wordpress.com/2015/02/28/1247/ Velvet constructs a de Bruijn graph of the reads. It has 4 symbols (A, C, G and T - N\u2019s are converted to A\u2019s) The word length (or k-mer size) is one of Velvet\u2019s prime parameters. Velvet is not the only assembly software that works in this manner. Euler, Edena and SOAP de novo are examples of others.","title":"de Bruijn graphs"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#the-velvet-algorithm","text":"","title":"The Velvet algorithm"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-1-hashing-the-reads","text":"Velvet breaks up each read into k-mers of length k. A k-mer is a k length subsequence of the read. A 36 base pair long read would have 6 different 31-mers. The k-mers and their reverse complements are added to a hash table to categorize them. Each k-mer is stored once but the number of times it appears is also recorded. This step is performed by \u201cvelveth\u201d - one of the programs in the Velvet suite.","title":"Step 1: Hashing the reads."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-2-constructing-the-de-bruijn-graph","text":"Velvet adds the k-mers one-by-one to the graph. Adjacent k-mers overlap by k-1 nucleotides. A k-mer which has no k-1 overlaps with any k-mer already on the graph starts a new node. Each node stores the average number of times its k-mers appear in the hash table. Figure 3 shows a section of a de Bruijn graph constructed by Velvet for k=5. Different sequences can be read off the graph by following a different path through it. (Figure 3) Figure 3: Section of a simple de Bruijn graph of reads with k-mer size 5. Coloured sequences are constructed by following the appropriately coloured line through the graph. (Base figure Zerbino et al 2008.)","title":"Step 2: Constructing the de Bruijn graph."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-3-simplification-of-the-graph","text":"Chain merging: When there are two connected nodes in the graph without a divergence, merge the two nodes. Tip clipping: Tips are short (typically) chains of nodes that are disconnected on one end. They will be clipped if their length is 2 x k or their average k-mer depth is much less than the continuing path. Bubble removal: Bubbles are redundant paths that start and end at the same nodes (Figure 4.) They are created by sequencing errors, biological variants or slightly varying repeat sequences. Velvet compares the paths using dynamic programming. If they are highly similar, the paths are merged. Error removal: Erroneous connections are removed by using a \u201ccoverage cutoff\u201d. Genuine short nodes which cannot be simplified should have a high coverage. An attempt is made to resolve repeats using the \u201cexpected coverage\u201d of the graph nodes. Paired end read information: Velvet uses algorithms called \u201cPebble\u201d and \u201cRock Band\u201d (Zerbino et al 2009) to order the nodes with respect to one another in order to scaffold them into longer contigs. Figure 4: Representation of \u201cbubbles\u201d in a Velvet de Bruijn graph. (Base figure Zerbino et al 2008.)","title":"Step 3: Simplification of the graph."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-4-read-off-the-contigs","text":"Follow the chains of nodes through the graph and \u201cread off\u201d the bases to create the contigs. Where there is an ambiguous divergence/convergence, stop the current contig and start a new one.","title":"Step 4: Read off the contigs."},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#k-mer-size-and-coverage-cutoff-values","text":"The size of the k-mers that construct the graph is very important and has a large effect on the outcome of the assembly. Generally, small k-mers create a graph with increased connectivity, more ambiguity (more divergences) and less clear \u201cpaths\u201d through the graph. Large k-mers produce graphs with less connectivity but higher specificity. The paths through the graph are clearer but they are less connected and prone to breaking down. The coverage cutoff c used during the error correction step of Velvet also has a significant effect on the output of the assembly process. If c is too low, the assembly will contain nodes of the graph that are the product of sequencing errors and misconnections. If c is too high, it can create mis-assemblies in the contigs and destroys lots of useful data. Each dataset has its own optimum values for the k-mer size and the coverage cutoff used in the error removal step. Choosing them appropriately is one of the challenges faced by new users of the Velvet software.","title":"K-mer size and coverage cutoff values"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#velvet-optimiser","text":"The Velvet Optimiser chooses the optimal values for k and c automatically by performing many runs of Velvet (partially in parallel) and interrogating the subsequent assemblies. It uses different optimisation functions for k and c and these can be user controlled. It requires the user to input a range of k values to search (to cut down on running time).","title":"Velvet Optimiser"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#references","text":"http://en.wikipedia.org/wiki/Sequence_assembly Zerbino DR, Birney E, Velvet: algorithms for de novo short read assembly using de Bruijn graphs, Genome Research, 2008, 18:821-829 Zerbino DR, McEwen GK, Margulies EH, Birney E, Pebble and rock band: heuristic resolution of repeats and scaffolding in the velvet short-read de novo assembler. PLoS One. 2009; 4(12):e8407. Gladman SL, Seemann T, Velvet Optimiser, http://www.vicbioinformatics.com/software.shtml 2009.","title":"References"},{"location":"scrapbook/dna/pan/mauve/","text":"Mauve This tutorial demonstrates how to use the Mauve software to align genomes. For example, a de novo assembly can be compared against a reference genome to check the assembly. Or, changes between two or more genomes can be examined. Link to Mauve Pre-requisites mGVL instance if using Lubuntu desktop Start FIXME: use linux version in Lubuntu desktop, or local version e.g. Mac ? or you can use in the cmd line Input 2+ genomes in FASTA(.fasta or .fna)/gbk format FIXME: choose data How it works Mauve finds structural variants in genomes. It aligns genoms and finds homologous regions, either from a common ancestor (orthologs) or lateral transfer (xenologs). Run File: Align with progressiveMauve Add sequences : select 2+ genome FASTA files Output : provide a name for the output folder Align the Mauve Console will appear while Mauve is running, showing the job status. Output FIXME: screenshots one genome per line genomic regions are coloured blocks: locally co-linear blocks (LCB): a block of genome that is unchanged inside, but as a block might have moved/inverted etc. you can export a list of annotated homologous features Next","title":"Mauve"},{"location":"scrapbook/dna/pan/mauve/#mauve","text":"This tutorial demonstrates how to use the Mauve software to align genomes. For example, a de novo assembly can be compared against a reference genome to check the assembly. Or, changes between two or more genomes can be examined. Link to Mauve","title":"Mauve"},{"location":"scrapbook/dna/pan/mauve/#pre-requisites","text":"mGVL instance if using Lubuntu desktop","title":"Pre-requisites"},{"location":"scrapbook/dna/pan/mauve/#start","text":"FIXME: use linux version in Lubuntu desktop, or local version e.g. Mac ? or you can use in the cmd line","title":"Start"},{"location":"scrapbook/dna/pan/mauve/#input","text":"2+ genomes in FASTA(.fasta or .fna)/gbk format FIXME: choose data","title":"Input"},{"location":"scrapbook/dna/pan/mauve/#how-it-works","text":"Mauve finds structural variants in genomes. It aligns genoms and finds homologous regions, either from a common ancestor (orthologs) or lateral transfer (xenologs).","title":"How it works"},{"location":"scrapbook/dna/pan/mauve/#run","text":"File: Align with progressiveMauve Add sequences : select 2+ genome FASTA files Output : provide a name for the output folder Align the Mauve Console will appear while Mauve is running, showing the job status.","title":"Run"},{"location":"scrapbook/dna/pan/mauve/#output","text":"FIXME: screenshots one genome per line genomic regions are coloured blocks: locally co-linear blocks (LCB): a block of genome that is unchanged inside, but as a block might have moved/inverted etc. you can export a list of annotated homologous features","title":"Output"},{"location":"scrapbook/dna/pan/mauve/#next","text":"","title":"Next"},{"location":"scrapbook/dna/pan/orthomcl/","text":"OrthoMCL cmdline - probably not worth bothering","title":"OrthoMCL"},{"location":"scrapbook/dna/pan/orthomcl/#orthomcl","text":"cmdline - probably not worth bothering","title":"OrthoMCL"},{"location":"scrapbook/dna/pan/roary/","text":"Roary cmdline This tutorial demonstrates how to calculate the pan and core genomes of a set of input bacterial species, using Roary. Roary code and manual on github Roary paper Pre-requisites background: pan genomes a mGVL instance Start via local Terminal : in your terminal, ssh into your mGVL, but make sure you put in -X -Y after ssh so that xquartz can view files later. (FIXME: word better) or via virtual desktop : Go to your mGVL dashboard. Click on the link to the Lubuntu desktop. A virtual desktop will open in a new browser window. Enter username: ubunutu; and your GVL password. Click on terminal in the top left corner. Input data Roary takes .gff files produced by Prokka. A gff file has sequences and annotations. file formats FIXME: link to proper page Get files into mGVL. (FIXME: explain how, wget etc or from GenomeSpace) put all gff files into a folder FIXME: choose a good sample set - ideally something that usefully shows how AMR genes can be present/absence in a group? for a draft can use the Listeria tutorial at https://github.com/microgenomics/tutorials/blob/master/pangenome.md Run navigate into the place where the gff folder is. roary -f ./results ./gff_files/*.gff -f ./results puts the output into a directory called results How it works Based on the input genomes, Roary works out which genes are shared between all (core) and which are not (accessory). It uses the protein-coding genes from each of the input genomes. converts to protein seqs similar protein seqs are clustered progressively. each sample: will be labelled with presence/absence of orthologous genes. Output summary statistics: more summary_statistics.txt you will see the number of core genes, shell genes, etc. q to exit viewing gene presence/absence graphically: roary2svg.pl gene_presence_absence.csv pan_genome.svg (if you have logged in with -X -Y) firefox pan_genome.svg then enter the makes it run in the background a firefox window should open with the svg image (later: close the firefox window to stop this job running in the background) list of genes that are present/absent: view the gene_presence_absence.csv by (FIXME) lots of information about this file in the roary website (FIXME summarize?) query the pan genome: copy the input .gff files into the results folder (FIXME: do this earlier) cd into this folder query_pan_genome -a intersection *.gff this finds the core genes more pan_genome_results shows the list of genes found in the core genome. q to exit viewing Advanced options FIXME: update firefox on mGVL so can run phandango Run roary and create an alignment of core genes: roary -f ./results -e -n -p 8 ./gff_files/*.gff -f ./results puts the output into a directory called results -e -n creates an alignment of core genes using mafft -p 8 gives 8 threads - optional, if you know how many you have Generate a tree based on the presence/absence of core genes: navigate into the results folder that you want to use. FastTree -nt -gtr core_gene_alignment.aln my_tree.newick (By default, roary will also have created a (very quick) tree from the accessory genes.) FastTree information and options . Use roary_plots.py to generate plots: navigate into the results folder that you want to use. python roary_plots.py core_gene_alignment.nwk gene_presence_absence.csv output: pangenome matrix, frequency plot, pie chart. view these by typing firefox [filename] and a firefox window will open to show the image. You need to close the window before you open the next image. What next? View using Phandango; tutorial here. More information another Roary tutorial","title":"Roary"},{"location":"scrapbook/dna/pan/roary/#roary","text":"cmdline This tutorial demonstrates how to calculate the pan and core genomes of a set of input bacterial species, using Roary. Roary code and manual on github Roary paper","title":"Roary"},{"location":"scrapbook/dna/pan/roary/#pre-requisites","text":"background: pan genomes a mGVL instance","title":"Pre-requisites"},{"location":"scrapbook/dna/pan/roary/#start","text":"via local Terminal : in your terminal, ssh into your mGVL, but make sure you put in -X -Y after ssh so that xquartz can view files later. (FIXME: word better) or via virtual desktop : Go to your mGVL dashboard. Click on the link to the Lubuntu desktop. A virtual desktop will open in a new browser window. Enter username: ubunutu; and your GVL password. Click on terminal in the top left corner.","title":"Start"},{"location":"scrapbook/dna/pan/roary/#input-data","text":"Roary takes .gff files produced by Prokka. A gff file has sequences and annotations. file formats FIXME: link to proper page Get files into mGVL. (FIXME: explain how, wget etc or from GenomeSpace) put all gff files into a folder FIXME: choose a good sample set - ideally something that usefully shows how AMR genes can be present/absence in a group? for a draft can use the Listeria tutorial at https://github.com/microgenomics/tutorials/blob/master/pangenome.md","title":"Input data"},{"location":"scrapbook/dna/pan/roary/#run","text":"navigate into the place where the gff folder is. roary -f ./results ./gff_files/*.gff -f ./results puts the output into a directory called results","title":"Run"},{"location":"scrapbook/dna/pan/roary/#how-it-works","text":"Based on the input genomes, Roary works out which genes are shared between all (core) and which are not (accessory). It uses the protein-coding genes from each of the input genomes. converts to protein seqs similar protein seqs are clustered progressively. each sample: will be labelled with presence/absence of orthologous genes.","title":"How it works"},{"location":"scrapbook/dna/pan/roary/#output","text":"","title":"Output"},{"location":"scrapbook/dna/pan/roary/#summary-statistics","text":"more summary_statistics.txt you will see the number of core genes, shell genes, etc. q to exit viewing","title":"summary statistics:"},{"location":"scrapbook/dna/pan/roary/#gene-presenceabsence-graphically","text":"roary2svg.pl gene_presence_absence.csv pan_genome.svg (if you have logged in with -X -Y) firefox pan_genome.svg then enter the makes it run in the background a firefox window should open with the svg image (later: close the firefox window to stop this job running in the background)","title":"gene presence/absence graphically:"},{"location":"scrapbook/dna/pan/roary/#list-of-genes-that-are-presentabsent","text":"view the gene_presence_absence.csv by (FIXME) lots of information about this file in the roary website (FIXME summarize?)","title":"list of genes that are present/absent:"},{"location":"scrapbook/dna/pan/roary/#query-the-pan-genome","text":"copy the input .gff files into the results folder (FIXME: do this earlier) cd into this folder query_pan_genome -a intersection *.gff this finds the core genes more pan_genome_results shows the list of genes found in the core genome. q to exit viewing","title":"query the pan genome:"},{"location":"scrapbook/dna/pan/roary/#advanced-options","text":"FIXME: update firefox on mGVL so can run phandango","title":"Advanced options"},{"location":"scrapbook/dna/pan/roary/#run-roary-and-create-an-alignment-of-core-genes","text":"roary -f ./results -e -n -p 8 ./gff_files/*.gff -f ./results puts the output into a directory called results -e -n creates an alignment of core genes using mafft -p 8 gives 8 threads - optional, if you know how many you have","title":"Run roary and create an alignment of core genes:"},{"location":"scrapbook/dna/pan/roary/#generate-a-tree-based-on-the-presenceabsence-of-core-genes","text":"navigate into the results folder that you want to use. FastTree -nt -gtr core_gene_alignment.aln my_tree.newick (By default, roary will also have created a (very quick) tree from the accessory genes.) FastTree information and options .","title":"Generate a tree based on the presence/absence of core genes:"},{"location":"scrapbook/dna/pan/roary/#use-roary_plotspy-to-generate-plots","text":"navigate into the results folder that you want to use. python roary_plots.py core_gene_alignment.nwk gene_presence_absence.csv output: pangenome matrix, frequency plot, pie chart. view these by typing firefox [filename] and a firefox window will open to show the image. You need to close the window before you open the next image.","title":"Use roary_plots.py to generate plots:"},{"location":"scrapbook/dna/pan/roary/#what-next","text":"View using Phandango; tutorial here.","title":"What next?"},{"location":"scrapbook/dna/pan/roary/#more-information","text":"another Roary tutorial","title":"More information"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/","text":"FastQC - commandline Start on your local machine, make sure XQuartz is installed. This doesn t have to be open - it will open automatically later. in terminal, ssh to your virtual machine with -X and -Y, e.g. ssh -X -Y ubuntu@111.111.111.111 (the -X and -Y means it will use your local XQuartz to display some files). module load fastqc_dist_0_10_1 navigate to where you want to make a FastQC analysis folder. Make a folder: mkdir fastqc_analyses Move to that folder: cd fastqc_analyses Input move your input reads into this folder. Run fastqc R1reads.fastq [this runs fastqc] type fastqc --help to see settings that you can change, and defaults ! FIXME: any to change FIXME: repeat for R2reads? Output R1reads_fastqc: folder containing the output, e.g. fastqc_report.html to view this, type: firefox fastqc_report.html firefox should open and display the report (you may get an error message in terminal but ignore this).","title":"FastQC - commandline"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#fastqc-commandline","text":"","title":"FastQC - commandline"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#start","text":"on your local machine, make sure XQuartz is installed. This doesn t have to be open - it will open automatically later. in terminal, ssh to your virtual machine with -X and -Y, e.g. ssh -X -Y ubuntu@111.111.111.111 (the -X and -Y means it will use your local XQuartz to display some files). module load fastqc_dist_0_10_1 navigate to where you want to make a FastQC analysis folder. Make a folder: mkdir fastqc_analyses Move to that folder: cd fastqc_analyses","title":"Start"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#input","text":"move your input reads into this folder.","title":"Input"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#run","text":"fastqc R1reads.fastq [this runs fastqc] type fastqc --help to see settings that you can change, and defaults ! FIXME: any to change FIXME: repeat for R2reads?","title":"Run"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#output","text":"R1reads_fastqc: folder containing the output, e.g. fastqc_report.html to view this, type: firefox fastqc_report.html firefox should open and display the report (you may get an error message in terminal but ignore this).","title":"Output"},{"location":"scrapbook/dna/qualitycontrol/qc/","text":"Genomics QC Phred Adapters Trimming Clipping Depth","title":"Genomics QC"},{"location":"scrapbook/dna/qualitycontrol/qc/#genomics-qc","text":"Phred Adapters Trimming Clipping Depth","title":"Genomics QC"},{"location":"scrapbook/dna/qualitycontrol/trimmomatic_cmdline/","text":"Trimmomatic - command line [from LSCC docs; FIXME: add info data; test] for Paired End Files: java -cp path to trimmomatic jar org.usadellab.trimmomatic.TrimmomaticPE for Single End Files java -cp path to trimmomatic jar org.usadellab.trimmomatic.TrimmomaticSE Trimmomatic can perform many read trimming functions sequentially.","title":"Trimmomatic - command line"},{"location":"scrapbook/dna/qualitycontrol/trimmomatic_cmdline/#trimmomatic-command-line","text":"[from LSCC docs; FIXME: add info data; test] for Paired End Files: java -cp path to trimmomatic jar org.usadellab.trimmomatic.TrimmomaticPE for Single End Files java -cp path to trimmomatic jar org.usadellab.trimmomatic.TrimmomaticSE Trimmomatic can perform many read trimming functions sequentially.","title":"Trimmomatic - command line"},{"location":"scrapbook/dna/snps/bwa_mem/","text":"BWA-MEM in Galaxy Introduction This tool is used to find variants. (Note: BWA-MEM can also be used to map sequence reads to a reference for the purposes of assembly.) BWA stands for Burrows-Wheeler Aligner ; more information and manual here . Learning Objectives At the end of this tutorial you should be able to: map reads to reference using BWA-MEM, and identify variants in the output files. Data Run Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM Output SAM file What next? FIXME","title":"BWA-MEM in Galaxy"},{"location":"scrapbook/dna/snps/bwa_mem/#bwa-mem-in-galaxy","text":"","title":"BWA-MEM in Galaxy"},{"location":"scrapbook/dna/snps/bwa_mem/#introduction","text":"This tool is used to find variants. (Note: BWA-MEM can also be used to map sequence reads to a reference for the purposes of assembly.) BWA stands for Burrows-Wheeler Aligner ; more information and manual here .","title":"Introduction"},{"location":"scrapbook/dna/snps/bwa_mem/#learning-objectives","text":"At the end of this tutorial you should be able to: map reads to reference using BWA-MEM, and identify variants in the output files.","title":"Learning Objectives"},{"location":"scrapbook/dna/snps/bwa_mem/#data","text":"","title":"Data"},{"location":"scrapbook/dna/snps/bwa_mem/#run","text":"Go to Tools NGS Analysis NGS: Mapping Map with BWA-MEM","title":"Run"},{"location":"scrapbook/dna/snps/bwa_mem/#output","text":"SAM file","title":"Output"},{"location":"scrapbook/dna/snps/bwa_mem/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/dna/snps/galaxy/","text":"Galaxy need to make a workflow BWA samtools or varscan vcf filter?","title":"Galaxy"},{"location":"scrapbook/dna/snps/galaxy/#galaxy","text":"need to make a workflow BWA samtools or varscan vcf filter?","title":"Galaxy"},{"location":"scrapbook/dna/snps/snippy/","text":"Snippy cmdline This tutorial will demonstrate how to find variants in a bacterial genome using Snippy. Variants are found by comparing to a reference genome of the same species. Github link to Snippy Pre-requisites connect to your GVL - cmdline background knowledge: variant calling Start log in to your virtual machine via terminal navigate to the place where you want Snippy to run. make a folder called snippy - mkdir snippy move into that folder - cd snippy Input Raw sequence reads Illumina paired-end reads from a bacteria in FASTQ format. These reads are from Pasteurella multocida , from EMBL-EBI ENA. We will use wget to download them via FTP. in the snippy folder, wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_1.fastq.gz wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_2.fastq.gz These files are compressed and so end in .gz. Snippy can use these .gz read files directly without unzipping. Reference genome Reference genome from the same species, Pasteurella multocida , from EMBL-EBI Ensembl genomes, in FASTA format. in the snippy folder, wget ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz This file is also compressed into .gz format. This needs to be unzipped: gunzip ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz The file will now end in .fa (which is fasta format, and Snippy can use). How it works Reads are mapped to the reference genome using BWA: this makes a BAM file BAM file and the ref genome sequence sent to Freebayes Freebayes finds differences between the reads and the reference, and calls the variants. Run Snippy cpus: choose number of cpus to use [or it uses a default] - here we will use 16 outdir: choose a name for the output directory, where results will go - here we will use mysnps ref: the input reference genome filename R1: the input R1 reads filename R2: the input R2 reads filename to run snippy: snippy --cpus 16 --outdir mysnps --ref [filename.fa] --R1 [R1.fastq.gz] --R2 [R2.fastq.gz] Output 17 output files list all the output files (that were put into the mysnps folder): ls mysnps look at the first 10 lines of the snps.tab file head -10 mysnps/snps.tab look at these columns: chromosome (CHROM), genomic position (POS), variant type (TYPE), nucleotide state in the ref (REF), nucleotide state in the input sample (ALT), and the frequency counts of REF and ALT (EVIDENCE). FIXME: screenshot with arrows FIXME: filter for quality? FIXME: load reference and the tabular vcf file into JBrowse/Artemis/IGV to view the genome and the snps. FIXME: is there anything we are looking for in particular? e.g. number of variants, existing known variants, variants in particular genes, AMR variants? Next","title":"Snippy"},{"location":"scrapbook/dna/snps/snippy/#snippy","text":"cmdline This tutorial will demonstrate how to find variants in a bacterial genome using Snippy. Variants are found by comparing to a reference genome of the same species. Github link to Snippy","title":"Snippy"},{"location":"scrapbook/dna/snps/snippy/#pre-requisites","text":"connect to your GVL - cmdline background knowledge: variant calling","title":"Pre-requisites"},{"location":"scrapbook/dna/snps/snippy/#start","text":"log in to your virtual machine via terminal navigate to the place where you want Snippy to run. make a folder called snippy - mkdir snippy move into that folder - cd snippy","title":"Start"},{"location":"scrapbook/dna/snps/snippy/#input","text":"","title":"Input"},{"location":"scrapbook/dna/snps/snippy/#raw-sequence-reads","text":"Illumina paired-end reads from a bacteria in FASTQ format. These reads are from Pasteurella multocida , from EMBL-EBI ENA. We will use wget to download them via FTP. in the snippy folder, wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_1.fastq.gz wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_2.fastq.gz These files are compressed and so end in .gz. Snippy can use these .gz read files directly without unzipping.","title":"Raw sequence reads"},{"location":"scrapbook/dna/snps/snippy/#reference-genome","text":"Reference genome from the same species, Pasteurella multocida , from EMBL-EBI Ensembl genomes, in FASTA format. in the snippy folder, wget ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz This file is also compressed into .gz format. This needs to be unzipped: gunzip ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz The file will now end in .fa (which is fasta format, and Snippy can use).","title":"Reference genome"},{"location":"scrapbook/dna/snps/snippy/#how-it-works","text":"Reads are mapped to the reference genome using BWA: this makes a BAM file BAM file and the ref genome sequence sent to Freebayes Freebayes finds differences between the reads and the reference, and calls the variants.","title":"How it works"},{"location":"scrapbook/dna/snps/snippy/#run-snippy","text":"cpus: choose number of cpus to use [or it uses a default] - here we will use 16 outdir: choose a name for the output directory, where results will go - here we will use mysnps ref: the input reference genome filename R1: the input R1 reads filename R2: the input R2 reads filename to run snippy: snippy --cpus 16 --outdir mysnps --ref [filename.fa] --R1 [R1.fastq.gz] --R2 [R2.fastq.gz]","title":"Run Snippy"},{"location":"scrapbook/dna/snps/snippy/#output","text":"17 output files list all the output files (that were put into the mysnps folder): ls mysnps look at the first 10 lines of the snps.tab file head -10 mysnps/snps.tab look at these columns: chromosome (CHROM), genomic position (POS), variant type (TYPE), nucleotide state in the ref (REF), nucleotide state in the input sample (ALT), and the frequency counts of REF and ALT (EVIDENCE). FIXME: screenshot with arrows FIXME: filter for quality? FIXME: load reference and the tabular vcf file into JBrowse/Artemis/IGV to view the genome and the snps. FIXME: is there anything we are looking for in particular? e.g. number of variants, existing known variants, variants in particular genes, AMR variants?","title":"Output"},{"location":"scrapbook/dna/snps/snippy/#next","text":"","title":"Next"},{"location":"scrapbook/dna/snps/background/background/","text":"Variants: Background [from LSCC docs] Identifying SNPs There are many methods of identifying SNPs, but all rely on the per-base evidence provided by all the reads that have mapped to particular position in the sequence. So, it s useful to aggregate the evidence from all reads that relate to a particular base in the sequence. One method is to generate a pileup: a summary of sequence information from the entire set of reads across each relevant base in the reference sequence along with quality metrics relating to base quality and the mapping quality for each/all reads. see Pileup file information FIXME: can t link","title":"Variants: Background"},{"location":"scrapbook/dna/snps/background/background/#variants-background","text":"[from LSCC docs]","title":"Variants: Background"},{"location":"scrapbook/dna/snps/background/background/#identifying-snps","text":"There are many methods of identifying SNPs, but all rely on the per-base evidence provided by all the reads that have mapped to particular position in the sequence. So, it s useful to aggregate the evidence from all reads that relate to a particular base in the sequence. One method is to generate a pileup: a summary of sequence information from the entire set of reads across each relevant base in the reference sequence along with quality metrics relating to base quality and the mapping quality for each/all reads. see Pileup file information FIXME: can t link","title":"Identifying SNPs"},{"location":"scrapbook/how_to/overview/","text":"Overview - Advanced Training This section contains training modules for microbial genomics analyses. All analyses are performed using the microbial GVL (and occasionally, additional web-based tools), via the Galaxy interface or using the commandline. Genome assembly: from raw DNA sequence reads to assembled genome. in Galaxy - using Illumina data on the commandline - using Illumina data in the mGVL SMRTPortal - using PacBio data on the commandline - using both PacBio data and Illumina data Genome annotation: from assembled genome to annotated genome. in Galaxy on the commandline Core and pan genomes: from assembled genomes to lists of shared genes and accessory genes. on the commandline Differential gene expression: from raw RNA sequence reads from two conditions to a list of differentially expressed genes. in Galaxy For more information about using the GVL see http://genome.edu.au","title":"Overview - Advanced Training"},{"location":"scrapbook/how_to/overview/#overview-advanced-training","text":"This section contains training modules for microbial genomics analyses. All analyses are performed using the microbial GVL (and occasionally, additional web-based tools), via the Galaxy interface or using the commandline. Genome assembly: from raw DNA sequence reads to assembled genome. in Galaxy - using Illumina data on the commandline - using Illumina data in the mGVL SMRTPortal - using PacBio data on the commandline - using both PacBio data and Illumina data Genome annotation: from assembled genome to annotated genome. in Galaxy on the commandline Core and pan genomes: from assembled genomes to lists of shared genes and accessory genes. on the commandline Differential gene expression: from raw RNA sequence reads from two conditions to a list of differentially expressed genes. in Galaxy For more information about using the GVL see http://genome.edu.au","title":"Overview - Advanced Training"},{"location":"scrapbook/how_to/annotation/anno_galaxy/","text":"Annotation - Galaxy","title":"Annotation - Galaxy"},{"location":"scrapbook/how_to/annotation/anno_galaxy/#annotation-galaxy","text":"","title":"Annotation - Galaxy"},{"location":"scrapbook/how_to/assembly/assembly_galaxy/","text":"Assembly - Galaxy","title":"Assembly - Galaxy"},{"location":"scrapbook/how_to/assembly/assembly_galaxy/#assembly-galaxy","text":"","title":"Assembly - Galaxy"},{"location":"scrapbook/how_to/pan/roary/","text":"Roary","title":"Roary"},{"location":"scrapbook/how_to/pan/roary/#roary","text":"","title":"Roary"},{"location":"scrapbook/met/data/","text":"Metabolomics Data Even less idea!","title":"Metabolomics Data"},{"location":"scrapbook/met/data/#metabolomics-data","text":"Even less idea!","title":"Metabolomics Data"},{"location":"scrapbook/met/qc/","text":"Metabolomics QC","title":"Metabolomics QC"},{"location":"scrapbook/met/qc/#metabolomics-qc","text":"","title":"Metabolomics QC"},{"location":"scrapbook/pro/data/","text":"Proteomics Data No idea!","title":"Proteomics Data"},{"location":"scrapbook/pro/data/#proteomics-data","text":"No idea!","title":"Proteomics Data"},{"location":"scrapbook/pro/qc/","text":"Proteomics QC Need a good protein reference FASTA to match against. Quantitative?","title":"Proteomics QC"},{"location":"scrapbook/pro/qc/#proteomics-qc","text":"Need a good protein reference FASTA to match against. Quantitative?","title":"Proteomics QC"},{"location":"scrapbook/protocols/annotation/","text":"Annotation from raw reads to annotated genome Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Annotation"},{"location":"scrapbook/protocols/annotation/#annotation","text":"from raw reads to annotated genome","title":"Annotation"},{"location":"scrapbook/protocols/annotation/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/protocols/annotation/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/protocols/annotation/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/protocols/annotation/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/protocols/assembly/","text":"De novo assembly Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"De novo assembly"},{"location":"scrapbook/protocols/assembly/#de-novo-assembly","text":"","title":"De novo assembly"},{"location":"scrapbook/protocols/assembly/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/protocols/assembly/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/protocols/assembly/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/protocols/assembly/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/protocols/dge/","text":"Differential gene expression from raw RNA reads to statistical tests and viz of DGE Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Differential gene expression"},{"location":"scrapbook/protocols/dge/#differential-gene-expression","text":"from raw RNA reads to statistical tests and viz of DGE","title":"Differential gene expression"},{"location":"scrapbook/protocols/dge/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/protocols/dge/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/protocols/dge/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/protocols/dge/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/protocols/overview/","text":"Overview FIXME: ideas - but we can delete this section if we want Workflows in Galaxy, with flowcharts Command line pipelines, make flowcharts Show various options at each stage (e.g. use tool x or y) Exemplar pipelines e.g. DNA reads to genome (llumina) e.g. FastQC, trimmomatic, Spades, view DNA reads to genome (PacBio) e.g. PacBio smrt portal DNA reads to annotated genome e.g. FastQC, trimmomatic, Spades, Prokka, view DNA reads to variants e.g. FastQC, trimmomatic, snippy, view several sets of DNA reads to genomes: core/pan e.g. FastQC, trimmomatic, Spades, Prokka, Roary, phandango several sets of DNA to compare structural variants e.g. FastQC, trimmomatic, Spades, Mauve RNA reads to list of DGE e.g. xxx","title":"Overview"},{"location":"scrapbook/protocols/overview/#overview","text":"FIXME: ideas - but we can delete this section if we want Workflows in Galaxy, with flowcharts Command line pipelines, make flowcharts Show various options at each stage (e.g. use tool x or y) Exemplar pipelines e.g. DNA reads to genome (llumina) e.g. FastQC, trimmomatic, Spades, view DNA reads to genome (PacBio) e.g. PacBio smrt portal DNA reads to annotated genome e.g. FastQC, trimmomatic, Spades, Prokka, view DNA reads to variants e.g. FastQC, trimmomatic, snippy, view several sets of DNA reads to genomes: core/pan e.g. FastQC, trimmomatic, Spades, Prokka, Roary, phandango several sets of DNA to compare structural variants e.g. FastQC, trimmomatic, Spades, Mauve RNA reads to list of DGE e.g. xxx","title":"Overview"},{"location":"scrapbook/protocols/variants/","text":"Variant finding from raw reads to snps Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Variant finding"},{"location":"scrapbook/protocols/variants/#variant-finding","text":"from raw reads to snps","title":"Variant finding"},{"location":"scrapbook/protocols/variants/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/protocols/variants/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/protocols/variants/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/protocols/variants/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/rna/data/","text":"Transcriptomics Data RNA-Seq FASTQ","title":"Transcriptomics Data"},{"location":"scrapbook/rna/data/#transcriptomics-data","text":"RNA-Seq FASTQ","title":"Transcriptomics Data"},{"location":"scrapbook/rna/denovo-cmdline-trinity/","text":"","title":"Denovo cmdline trinity"},{"location":"scrapbook/rna/denovo/","text":"De novo transcriptome assembly Command line Oases StringTie Trinity Galaxy Trinity","title":"*De novo* transcriptome assembly"},{"location":"scrapbook/rna/denovo/#de-novo-transcriptome-assembly","text":"","title":"De novo transcriptome assembly"},{"location":"scrapbook/rna/denovo/#command-line","text":"Oases StringTie Trinity","title":"Command line"},{"location":"scrapbook/rna/denovo/#galaxy","text":"Trinity","title":"Galaxy"},{"location":"scrapbook/rna/dge/","text":"","title":"Dge"},{"location":"scrapbook/rna/qc/","text":"Transcriptomics QC Align to ref? rRNA levels","title":"Transcriptomics QC"},{"location":"scrapbook/rna/qc/#transcriptomics-qc","text":"Align to ref? rRNA levels","title":"Transcriptomics QC"},{"location":"scrapbook/rna/denovo/oases/","text":"Oases cmdline might be in galaxy?","title":"Oases"},{"location":"scrapbook/rna/denovo/oases/#oases","text":"cmdline might be in galaxy?","title":"Oases"},{"location":"scrapbook/rna/denovo/stringtie/","text":"StringTie cmd line","title":"StringTie"},{"location":"scrapbook/rna/denovo/stringtie/#stringtie","text":"cmd line","title":"StringTie"},{"location":"scrapbook/rna/denovo/trinity/","text":"Trinity on cmdline In Galaxy too?","title":"Trinity"},{"location":"scrapbook/rna/denovo/trinity/#trinity","text":"on cmdline In Galaxy too?","title":"Trinity"},{"location":"scrapbook/rna/dge/DESeq/","text":"DESeq","title":"DESeq"},{"location":"scrapbook/rna/dge/DESeq/#deseq","text":"","title":"DESeq"},{"location":"scrapbook/rna/dge/HTSeq/","text":"HTSeq","title":"HTSeq"},{"location":"scrapbook/rna/dge/HTSeq/#htseq","text":"","title":"HTSeq"},{"location":"scrapbook/rna/dge/degust/","text":"Degust for viz of DGE results Following the test of differential gene expresssion DGE in Galaxy , we can use the tool Degust to visualize the results. Link to Degust on github FIXME: Degust to be installed on mGVL Galaxy Run Input: read counts (htseq output) Configuration: settings Name - for data Info columns - info for each gene - how to choose Add condition ( for all conditions) Set min read count to 10 ( 10 reads = gene omitted) Save, view Execute Output Compare the expression of genes between conditions 1 and 2","title":"Degust"},{"location":"scrapbook/rna/dge/degust/#degust","text":"for viz of DGE results Following the test of differential gene expresssion DGE in Galaxy , we can use the tool Degust to visualize the results. Link to Degust on github FIXME: Degust to be installed on mGVL Galaxy","title":"Degust"},{"location":"scrapbook/rna/dge/degust/#run","text":"Input: read counts (htseq output) Configuration: settings Name - for data Info columns - info for each gene - how to choose Add condition ( for all conditions) Set min read count to 10 ( 10 reads = gene omitted) Save, view Execute","title":"Run"},{"location":"scrapbook/rna/dge/degust/#output","text":"Compare the expression of genes between conditions 1 and 2","title":"Output"},{"location":"scrapbook/rna/dge/galaxy/","text":"DGE using Galaxy No idea - i think there are some workflows but we dont need Cufflinks etc This tutorial demonstrates how to quantify differences in gene expression between two bacterial samples. We will use RNA-seq data from the samples, and then use several tools to test for differential gene expression. We can then examine the results in the program Degust Pre-requisites your own mGVL instance knowledge: Galaxy knowledge: Differential gene expression Start open your mGVL galaxy instance. Input data RNA-seq reads from the samples Bacterial species E. coli from study SRP027344 from EBI ENA We will use wildtype (called WTA and WTB) vs. condition 23 (called 23A and 23B) [what was this condition? grown in different media?] Illumina, single-end, 51-bp a reference genome E coli: NCBI Reference Sequence: NC_000913.3 in fasta format FIXME: Get data from GenomeSpace/ or saved galaxy history Map transcripts We need to map the transcripts to a reference genome. Bacteria don t need splice-aware mapping (don t have introns) Galaxy: tools: NGS Analysis: NGS Mapping: Map with BWA-MEM Will you select a reference genome from your history or use a built-in index?: Use a genome from history and build index Use the following dataset as the reference sequence: E_coli_ref_genome Single or Paired-end reads: single Select FASTQ dataset : click on the multiple files button (image) in centre make sure all 4 FASTQ files are in there hold down shift to select them all (they turn blue) this will map each set of transcripts to the ref genome, so there will be 4 output files Visualize the mapped reads The mapped reads are now as .bam files which can t be viewed by just clicking on them. [should we use JBrowse?] on local computer, install/open IGV Genomes- load genome from file- ../igv/genomes/NC_000913.2 (Ecoli ref) then in galaxy, go to the mapped transcripts and click on IGV local in IGV, zoom in (top right) the bottom pane is the ref sequence / zoom in and out to see the reads. Count reads Generate read counts per gene For each transcriptome, count the number of transcripts per gene/feature E.g. with HTSeq data: this is part of the Colombus database of bacterial expression http://nar.oxfordjournals.org/content/suppl/2013/10/29/gkt1086.DC1/nar-02461-data-e-2013-File001.pdf wildtype and two mutants (all grown under minimal conditions or just mutants?) hopefully some expression changes bn condition 23 and wt so that can be viewed in the Degust plots","title":"DGE using Galaxy"},{"location":"scrapbook/rna/dge/galaxy/#dge-using-galaxy","text":"No idea - i think there are some workflows but we dont need Cufflinks etc This tutorial demonstrates how to quantify differences in gene expression between two bacterial samples. We will use RNA-seq data from the samples, and then use several tools to test for differential gene expression. We can then examine the results in the program Degust","title":"DGE using Galaxy"},{"location":"scrapbook/rna/dge/galaxy/#pre-requisites","text":"your own mGVL instance knowledge: Galaxy knowledge: Differential gene expression","title":"Pre-requisites"},{"location":"scrapbook/rna/dge/galaxy/#start","text":"open your mGVL galaxy instance.","title":"Start"},{"location":"scrapbook/rna/dge/galaxy/#input-data","text":"RNA-seq reads from the samples Bacterial species E. coli from study SRP027344 from EBI ENA We will use wildtype (called WTA and WTB) vs. condition 23 (called 23A and 23B) [what was this condition? grown in different media?] Illumina, single-end, 51-bp a reference genome E coli: NCBI Reference Sequence: NC_000913.3 in fasta format FIXME: Get data from GenomeSpace/ or saved galaxy history","title":"Input data"},{"location":"scrapbook/rna/dge/galaxy/#map-transcripts","text":"We need to map the transcripts to a reference genome. Bacteria don t need splice-aware mapping (don t have introns) Galaxy: tools: NGS Analysis: NGS Mapping: Map with BWA-MEM Will you select a reference genome from your history or use a built-in index?: Use a genome from history and build index Use the following dataset as the reference sequence: E_coli_ref_genome Single or Paired-end reads: single Select FASTQ dataset : click on the multiple files button (image) in centre make sure all 4 FASTQ files are in there hold down shift to select them all (they turn blue) this will map each set of transcripts to the ref genome, so there will be 4 output files","title":"Map transcripts"},{"location":"scrapbook/rna/dge/galaxy/#visualize-the-mapped-reads","text":"The mapped reads are now as .bam files which can t be viewed by just clicking on them. [should we use JBrowse?] on local computer, install/open IGV Genomes- load genome from file- ../igv/genomes/NC_000913.2 (Ecoli ref) then in galaxy, go to the mapped transcripts and click on IGV local in IGV, zoom in (top right) the bottom pane is the ref sequence / zoom in and out to see the reads.","title":"Visualize the mapped reads"},{"location":"scrapbook/rna/dge/galaxy/#count-reads","text":"Generate read counts per gene For each transcriptome, count the number of transcripts per gene/feature E.g. with HTSeq data: this is part of the Colombus database of bacterial expression http://nar.oxfordjournals.org/content/suppl/2013/10/29/gkt1086.DC1/nar-02461-data-e-2013-File001.pdf wildtype and two mutants (all grown under minimal conditions or just mutants?) hopefully some expression changes bn condition 23 and wt so that can be viewed in the Degust plots","title":"Count reads"},{"location":"scrapbook/snps/","text":"Variant calling Background Variant calling is the process of identifying differences between to genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling . Learning Objectives At the end of this tutorial you should be able to: Find variants between a reference genome and a set of reads Determine the effect of those variants on genomic features Understand if the SNP is potentially affecting the phenotype Experiment FIXME: You are working on a bug and you notice one of them is forming smaller colonies than normal. You want to find out why this msall colony vairant (SCV) is doing at the DNA level. Prepare reference FIXME: need FASTA or prefer an annotated genome eg. GBK or GFF3 of the original strain you used Note Please make sure your reference genome includes all chromosomes and plasmids Align reads FIXME: BWA MEM align the SCV reads Call variants FIXME: freebayes? varscan2 ? FIXME: talk about multimapping reads? Filter variants FIXME: vcffilter? something else? mindepth, homozygous? Annotate consequencs FIXME: snpEff - but it is hard to add a genome Hint Just use Snippy and all this will happen magically? What next? SNPs can be used to build phylogentic trees .","title":"Variant calling"},{"location":"scrapbook/snps/#variant-calling","text":"","title":"Variant calling"},{"location":"scrapbook/snps/#background","text":"Variant calling is the process of identifying differences between to genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by variant calling .","title":"Background"},{"location":"scrapbook/snps/#learning-objectives","text":"At the end of this tutorial you should be able to: Find variants between a reference genome and a set of reads Determine the effect of those variants on genomic features Understand if the SNP is potentially affecting the phenotype","title":"Learning Objectives"},{"location":"scrapbook/snps/#experiment","text":"FIXME: You are working on a bug and you notice one of them is forming smaller colonies than normal. You want to find out why this msall colony vairant (SCV) is doing at the DNA level.","title":"Experiment"},{"location":"scrapbook/snps/#prepare-reference","text":"FIXME: need FASTA or prefer an annotated genome eg. GBK or GFF3 of the original strain you used Note Please make sure your reference genome includes all chromosomes and plasmids","title":"Prepare reference"},{"location":"scrapbook/snps/#align-reads","text":"FIXME: BWA MEM align the SCV reads","title":"Align reads"},{"location":"scrapbook/snps/#call-variants","text":"FIXME: freebayes? varscan2 ? FIXME: talk about multimapping reads?","title":"Call variants"},{"location":"scrapbook/snps/#filter-variants","text":"FIXME: vcffilter? something else? mindepth, homozygous?","title":"Filter variants"},{"location":"scrapbook/snps/#annotate-consequencs","text":"FIXME: snpEff - but it is hard to add a genome Hint Just use Snippy and all this will happen magically?","title":"Annotate consequencs"},{"location":"scrapbook/snps/#what-next","text":"SNPs can be used to build phylogentic trees .","title":"What next?"},{"location":"scrapbook/trees/","text":"Phylogenomics Introduction FIXME Learning Objectives At the end of this tutorial you should be able to: FIXME FIXME FIXME Main Tutorial FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up. What next? FIXME","title":"Phylogenomics"},{"location":"scrapbook/trees/#phylogenomics","text":"","title":"Phylogenomics"},{"location":"scrapbook/trees/#introduction","text":"FIXME","title":"Introduction"},{"location":"scrapbook/trees/#learning-objectives","text":"At the end of this tutorial you should be able to: FIXME FIXME FIXME","title":"Learning Objectives"},{"location":"scrapbook/trees/#main-tutorial","text":"FIXME Note Please take note of this because we care about you. Hint This is a useful tip for you because we like you. Warning Please be careful here, you could really mess things up.","title":"Main Tutorial"},{"location":"scrapbook/trees/#what-next","text":"FIXME","title":"What next?"},{"location":"scrapbook/viz/artemis/","text":"Artemis link to this tutorial/ or vice versa. FIXME: change/make more generic for this section?","title":"Artemis"},{"location":"scrapbook/viz/artemis/#artemis","text":"link to this tutorial/ or vice versa. FIXME: change/make more generic for this section?","title":"Artemis"},{"location":"scrapbook/viz/bandage/","text":"Bandage Bandage is a program to visualize a genome assembly. Link to code on github. Start Open your mGVL dashboard and click on the link to the Lubuntu desktop. A web window should appear called noVNC . This shows the virtual desktop. Open the Terminal in this VNC. type in: /mnt/gvl/apps/bandage/Bandage The Bandage window will appear. Input data Click on File: Load graph . Select a graph to upload. FIXME: put in example bacterial genome graph with a feature that bandage reveals. E.g. a FASTG output file from Spades. Run Bandage Under Graph drawing , click on Draw graph . A graph of the contigs and their connections will appear. FIXME: add a series of steps that can be done that will show some important feature. e.g. Graph display : Colour by read depth Node labels , check box next to Read depth . select some nodes Output : Web BLAST selected nodes etc. Output Output : Save entire graph to GFA (FIXME: where does this save; what can you use it for next). Next More information","title":"Bandage"},{"location":"scrapbook/viz/bandage/#bandage","text":"Bandage is a program to visualize a genome assembly. Link to code on github.","title":"Bandage"},{"location":"scrapbook/viz/bandage/#start","text":"Open your mGVL dashboard and click on the link to the Lubuntu desktop. A web window should appear called noVNC . This shows the virtual desktop. Open the Terminal in this VNC. type in: /mnt/gvl/apps/bandage/Bandage The Bandage window will appear.","title":"Start"},{"location":"scrapbook/viz/bandage/#input-data","text":"Click on File: Load graph . Select a graph to upload. FIXME: put in example bacterial genome graph with a feature that bandage reveals. E.g. a FASTG output file from Spades.","title":"Input data"},{"location":"scrapbook/viz/bandage/#run-bandage","text":"Under Graph drawing , click on Draw graph . A graph of the contigs and their connections will appear. FIXME: add a series of steps that can be done that will show some important feature. e.g. Graph display : Colour by read depth Node labels , check box next to Read depth . select some nodes Output : Web BLAST selected nodes etc.","title":"Run Bandage"},{"location":"scrapbook/viz/bandage/#output","text":"Output : Save entire graph to GFA (FIXME: where does this save; what can you use it for next).","title":"Output"},{"location":"scrapbook/viz/bandage/#next","text":"","title":"Next"},{"location":"scrapbook/viz/bandage/#more-information","text":"","title":"More information"},{"location":"scrapbook/viz/degust/","text":"","title":"Home"},{"location":"scrapbook/viz/jbrowse/","text":"","title":"Home"},{"location":"scrapbook/viz/phandango/","text":"Phandango FIXME: current Firefox on mGVL Lubuntu desktop is too old to use Phandango FIXME: ideally: sepsis related: would be good to see clade x has AMR genes? e.g. this example shows a subclade which is ceftriaxone susceptable but azithromycin resistant https://github.com/jameshadfield/phandango/wiki/Panel%20Layout#metadata Phandango is a tool to vizualize genome phylogenies. Start prepare input files (e.g. from Roary output): gene_presence_absence.csv : gene name, various information, then a column for each sample - if the gene is present in that sample, it is listed here with an appended gene ID. tree.newick : a phylogenetic tree based on an alignment of core genes. (Note: this is not a default Roary output and must be specified by creating an alignment of core genes, and then building a phylogenetic tree). navigate to these files in your mGVL (e.g. ssh in terminal) and move them to your public_html folder. open your public_html folder (e.g. http://mgvl_IP/public/username or similar), and download to your local computer. Run open the Phandango webpage. drag and drop these files onto the webpage. now we can see the tree on the left, and the core and accessory genome aligned to each sample. things to look at: top tabs: settings - change the displayed labels change panel sizes - drag grey circles at the edges of each panel line graph? Save output image press p to save the displayed data as a vector SVG file. What next","title":"Phandango"},{"location":"scrapbook/viz/phandango/#phandango","text":"FIXME: current Firefox on mGVL Lubuntu desktop is too old to use Phandango FIXME: ideally: sepsis related: would be good to see clade x has AMR genes? e.g. this example shows a subclade which is ceftriaxone susceptable but azithromycin resistant https://github.com/jameshadfield/phandango/wiki/Panel%20Layout#metadata Phandango is a tool to vizualize genome phylogenies.","title":"Phandango"},{"location":"scrapbook/viz/phandango/#start","text":"prepare input files (e.g. from Roary output): gene_presence_absence.csv : gene name, various information, then a column for each sample - if the gene is present in that sample, it is listed here with an appended gene ID. tree.newick : a phylogenetic tree based on an alignment of core genes. (Note: this is not a default Roary output and must be specified by creating an alignment of core genes, and then building a phylogenetic tree). navigate to these files in your mGVL (e.g. ssh in terminal) and move them to your public_html folder. open your public_html folder (e.g. http://mgvl_IP/public/username or similar), and download to your local computer.","title":"Start"},{"location":"scrapbook/viz/phandango/#run","text":"open the Phandango webpage. drag and drop these files onto the webpage. now we can see the tree on the left, and the core and accessory genome aligned to each sample. things to look at: top tabs: settings - change the displayed labels change panel sizes - drag grey circles at the edges of each panel line graph?","title":"Run"},{"location":"scrapbook/viz/phandango/#save-output-image","text":"press p to save the displayed data as a vector SVG file.","title":"Save output image"},{"location":"scrapbook/viz/phandango/#what-next","text":"","title":"What next"}]}